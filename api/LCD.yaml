openapi: 3.0.1
info:
  title: Osmosis LCD
  description: A REST interface for state queries, legacy transactions
  version: 1.0.0
servers:
  - url: https://lcd.osmosis.zone
    description: Osmosis mainnet node
  - url: https://lcd-test.osmosis.zone
    description: Osmosis testnet node

paths:
  /osmosis/gamm/v1beta1/num_pools:
    get:
      tags:
      - Query
      operationId: NumPools
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  numPools:
                    type: string
                    format: uint64
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools:
    get:
      tags:
      - Query
      operationId: Pools
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  pools:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools/{poolId}:
    get:
      tags:
      - Query
      summary: Per Pool gRPC Endpoints
      operationId: Pool
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  pool:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools/{poolId}/params:
    get:
      tags:
      - Query
      operationId: PoolParams
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      swapFee:
                        type: string
                      exitFee:
                        type: string
                      smoothWeightChangeParams:
                        title: |-
                          Parameters for changing the weights in a balancer pool smoothly from
                          a start weight and end weight over a period of time.
                          Currently, the only smooth change supported is linear changing between
                          the two weights, but more types may be added in the future.
                          When these parameters are set, the weight w(t) for pool time `t` is the
                          following:
                            t <= start_time: w(t) = initial_pool_weights
                            start_time < t <= start_time + duration:
                              w(t) = initial_pool_weights + (t - start_time) *
                                (target_pool_weights - initial_pool_weights) / (duration)
                            t > start_time + duration: w(t) = target_pool_weights
                        type: object
                        properties:
                          start_time:
                            type: string
                            description: |-
                              The start time for beginning the weight change.
                              If a parameter change / pool instantiation leaves this blank,
                              it should be generated by the state_machine as the current time.
                            format: date-time
                          duration:
                            title: Duration for the weights to change over
                            type: string
                          initialPoolWeights:
                            type: array
                            description: |-
                              The initial pool weights. These are copied from the pool's settings
                              at the time of weight change instantiation.
                              The amount PoolAsset.token.amount field is ignored if present,
                              future type refactorings should just have a type with the denom & weight
                              here.
                            items:
                              type: object
                              properties:
                                token:
                                  type: object
                                  properties:
                                    denom:
                                      type: string
                                    amount:
                                      type: string
                                  description: |-
                                    Coins we are talking about,
                                    the denomination must be unique amongst all PoolAssets for this pool.
                                weight:
                                  title: Weight that is not normalized. This weight
                                    must be less than 2^50
                                  type: string
                          targetPoolWeights:
                            type: array
                            description: |-
                              The target pool weights. The pool weights will change linearly with respect
                              to time between start_time, and start_time + duration. The amount
                              PoolAsset.token.amount field is ignored if present, future type
                              refactorings should just have a type with the denom & weight here.
                            items:
                              type: object
                              properties:
                                token:
                                  type: object
                                  properties:
                                    denom:
                                      type: string
                                    amount:
                                      type: string
                                  description: |-
                                    Coins we are talking about,
                                    the denomination must be unique amongst all PoolAssets for this pool.
                                weight:
                                  title: Weight that is not normalized. This weight
                                    must be less than 2^50
                                  type: string
                      start_time:
                        type: string
                        format: date-time
                    description: |-
                      PoolParams defined the parameters that will be managed by the pool governance
                      in the future. This params are not managed by the chain governanace.
                      Instead they will be managed by the token holders of the pool.
                      The pool's token holders are specified in future_pool_governor.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools/{poolId}/prices:
    get:
      tags:
      - Query
      operationId: SpotPrice
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      - name: tokenInDenom
        in: query
        schema:
          type: string
      - name: tokenOutDenom
        in: query
        schema:
          type: string
      - name: withSwapFee
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  spotPrice:
                    title: String of the Dec. Ex) 10.203uatom
                    type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools/{poolId}/tokens:
    get:
      tags:
      - Query
      operationId: PoolAssets
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  poolAssets:
                    type: array
                    items:
                      type: object
                      properties:
                        token:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coins we are talking about,
                            the denomination must be unique amongst all PoolAssets for this pool.
                        weight:
                          title: Weight that is not normalized. This weight must be
                            less than 2^50
                          type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/pools/{poolId}/total_share:
    get:
      tags:
      - Query
      operationId: TotalShare
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  totalShare:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: |-
                      Coin defines a token with a denomination and an amount.

                      NOTE: The amount field is an Int which implements the custom method
                      signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/total_liquidity:
    get:
      tags:
      - Query
      operationId: TotalLiquidity
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  liquidity:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_in:
    get:
      tags:
      - Query
      summary: Estimate the swap.
      operationId: EstimateSwapExactAmountIn
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      - name: sender
        in: query
        schema:
          type: string
      - name: tokenIn
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  tokenOutAmount:
                    type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_out:
    get:
      tags:
      - Query
      operationId: EstimateSwapExactAmountOut
      parameters:
      - name: poolId
        in: path
        required: true
        schema:
          type: string
          format: uint64
      - name: sender
        in: query
        schema:
          type: string
      - name: tokenOut
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  tokenInAmount:
                    type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/epochs/v1beta1/current_epoch:
    get:
      tags:
      - Query
      summary: CurrentEpoch provide current epoch of specified identifier
      operationId: CurrentEpoch
      parameters:
      - name: identifier
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  current_epoch:
                    type: string
                    format: int64
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/epochs/v1beta1/epochs:
    get:
      tags:
      - Query
      summary: EpochInfos provide running epochInfos
      operationId: EpochInfos
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  epochs:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        duration:
                          type: string
                        current_epoch:
                          type: string
                          format: int64
                        current_epoch_start_time:
                          type: string
                          format: date-time
                        epoch_counting_started:
                          type: boolean
                        current_epoch_ended:
                          type: boolean
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/pool-incentives/v1beta1/distr_info:
    get:
      tags:
      - Query
      operationId: DistrInfo
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  distr_info:
                    type: object
                    properties:
                      total_weight:
                        type: string
                      records:
                        type: array
                        items:
                          type: object
                          properties:
                            gauge_id:
                              type: string
                              format: uint64
                            weight:
                              type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/pool-incentives/v1beta1/gauge-ids/{pool_id}:
    get:
      tags:
      - Query
      summary: GaugeIds takes the pool id and returns the matching gauge ids and durations
      operationId: GaugeIds
      parameters:
      - name: pool_id
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  gauge_ids_with_duration:
                    type: array
                    items:
                      type: object
                      properties:
                        gauge_id:
                          type: string
                          format: uint64
                        duration:
                          type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/pool-incentives/v1beta1/incentivized_pools:
    get:
      tags:
      - Query
      operationId: IncentivizedPools
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  incentivized_pools:
                    type: array
                    items:
                      type: object
                      properties:
                        pool_id:
                          type: string
                          format: uint64
                        lockable_duration:
                          type: string
                        gauge_id:
                          type: string
                          format: uint64
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/pool-incentives/v1beta1/lockable_durations:
    get:
      tags:
      - Query
      operationId: LockableDurations
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  lockable_durations:
                    type: array
                    items:
                      type: string
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/pool-incentives/v1beta1/params:
    get:
      tags:
      - Query
      operationId: PoolIncentivesParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      minted_denom:
                        type: string
                        description: |-
                          minted_denom is the denomination of the coin expected to be minted by the
                          minting module. Pool-incentives module doesn’t actually mint the coin
                          itself, but rather manages the distribution of coins that matches the
                          defined minted_denom.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_coins/{owner}:
    get:
      tags:
      - Query
      summary: Return a locked coins that can't be withdrawn
      operationId: AccountLockedCoins
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_longer_duration/{owner}:
    get:
      tags:
      - Query
      summary: Returns account locked records with longer duration
      operationId: AccountLockedLongerDuration
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: duration
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_longer_duration_denom/{owner}:
    get:
      tags:
      - Query
      summary: Returns account's locked records for a denom with longer duration
      operationId: AccountLockedLongerDurationDenom
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: duration
        in: query
        schema:
          type: string
      - name: denom
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_longer_duration_not_unlocking_only/{owner}:
    get:
      tags:
      - Query
      summary: |-
        Returns account locked records with longer duration excluding tokens
        started unlocking
      operationId: AccountLockedLongerDurationNotUnlockingOnly
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: duration
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_pasttime/{owner}:
    get:
      tags:
      - Query
      summary: Returns locked records of an account with unlock time beyond timestamp
      operationId: AccountLockedPastTime
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_pasttime_denom/{owner}:
    get:
      tags:
      - Query
      summary: Returns lock records by address, timestamp, denom
      operationId: AccountLockedPastTimeDenom
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
          format: date-time
      - name: denom
        in: query
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_locked_pasttime_not_unlocking_only/{owner}:
    get:
      tags:
      - Query
      summary: |-
        Returns locked records of an account with unlock time beyond timestamp
        excluding tokens started unlocking
      operationId: AccountLockedPastTimeNotUnlockingOnly
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_unlockable_coins/{owner}:
    get:
      tags:
      - Query
      summary: Returns unlockable coins which are not withdrawn yet
      operationId: AccountUnlockableCoins
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_unlocked_before_time/{owner}:
    get:
      tags:
      - Query
      summary: Returns unlocked records with unlock time before timestamp
      operationId: AccountUnlockedBeforeTime
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  locks:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          format: uint64
                        owner:
                          type: string
                        duration:
                          type: string
                        end_time:
                          type: string
                          format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        PeriodLock is a single unit of lock by period. It's a record of locked coin
                        at a specific time. It stores owner, duration, unlock time and the amount of
                        coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/account_unlocking_coins/{owner}:
    get:
      tags:
      - Query
      summary: Returns unlocking coins
      operationId: AccountUnlockingCoins
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/locked_by_id/{lock_id}:
    get:
      tags:
      - Query
      summary: Returns lock record by id
      operationId: LockedByID
      parameters:
      - name: lock_id
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  lock:
                    type: object
                    properties:
                      ID:
                        type: string
                        format: uint64
                      owner:
                        type: string
                      duration:
                        type: string
                      end_time:
                        type: string
                        format: date-time
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                    description: |-
                      PeriodLock is a single unit of lock by period. It's a record of locked coin
                      at a specific time. It stores owner, duration, unlock time and the amount of
                      coins locked.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/module_balance:
    get:
      tags:
      - Query
      summary: Return full balance of the module
      operationId: ModuleBalance
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/lockup/v1beta1/module_locked_amount:
    get:
      tags:
      - Query
      summary: Return locked balance of the module
      operationId: ModuleLockedAmount
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/active_gauges:
    get:
      tags:
      - Query
      summary: returns active gauges
      operationId: ActiveGauges
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uint64
                        is_perpetual:
                          type: boolean
                        distribute_to:
                          title: |-
                            distribution incentives by third party
                            Rewards are distributed to lockups that are are returned by at least one of
                            these queries
                          type: object
                          properties:
                            lock_query_type:
                              type: string
                              default: ByDuration
                              enum:
                              - ByDuration
                              - ByTime
                            denom:
                              type: string
                            duration:
                              title: valid when query condition is ByDuration
                              type: string
                            timestamp:
                              title: valid when query condition is ByTime
                              type: string
                              format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        start_time:
                          title: distribution start time
                          type: string
                          format: date-time
                        num_epochs_paid_over:
                          type: string
                          format: uint64
                        filled_epochs:
                          type: string
                          format: uint64
                        distributed_coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines an pagination for the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/gauge_by_id/{id}:
    get:
      tags:
      - Query
      summary: returns Gauge by id
      operationId: GaugeByID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  gauge:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uint64
                      is_perpetual:
                        type: boolean
                      distribute_to:
                        title: |-
                          distribution incentives by third party
                          Rewards are distributed to lockups that are are returned by at least one of
                          these queries
                        type: object
                        properties:
                          lock_query_type:
                            type: string
                            default: ByDuration
                            enum:
                            - ByDuration
                            - ByTime
                          denom:
                            type: string
                          duration:
                            title: valid when query condition is ByDuration
                            type: string
                          timestamp:
                            title: valid when query condition is ByTime
                            type: string
                            format: date-time
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      start_time:
                        title: distribution start time
                        type: string
                        format: date-time
                      num_epochs_paid_over:
                        type: string
                        format: uint64
                      filled_epochs:
                        type: string
                        format: uint64
                      distributed_coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/gauges:
    get:
      tags:
      - Query
      summary: returns gauges both upcoming and active
      operationId: Gauges
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uint64
                        is_perpetual:
                          type: boolean
                        distribute_to:
                          title: |-
                            distribution incentives by third party
                            Rewards are distributed to lockups that are are returned by at least one of
                            these queries
                          type: object
                          properties:
                            lock_query_type:
                              type: string
                              default: ByDuration
                              enum:
                              - ByDuration
                              - ByTime
                            denom:
                              type: string
                            duration:
                              title: valid when query condition is ByDuration
                              type: string
                            timestamp:
                              title: valid when query condition is ByTime
                              type: string
                              format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        start_time:
                          title: distribution start time
                          type: string
                          format: date-time
                        num_epochs_paid_over:
                          type: string
                          format: uint64
                        filled_epochs:
                          type: string
                          format: uint64
                        distributed_coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines an pagination for the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/module_distributed_coins:
    get:
      tags:
      - Query
      summary: returns coins that are distributed by module so far
      operationId: ModuleDistributedCoins
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/module_to_distribute_coins:
    get:
      tags:
      - Query
      summary: returns coins that is going to be distributed
      operationId: ModuleToDistributeCoins
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/rewards_est/{owner}:
    get:
      tags:
      - Query
      summary: |-
        RewardsEst returns an estimate of the rewards at a future specific time.
        The querier either provides an address or a set of locks
        for which they want to find the associated rewards.
      operationId: RewardsEst
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: lock_ids
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uint64
      - name: end_epoch
        in: query
        schema:
          type: string
          format: int64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/incentives/v1beta1/upcoming_gauges:
    get:
      tags:
      - Query
      summary: returns scheduled gauges
      operationId: UpcomingGauges
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uint64
                        is_perpetual:
                          type: boolean
                        distribute_to:
                          title: |-
                            distribution incentives by third party
                            Rewards are distributed to lockups that are are returned by at least one of
                            these queries
                          type: object
                          properties:
                            lock_query_type:
                              type: string
                              default: ByDuration
                              enum:
                              - ByDuration
                              - ByTime
                            denom:
                              type: string
                            duration:
                              title: valid when query condition is ByDuration
                              type: string
                            timestamp:
                              title: valid when query condition is ByTime
                              type: string
                              format: date-time
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        start_time:
                          title: distribution start time
                          type: string
                          format: date-time
                        num_epochs_paid_over:
                          type: string
                          format: uint64
                        filled_epochs:
                          type: string
                          format: uint64
                        distributed_coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines an pagination for the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/claim/v1beta1/claim_record/{address}:
    get:
      tags:
      - Query
      operationId: ClaimRecord
      parameters:
      - name: address
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  claim_record:
                    title: A Claim Records is the metadata of claim data per address
                    type: object
                    properties:
                      address:
                        title: address of claim user
                        type: string
                      initial_claimable_amount:
                        title: total initial claimable amount for the user
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      action_completed:
                        title: |-
                          true if action is completed
                          index of bool in array refers to action enum #
                        type: array
                        items:
                          type: boolean
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/claim/v1beta1/claimable_for_action/{address}/{action}:
    get:
      tags:
      - Query
      operationId: ClaimableForAction
      parameters:
      - name: address
        in: path
        required: true
        schema:
          type: string
      - name: action
        in: path
        required: true
        schema:
          type: string
          enum:
          - ActionAddLiquidity
          - ActionSwap
          - ActionVote
          - ActionDelegateStake
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/claim/v1beta1/module_account_balance:
    get:
      tags:
      - Query
      operationId: ModuleAccountBalance
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  moduleAccountBalance:
                    type: array
                    description: params defines the parameters of the module.
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/claim/v1beta1/params:
    get:
      tags:
      - Query
      operationId: ClaimParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      airdrop_start_time:
                        type: string
                        format: date-time
                      duration_until_decay:
                        type: string
                      duration_of_decay:
                        type: string
                      claim_denom:
                        title: denom of claimable asset
                        type: string
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/claim/v1beta1/total_claimable/{address}:
    get:
      tags:
      - Query
      operationId: TotalClaimable
      parameters:
      - name: address
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /osmosis/mint/v1beta1/epoch_provisions:
    get:
      tags:
      - Query
      summary: EpochProvisions current minting epoch provisions value.
      operationId: EpochProvisions
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  epoch_provisions:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: epoch_provisions is the current minting per epoch
                      provisions value.
                    format: byte
                description: |-
                  QueryEpochProvisionsResponse is the response type for the
                  Query/EpochProvisions RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /osmosis/mint/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params returns the total set of minting parameters.
      operationId: MintParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      mint_denom:
                        title: type of coin to mint
                        type: string
                      genesis_epoch_provisions:
                        title: epoch provisions from the first epoch
                        type: string
                      epoch_identifier:
                        title: mint epoch identifier
                        type: string
                      reduction_period_in_epochs:
                        title: number of epochs take to reduce rewards
                        type: string
                        format: int64
                      reduction_factor:
                        title: reduction multiplier to execute on each period
                        type: string
                      distribution_proportions:
                        title: distribution_proportions defines the proportion of
                          the minted denom
                        type: object
                        properties:
                          staking:
                            type: string
                            description: |-
                              staking defines the proportion of the minted minted_denom that is to be
                              allocated as staking rewards.
                          pool_incentives:
                            type: string
                            description: |-
                              pool_incentives defines the proportion of the minted minted_denom that is
                              to be allocated as pool incentives.
                          developer_rewards:
                            type: string
                            description: |-
                              developer_rewards defines the proportion of the minted minted_denom that is
                              to be allocated to developer rewards address.
                          community_pool:
                            type: string
                            description: |-
                              community_pool defines the proportion of the minted minted_denom that is
                              to be allocated to the community pool.
                      developer_rewards_receiver:
                        title: address to receive developer rewards
                        type: string
                      minting_rewards_distribution_start_epoch:
                        title: start epoch to distribute minting rewards
                        type: string
                        format: int64
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      tags:
      - Query
      summary: Account returns account details based on address.
      operationId: Account
      parameters:
      - name: address
        in: path
        description: address defines the address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  account:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: account defines the account of the corresponding
                      address.
                description: QueryAccountResponse is the response type for the Query/Account
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/auth/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params queries all parameters.
      operationId: AuthParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      max_memo_characters:
                        type: string
                        format: uint64
                      tx_sig_limit:
                        type: string
                        format: uint64
                      tx_size_cost_per_byte:
                        type: string
                        format: uint64
                      sig_verify_cost_ed25519:
                        type: string
                        format: uint64
                      sig_verify_cost_secp256k1:
                        type: string
                        format: uint64
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      tags:
      - Query
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: AllBalances
      parameters:
      - name: address
        in: path
        description: address is the address to query balances for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    description: balances is the balances of all the coins.
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/balances/{address}/{denom}:
    get:
      tags:
      - Query
      summary: Balance queries the balance of a single coin for a single account.
      operationId: Balance
      parameters:
      - name: address
        in: path
        description: address is the address to query balances for.
        required: true
        schema:
          type: string
      - name: denom
        in: path
        description: denom is the coin denom to query balances for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  balance:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: balance is the balance of the coin.
                description: QueryBalanceResponse is the response type for the Query/Balance
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      tags:
      - Query
      summary: DenomsMetadata queries the client metadata for all registered coin
        denominations.
      operationId: DenomsMetadata
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  metadatas:
                    type: array
                    description: metadata provides the client information for all
                      the registered tokens.
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                        denom_units:
                          title: denom_units represents the list of DenomUnit's for
                            a given coin
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                                description: denom represents the string name of the
                                  given denom unit (e.g uatom).
                              exponent:
                                type: integer
                                description: |-
                                  exponent represents power of 10 exponent that one must
                                  raise the base_denom to in order to equal the given DenomUnit's denom
                                  1 denom = 1^exponent base_denom
                                  (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
                                  exponent = 6, thus: 1 atom = 10^6 uatom).
                                format: int64
                              aliases:
                                title: aliases is a list of string aliases for the
                                  given denom
                                type: array
                                items:
                                  type: string
                            description: |-
                              DenomUnit represents a struct that describes a given
                              denomination unit of the basic token.
                        base:
                          type: string
                          description: base represents the base denom (should be the
                            DenomUnit with exponent = 0).
                        display:
                          type: string
                          description: |-
                            display indicates the suggested denom that should be
                            displayed in clients.
                      description: |-
                        Metadata represents a struct that describes
                        a basic token.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      tags:
      - Query
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      operationId: DenomMetadata
      parameters:
      - name: denom
        in: path
        description: denom is the coin denom to query the metadata for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  metadata:
                    type: object
                    properties:
                      description:
                        type: string
                      denom_units:
                        title: denom_units represents the list of DenomUnit's for
                          a given coin
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                              description: denom represents the string name of the
                                given denom unit (e.g uatom).
                            exponent:
                              type: integer
                              description: |-
                                exponent represents power of 10 exponent that one must
                                raise the base_denom to in order to equal the given DenomUnit's denom
                                1 denom = 1^exponent base_denom
                                (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
                                exponent = 6, thus: 1 atom = 10^6 uatom).
                              format: int64
                            aliases:
                              title: aliases is a list of string aliases for the given
                                denom
                              type: array
                              items:
                                type: string
                          description: |-
                            DenomUnit represents a struct that describes a given
                            denomination unit of the basic token.
                      base:
                        type: string
                        description: base represents the base denom (should be the
                          DenomUnit with exponent = 0).
                      display:
                        type: string
                        description: |-
                          display indicates the suggested denom that should be
                          displayed in clients.
                    description: metadata describes and provides all the client information
                      for the requested token.
                description: |-
                  QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params queries the parameters of x/bank module.
      operationId: BankParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      send_enabled:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            enabled:
                              type: boolean
                          description: |-
                            SendEnabled maps coin denom to a send_enabled status (whether a denom is
                            sendable).
                      default_send_enabled:
                        type: boolean
                    description: Params defines the parameters for the bank module.
                description: QueryParamsResponse defines the response type for querying
                  x/bank parameters.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/supply:
    get:
      tags:
      - Query
      summary: TotalSupply queries the total supply of all coins.
      operationId: TotalSupply
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
                  method
                type: object
                properties:
                  supply:
                    title: supply is the supply of the coins
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/bank/v1beta1/supply/{denom}:
    get:
      tags:
      - Query
      summary: SupplyOf queries the supply of a single coin.
      operationId: SupplyOf
      parameters:
      - name: denom
        in: path
        description: denom is the coin denom to query balances for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  amount:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: amount is the supply of the coin.
                description: QuerySupplyOfResponse is the response type for the Query/SupplyOf
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/community_pool:
    get:
      tags:
      - Query
      summary: CommunityPool queries the community pool coins.
      operationId: CommunityPool
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  pool:
                    type: array
                    description: pool defines community pool's coins.
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        DecCoin defines a token with a denomination and a decimal amount.

                        NOTE: The amount field is an Dec which implements the custom method
                        signatures required by gogoproto.
                description: |-
                  QueryCommunityPoolResponse is the response type for the Query/CommunityPool
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards:
    get:
      tags:
      - Query
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
      operationId: DelegationTotalRewards
      parameters:
      - name: delegator_address
        in: path
        description: delegator_address defines the delegator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  rewards:
                    type: array
                    description: rewards defines all the rewards accrued by a delegator.
                    items:
                      type: object
                      properties:
                        validator_address:
                          type: string
                        reward:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              DecCoin defines a token with a denomination and a decimal amount.

                              NOTE: The amount field is an Dec which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        DelegationDelegatorReward represents the properties
                        of a delegator's delegation reward.
                  total:
                    type: array
                    description: total defines the sum of all the rewards.
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        DecCoin defines a token with a denomination and a decimal amount.

                        NOTE: The amount field is an Dec which implements the custom method
                        signatures required by gogoproto.
                description: |-
                  QueryDelegationTotalRewardsResponse is the response type for the
                  Query/DelegationTotalRewards RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}:
    get:
      tags:
      - Query
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      operationId: DelegationRewards
      parameters:
      - name: delegator_address
        in: path
        description: delegator_address defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: validator_address
        in: path
        description: validator_address defines the validator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  rewards:
                    type: array
                    description: rewards defines the rewards accrued by a delegation.
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        DecCoin defines a token with a denomination and a decimal amount.

                        NOTE: The amount field is an Dec which implements the custom method
                        signatures required by gogoproto.
                description: |-
                  QueryDelegationRewardsResponse is the response type for the
                  Query/DelegationRewards RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/validators:
    get:
      tags:
      - Query
      summary: DelegatorValidators queries the validators of a delegator.
      operationId: DelegatorValidators
      parameters:
      - name: delegator_address
        in: path
        description: delegator_address defines the delegator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  validators:
                    type: array
                    description: validators defines the validators a delegator is
                      delegating for.
                    items:
                      type: string
                description: |-
                  QueryDelegatorValidatorsResponse is the response type for the
                  Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address:
    get:
      tags:
      - Query
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      operationId: DelegatorWithdrawAddress
      parameters:
      - name: delegator_address
        in: path
        description: delegator_address defines the delegator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  withdraw_address:
                    type: string
                    description: withdraw_address defines the delegator address to
                      query for.
                description: |-
                  QueryDelegatorWithdrawAddressResponse is the response type for the
                  Query/DelegatorWithdrawAddress RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params queries params of the distribution module.
      operationId: DistributionParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      community_tax:
                        type: string
                      base_proposer_reward:
                        type: string
                      bonus_proposer_reward:
                        type: string
                      withdraw_addr_enabled:
                        type: boolean
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/validators/{validator_address}/commission:
    get:
      tags:
      - Query
      summary: ValidatorCommission queries accumulated commission for a validator.
      operationId: ValidatorCommission
      parameters:
      - name: validator_address
        in: path
        description: validator_address defines the validator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryValidatorCommissionResponse is the response type for the
                  Query/ValidatorCommission RPC method
                type: object
                properties:
                  commission:
                    type: object
                    properties:
                      commission:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            DecCoin defines a token with a denomination and a decimal amount.

                            NOTE: The amount field is an Dec which implements the custom method
                            signatures required by gogoproto.
                    description: commission defines the commision the validator received.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards:
    get:
      tags:
      - Query
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      operationId: ValidatorOutstandingRewards
      parameters:
      - name: validator_address
        in: path
        description: validator_address defines the validator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  rewards:
                    type: object
                    properties:
                      rewards:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            DecCoin defines a token with a denomination and a decimal amount.

                            NOTE: The amount field is an Dec which implements the custom method
                            signatures required by gogoproto.
                    description: |-
                      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
                      for a validator inexpensive to track, allows simple sanity checks.
                description: |-
                  QueryValidatorOutstandingRewardsResponse is the response type for the
                  Query/ValidatorOutstandingRewards RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/distribution/v1beta1/validators/{validator_address}/slashes:
    get:
      tags:
      - Query
      summary: ValidatorSlashes queries slash events of a validator.
      operationId: ValidatorSlashes
      parameters:
      - name: validator_address
        in: path
        description: validator_address defines the validator address to query for.
        required: true
        schema:
          type: string
      - name: starting_height
        in: query
        description: starting_height defines the optional starting height to query
          the slashes.
        schema:
          type: string
          format: uint64
      - name: ending_height
        in: query
        description: starting_height defines the optional ending height to query the
          slashes.
        schema:
          type: string
          format: uint64
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  slashes:
                    type: array
                    description: slashes defines the slashes the validator received.
                    items:
                      type: object
                      properties:
                        validator_period:
                          type: string
                          format: uint64
                        fraction:
                          type: string
                      description: |-
                        ValidatorSlashEvent represents a validator slash event.
                        Height is implicit within the store key.
                        This is needed to calculate appropriate amount of staking tokens
                        for delegations which are withdrawn after a slash has occurred.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryValidatorSlashesResponse is the response type for the
                  Query/ValidatorSlashes RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/evidence/v1beta1/evidence:
    get:
      tags:
      - Query
      summary: AllEvidence queries all evidence.
      operationId: AllEvidence
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  evidence:
                    type: array
                    description: evidence returns all evidences.
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/evidence/v1beta1/evidence/{evidence_hash}:
    get:
      tags:
      - Query
      summary: Evidence queries evidence based on evidence hash.
      operationId: Evidence
      parameters:
      - name: evidence_hash
        in: path
        description: evidence_hash defines the hash of the requested evidence.
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  evidence:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: evidence returns the requested evidence.
                description: QueryEvidenceResponse is the response type for the Query/Evidence
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/params/{params_type}:
    get:
      tags:
      - Query
      summary: Params queries all parameters of the gov module.
      operationId: GovParams
      parameters:
      - name: params_type
        in: path
        description: |-
          params_type defines which parameters to query for, can be one of "voting",
          "tallying" or "deposit".
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  voting_params:
                    type: object
                    properties:
                      voting_period:
                        type: string
                        description: Length of the voting period.
                    description: voting_params defines the parameters related to voting.
                  deposit_params:
                    type: object
                    properties:
                      min_deposit:
                        type: array
                        description: Minimum deposit for a proposal to enter voting
                          period.
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      max_deposit_period:
                        type: string
                        description: |-
                          Maximum period for Atom holders to deposit on a proposal. Initial value: 2
                           months.
                    description: deposit_params defines the parameters related to
                      deposit.
                  tally_params:
                    type: object
                    properties:
                      quorum:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          Minimum percentage of total stake needed to vote for a result to be
                           considered valid.
                        format: byte
                      threshold:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: 'Minimum proportion of Yes votes for proposal
                          to pass. Default value: 0.5.'
                        format: byte
                      veto_threshold:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          Minimum value of Veto votes to Total votes ratio for proposal to be
                           vetoed. Default value: 1/3.
                        format: byte
                    description: tally_params defines the parameters related to tally.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals:
    get:
      tags:
      - Query
      summary: Proposals queries all proposals based on given status.
      operationId: Proposals
      parameters:
      - name: proposal_status
        in: query
        description: |-
          proposal_status defines the status of the proposals.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
        schema:
          type: string
          default: PROPOSAL_STATUS_UNSPECIFIED
          enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
      - name: voter
        in: query
        description: voter defines the voter address for the proposals.
        schema:
          type: string
      - name: depositor
        in: query
        description: depositor defines the deposit addresses from the proposals.
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  proposals:
                    type: array
                    items:
                      type: object
                      properties:
                        proposal_id:
                          type: string
                          format: uint64
                        content:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: |-
                            `Any` contains an arbitrary serialized protocol buffer message along with a
                            URL that describes the type of the serialized message.

                            Protobuf library provides support to pack/unpack Any values in the form
                            of utility functions or additional generated methods of the Any type.

                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use
                            'type.googleapis.com/full.type.name' as the type URL and the unpack
                            methods only use the fully qualified type name after the last '/'
                            in the type URL, for example "foo.bar.com/x/y.z" will yield type
                            name "y.z".


                            JSON
                            ====
                            The JSON representation of an `Any` value uses the regular
                            representation of the deserialized, embedded message, with an
                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON
                            representation, that representation will be embedded adding a field
                            `value` which holds the custom JSON in addition to the `@type`
                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        status:
                          type: string
                          description: |-
                            ProposalStatus enumerates the valid statuses of a proposal.

                             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                            period.
                             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                            period.
                             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                            passed.
                             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                            been rejected.
                             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                            failed.
                          default: PROPOSAL_STATUS_UNSPECIFIED
                          enum:
                          - PROPOSAL_STATUS_UNSPECIFIED
                          - PROPOSAL_STATUS_DEPOSIT_PERIOD
                          - PROPOSAL_STATUS_VOTING_PERIOD
                          - PROPOSAL_STATUS_PASSED
                          - PROPOSAL_STATUS_REJECTED
                          - PROPOSAL_STATUS_FAILED
                        final_tally_result:
                          type: object
                          properties:
                            "yes":
                              type: string
                            abstain:
                              type: string
                            "no":
                              type: string
                            no_with_veto:
                              type: string
                          description: TallyResult defines a standard tally for a
                            governance proposal.
                        submit_time:
                          type: string
                          format: date-time
                        deposit_end_time:
                          type: string
                          format: date-time
                        total_deposit:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        voting_start_time:
                          type: string
                          format: date-time
                        voting_end_time:
                          type: string
                          format: date-time
                      description: Proposal defines the core field members of a governance
                        proposal.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryProposalsResponse is the response type for the Query/Proposals RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}:
    get:
      tags:
      - Query
      summary: Proposal queries proposal details based on ProposalID.
      operationId: Proposal
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  proposal:
                    type: object
                    properties:
                      proposal_id:
                        type: string
                        format: uint64
                      content:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                      status:
                        type: string
                        description: |-
                          ProposalStatus enumerates the valid statuses of a proposal.

                           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                          period.
                           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                          period.
                           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                          passed.
                           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                          been rejected.
                           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                          failed.
                        default: PROPOSAL_STATUS_UNSPECIFIED
                        enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      final_tally_result:
                        type: object
                        properties:
                          "yes":
                            type: string
                          abstain:
                            type: string
                          "no":
                            type: string
                          no_with_veto:
                            type: string
                        description: TallyResult defines a standard tally for a governance
                          proposal.
                      submit_time:
                        type: string
                        format: date-time
                      deposit_end_time:
                        type: string
                        format: date-time
                      total_deposit:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      voting_start_time:
                        type: string
                        format: date-time
                      voting_end_time:
                        type: string
                        format: date-time
                    description: Proposal defines the core field members of a governance
                      proposal.
                description: QueryProposalResponse is the response type for the Query/Proposal
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits:
    get:
      tags:
      - Query
      summary: Deposits queries all deposits of a single proposal.
      operationId: Deposits
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  deposits:
                    type: array
                    items:
                      type: object
                      properties:
                        proposal_id:
                          type: string
                          format: uint64
                        depositor:
                          type: string
                        amount:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                      description: |-
                        Deposit defines an amount deposited by an account address to an active
                        proposal.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: QueryDepositsResponse is the response type for the Query/Deposits
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}:
    get:
      tags:
      - Query
      summary: Deposit queries single deposit information based proposalID, depositAddr.
      operationId: Deposit
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      - name: depositor
        in: path
        description: depositor defines the deposit addresses from the proposals.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  deposit:
                    type: object
                    properties:
                      proposal_id:
                        type: string
                        format: uint64
                      depositor:
                        type: string
                      amount:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                    description: deposit defines the requested deposit.
                description: QueryDepositResponse is the response type for the Query/Deposit
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}/tally:
    get:
      tags:
      - Query
      summary: TallyResult queries the tally of a proposal vote.
      operationId: TallyResult
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  tally:
                    type: object
                    properties:
                      "yes":
                        type: string
                      abstain:
                        type: string
                      "no":
                        type: string
                      no_with_veto:
                        type: string
                    description: tally defines the requested tally.
                description: QueryTallyResultResponse is the response type for the
                  Query/Tally RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes:
    get:
      tags:
      - Query
      summary: Votes queries votes of a given proposal.
      operationId: Votes
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    description: votes defined the queried votes.
                    items:
                      type: object
                      properties:
                        proposal_id:
                          type: string
                          format: uint64
                        voter:
                          type: string
                        option:
                          type: string
                          description: |-
                            VoteOption enumerates the valid vote options for a given governance proposal.

                             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                          default: VOTE_OPTION_UNSPECIFIED
                          enum:
                          - VOTE_OPTION_UNSPECIFIED
                          - VOTE_OPTION_YES
                          - VOTE_OPTION_ABSTAIN
                          - VOTE_OPTION_NO
                          - VOTE_OPTION_NO_WITH_VETO
                      description: |-
                        Vote defines a vote on a governance proposal.
                        A Vote consists of a proposal ID, the voter, and the vote option.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: QueryVotesResponse is the response type for the Query/Votes
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}:
    get:
      tags:
      - Query
      summary: Vote queries voted information based on proposalID, voterAddr.
      operationId: Vote
      parameters:
      - name: proposal_id
        in: path
        description: proposal_id defines the unique id of the proposal.
        required: true
        schema:
          type: string
          format: uint64
      - name: voter
        in: path
        description: voter defines the oter address for the proposals.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  vote:
                    type: object
                    properties:
                      proposal_id:
                        type: string
                        format: uint64
                      voter:
                        type: string
                      option:
                        type: string
                        description: |-
                          VoteOption enumerates the valid vote options for a given governance proposal.

                           - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                           - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                           - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                           - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                           - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                        default: VOTE_OPTION_UNSPECIFIED
                        enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                    description: vote defined the queried vote.
                description: QueryVoteResponse is the response type for the Query/Vote
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/params/v1beta1/params:
    get:
      tags:
      - Query
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: Params
      parameters:
      - name: subspace
        in: query
        description: subspace defines the module to query the parameter for.
        schema:
          type: string
      - name: key
        in: query
        description: key defines the key of the parameter in the subspace.
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  param:
                    type: object
                    properties:
                      subspace:
                        type: string
                      key:
                        type: string
                      value:
                        type: string
                    description: param defines the queried parameter.
                description: QueryParamsResponse is response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/slashing/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params queries the parameters of slashing module
      operationId: SlashingParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryParamsResponse is the response type for the Query/Params
                  RPC method
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      signed_blocks_window:
                        type: string
                        format: int64
                      min_signed_per_window:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      downtime_jail_duration:
                        type: string
                      slash_fraction_double_sign:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      slash_fraction_downtime:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                    description: Params represents the parameters used for by the
                      slashing module.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      tags:
      - Query
      summary: SigningInfos queries signing info of all validators
      operationId: SigningInfos
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
                  method
                type: object
                properties:
                  info:
                    title: info is the signing info of all validators
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                        start_height:
                          title: height at which validator was first a candidate OR
                            was unjailed
                          type: string
                          format: int64
                        index_offset:
                          title: index offset into signed block bit array
                          type: string
                          format: int64
                        jailed_until:
                          title: timestamp validator cannot be unjailed until
                          type: string
                          format: date-time
                        tombstoned:
                          title: |-
                            whether or not a validator has been tombstoned (killed out of validator
                            set)
                          type: boolean
                        missed_blocks_counter:
                          title: missed blocks counter (to avoid scanning the array
                            every time)
                          type: string
                          format: int64
                      description: |-
                        ValidatorSigningInfo defines a validator's signing info for monitoring their
                        liveness activity.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/slashing/v1beta1/signing_infos/{cons_address}:
    get:
      tags:
      - Query
      summary: SigningInfo queries the signing info of given cons address
      operationId: SigningInfo
      parameters:
      - name: cons_address
        in: path
        description: cons_address is the address to query signing info of
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
                  method
                type: object
                properties:
                  val_signing_info:
                    title: val_signing_info is the signing info of requested val cons
                      address
                    type: object
                    properties:
                      address:
                        type: string
                      start_height:
                        title: height at which validator was first a candidate OR
                          was unjailed
                        type: string
                        format: int64
                      index_offset:
                        title: index offset into signed block bit array
                        type: string
                        format: int64
                      jailed_until:
                        title: timestamp validator cannot be unjailed until
                        type: string
                        format: date-time
                      tombstoned:
                        title: |-
                          whether or not a validator has been tombstoned (killed out of validator
                          set)
                        type: boolean
                      missed_blocks_counter:
                        title: missed blocks counter (to avoid scanning the array
                          every time)
                        type: string
                        format: int64
                    description: |-
                      ValidatorSigningInfo defines a validator's signing info for monitoring their
                      liveness activity.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /cosmos/staking/v1beta1/delegations/{delegator_addr}:
    get:
      tags:
      - Query
      summary: DelegatorDelegations queries all delegations of a given delegator address.
      operationId: DelegatorDelegations
      parameters:
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  delegation_responses:
                    type: array
                    description: delegation_responses defines all the delegations'
                      info of a delegator.
                    items:
                      type: object
                      properties:
                        delegation:
                          type: object
                          properties:
                            delegator_address:
                              type: string
                              description: delegator_address is the bech32-encoded
                                address of the delegator.
                            validator_address:
                              type: string
                              description: validator_address is the bech32-encoded
                                address of the validator.
                            shares:
                              type: string
                              description: shares define the delegation shares received.
                          description: |-
                            Delegation represents the bond with tokens held by an account. It is
                            owned by one delegator, and is associated with the voting power of one
                            validator.
                        balance:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      description: |-
                        DelegationResponse is equivalent to Delegation except that it contains a
                        balance in addition to shares which is more suitable for client responses.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryDelegatorDelegationsResponse is response type for the
                  Query/DelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations:
    get:
      tags:
      - Query
      summary: Redelegations queries redelegations of given address.
      operationId: Redelegations
      parameters:
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: src_validator_addr
        in: query
        description: src_validator_addr defines the validator address to redelegate
          from.
        schema:
          type: string
      - name: dst_validator_addr
        in: query
        description: dst_validator_addr defines the validator address to redelegate
          to.
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  redelegation_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        redelegation:
                          type: object
                          properties:
                            delegator_address:
                              type: string
                              description: delegator_address is the bech32-encoded
                                address of the delegator.
                            validator_src_address:
                              type: string
                              description: validator_src_address is the validator
                                redelegation source operator address.
                            validator_dst_address:
                              type: string
                              description: validator_dst_address is the validator
                                redelegation destination operator address.
                            entries:
                              type: array
                              description: entries are the redelegation entries.
                              items:
                                type: object
                                properties:
                                  creation_height:
                                    type: string
                                    description: creation_height  defines the height
                                      which the redelegation took place.
                                    format: int64
                                  completion_time:
                                    type: string
                                    description: completion_time defines the unix
                                      time for redelegation completion.
                                    format: date-time
                                  initial_balance:
                                    type: string
                                    description: initial_balance defines the initial
                                      balance when redelegation started.
                                  shares_dst:
                                    type: string
                                    description: shares_dst is the amount of destination-validator
                                      shares created by redelegation.
                                description: RedelegationEntry defines a redelegation
                                  object with relevant metadata.
                          description: |-
                            Redelegation contains the list of a particular delegator's redelegating bonds
                            from a particular source validator to a particular destination validator.
                        entries:
                          type: array
                          items:
                            type: object
                            properties:
                              redelegation_entry:
                                type: object
                                properties:
                                  creation_height:
                                    type: string
                                    description: creation_height  defines the height
                                      which the redelegation took place.
                                    format: int64
                                  completion_time:
                                    type: string
                                    description: completion_time defines the unix
                                      time for redelegation completion.
                                    format: date-time
                                  initial_balance:
                                    type: string
                                    description: initial_balance defines the initial
                                      balance when redelegation started.
                                  shares_dst:
                                    type: string
                                    description: shares_dst is the amount of destination-validator
                                      shares created by redelegation.
                                description: RedelegationEntry defines a redelegation
                                  object with relevant metadata.
                              balance:
                                type: string
                            description: |-
                              RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
                              contains a balance in addition to shares which is more suitable for client
                              responses.
                      description: |-
                        RedelegationResponse is equivalent to a Redelegation except that its entries
                        contain a balance in addition to shares which is more suitable for client
                        responses.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryRedelegationsResponse is response type for the Query/Redelegations RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations:
    get:
      tags:
      - Query
      summary: |-
        DelegatorUnbondingDelegations queries all unbonding delegations of a given
        delegator address.
      operationId: DelegatorUnbondingDelegations
      parameters:
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  unbonding_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: delegator_address is the bech32-encoded address
                            of the delegator.
                        validator_address:
                          type: string
                          description: validator_address is the bech32-encoded address
                            of the validator.
                        entries:
                          type: array
                          description: entries are the unbonding delegation entries.
                          items:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                description: creation_height is the height which the
                                  unbonding took place.
                                format: int64
                              completion_time:
                                type: string
                                description: completion_time is the unix time for
                                  unbonding completion.
                                format: date-time
                              initial_balance:
                                type: string
                                description: initial_balance defines the tokens initially
                                  scheduled to receive at completion.
                              balance:
                                type: string
                                description: balance defines the tokens to receive
                                  at completion.
                            description: UnbondingDelegationEntry defines an unbonding
                              object with relevant metadata.
                      description: |-
                        UnbondingDelegation stores all of a single delegator's unbonding bonds
                        for a single validator in an time-ordered list.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryUnbondingDelegatorDelegationsResponse is response type for the
                  Query/UnbondingDelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators:
    get:
      tags:
      - Query
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      operationId: StakingDelegatorValidators
      parameters:
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  validators:
                    type: array
                    description: validators defines the the validators' info of a
                      delegator.
                    items:
                      type: object
                      properties:
                        operator_address:
                          type: string
                          description: operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                        consensus_pubkey:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: consensus_pubkey is the consensus public key
                            of the validator, as a Protobuf Any.
                        jailed:
                          type: boolean
                          description: jailed defined whether the validator has been
                            jailed from bonded status or not.
                        status:
                          type: string
                          description: status is the validator status (bonded/unbonding/unbonded).
                          default: BOND_STATUS_UNSPECIFIED
                          enum:
                          - BOND_STATUS_UNSPECIFIED
                          - BOND_STATUS_UNBONDED
                          - BOND_STATUS_UNBONDING
                          - BOND_STATUS_BONDED
                        tokens:
                          type: string
                          description: tokens define the delegated tokens (incl. self-delegation).
                        delegator_shares:
                          type: string
                          description: delegator_shares defines total shares issued
                            to a validator's delegators.
                        description:
                          type: object
                          properties:
                            moniker:
                              type: string
                              description: moniker defines a human-readable name for
                                the validator.
                            identity:
                              type: string
                              description: identity defines an optional identity signature
                                (ex. UPort or Keybase).
                            website:
                              type: string
                              description: website defines an optional website link.
                            security_contact:
                              type: string
                              description: security_contact defines an optional email
                                for security contact.
                            details:
                              type: string
                              description: details define other optional details.
                          description: description defines the description terms for
                            the validator.
                        unbonding_height:
                          type: string
                          description: unbonding_height defines, if unbonding, the
                            height at which this validator has begun unbonding.
                          format: int64
                        unbonding_time:
                          type: string
                          description: unbonding_time defines, if unbonding, the min
                            time for the validator to complete unbonding.
                          format: date-time
                        commission:
                          type: object
                          properties:
                            commission_rates:
                              type: object
                              properties:
                                rate:
                                  type: string
                                  description: rate is the commission rate charged
                                    to delegators, as a fraction.
                                max_rate:
                                  type: string
                                  description: max_rate defines the maximum commission
                                    rate which validator can ever charge, as a fraction.
                                max_change_rate:
                                  type: string
                                  description: max_change_rate defines the maximum
                                    daily increase of the validator commission, as
                                    a fraction.
                              description: commission_rates defines the initial commission
                                rates to be used for creating a validator.
                            update_time:
                              type: string
                              description: update_time is the last time the commission
                                rate was changed.
                              format: date-time
                          description: commission defines the commission parameters.
                        min_self_delegation:
                          type: string
                          description: min_self_delegation is the validator's self
                            declared minimum self delegation.
                      description: |-
                        Validator defines a validator, together with the total amount of the
                        Validator's bond shares and their exchange rate to coins. Slashing results in
                        a decrease in the exchange rate, allowing correct calculation of future
                        undelegations without iterating over delegators. When coins are delegated to
                        this validator, the validator is credited with a delegation whose number of
                        bond shares is based on the amount of coins delegated divided by the current
                        exchange rate. Voting power can be calculated as total bonded shares
                        multiplied by exchange rate.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryDelegatorValidatorsResponse is response type for the
                  Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}:
    get:
      tags:
      - Query
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      operationId: DelegatorValidator
      parameters:
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  validator:
                    type: object
                    properties:
                      operator_address:
                        type: string
                        description: operator_address defines the address of the validator's
                          operator; bech encoded in JSON.
                      consensus_pubkey:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: consensus_pubkey is the consensus public key
                          of the validator, as a Protobuf Any.
                      jailed:
                        type: boolean
                        description: jailed defined whether the validator has been
                          jailed from bonded status or not.
                      status:
                        type: string
                        description: status is the validator status (bonded/unbonding/unbonded).
                        default: BOND_STATUS_UNSPECIFIED
                        enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      tokens:
                        type: string
                        description: tokens define the delegated tokens (incl. self-delegation).
                      delegator_shares:
                        type: string
                        description: delegator_shares defines total shares issued
                          to a validator's delegators.
                      description:
                        type: object
                        properties:
                          moniker:
                            type: string
                            description: moniker defines a human-readable name for
                              the validator.
                          identity:
                            type: string
                            description: identity defines an optional identity signature
                              (ex. UPort or Keybase).
                          website:
                            type: string
                            description: website defines an optional website link.
                          security_contact:
                            type: string
                            description: security_contact defines an optional email
                              for security contact.
                          details:
                            type: string
                            description: details define other optional details.
                        description: description defines the description terms for
                          the validator.
                      unbonding_height:
                        type: string
                        description: unbonding_height defines, if unbonding, the height
                          at which this validator has begun unbonding.
                        format: int64
                      unbonding_time:
                        type: string
                        description: unbonding_time defines, if unbonding, the min
                          time for the validator to complete unbonding.
                        format: date-time
                      commission:
                        type: object
                        properties:
                          commission_rates:
                            type: object
                            properties:
                              rate:
                                type: string
                                description: rate is the commission rate charged to
                                  delegators, as a fraction.
                              max_rate:
                                type: string
                                description: max_rate defines the maximum commission
                                  rate which validator can ever charge, as a fraction.
                              max_change_rate:
                                type: string
                                description: max_change_rate defines the maximum daily
                                  increase of the validator commission, as a fraction.
                            description: commission_rates defines the initial commission
                              rates to be used for creating a validator.
                          update_time:
                            type: string
                            description: update_time is the last time the commission
                              rate was changed.
                            format: date-time
                        description: commission defines the commission parameters.
                      min_self_delegation:
                        type: string
                        description: min_self_delegation is the validator's self declared
                          minimum self delegation.
                    description: validator defines the the validator info.
                description: |-
                  QueryDelegatorValidatorResponse response type for the
                  Query/DelegatorValidator RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/historical_info/{height}:
    get:
      tags:
      - Query
      summary: HistoricalInfo queries the historical info for given height.
      operationId: HistoricalInfo
      parameters:
      - name: height
        in: path
        description: height defines at which height to query the historical info.
        required: true
        schema:
          type: string
          format: int64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  hist:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          version:
                            title: basic block info
                            type: object
                            properties:
                              block:
                                type: string
                                format: uint64
                              app:
                                type: string
                                format: uint64
                            description: |-
                              Consensus captures the consensus rules for processing a block in the blockchain,
                              including all blockchain data structures and the rules of the application's
                              state transition machine.
                          chain_id:
                            type: string
                          height:
                            type: string
                            format: int64
                          time:
                            type: string
                            format: date-time
                          last_block_id:
                            title: prev block info
                            type: object
                            properties:
                              hash:
                                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                type: string
                                format: byte
                              part_set_header:
                                title: PartsetHeader
                                type: object
                                properties:
                                  total:
                                    type: integer
                                    format: int64
                                  hash:
                                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                    type: string
                                    format: byte
                          last_commit_hash:
                            title: hashes of block data
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          data_hash:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          validators_hash:
                            title: hashes from the app output from the prev block
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          next_validators_hash:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          consensus_hash:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          app_hash:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          last_results_hash:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          evidence_hash:
                            title: consensus info
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                          proposer_address:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            format: byte
                        description: Header defines the structure of a Tendermint
                          block header.
                      valset:
                        type: array
                        items:
                          type: object
                          properties:
                            operator_address:
                              type: string
                              description: operator_address defines the address of
                                the validator's operator; bech encoded in JSON.
                            consensus_pubkey:
                              type: object
                              properties:
                                type_url:
                                  type: string
                                  description: |-
                                    A URL/resource name that uniquely identifies the type of the serialized
                                    protocol buffer message. This string must contain at least
                                    one "/" character. The last segment of the URL's path must represent
                                    the fully qualified name of the type (as in
                                    `path/google.protobuf.Duration`). The name should be in a canonical form
                                    (e.g., leading "." is not accepted).

                                    In practice, teams usually precompile into the binary all types that they
                                    expect it to use in the context of Any. However, for URLs which use the
                                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                                    server that maps type URLs to message definitions as follows:

                                    * If no scheme is provided, `https` is assumed.
                                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                      value in binary format, or produce an error.
                                    * Applications are allowed to cache lookup results based on the
                                      URL, or have them precompiled into a binary to avoid any
                                      lookup. Therefore, binary compatibility needs to be preserved
                                      on changes to types. (Use versioned type names to manage
                                      breaking changes.)

                                    Note: this functionality is not currently available in the official
                                    protobuf release, and it is not used for type URLs beginning with
                                    type.googleapis.com.

                                    Schemes other than `http`, `https` (or the empty scheme) might be
                                    used with implementation specific semantics.
                                value:
                                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                  type: string
                                  description: Must be a valid serialized protocol
                                    buffer of the above specified type.
                                  format: byte
                              description: consensus_pubkey is the consensus public
                                key of the validator, as a Protobuf Any.
                            jailed:
                              type: boolean
                              description: jailed defined whether the validator has
                                been jailed from bonded status or not.
                            status:
                              type: string
                              description: status is the validator status (bonded/unbonding/unbonded).
                              default: BOND_STATUS_UNSPECIFIED
                              enum:
                              - BOND_STATUS_UNSPECIFIED
                              - BOND_STATUS_UNBONDED
                              - BOND_STATUS_UNBONDING
                              - BOND_STATUS_BONDED
                            tokens:
                              type: string
                              description: tokens define the delegated tokens (incl.
                                self-delegation).
                            delegator_shares:
                              type: string
                              description: delegator_shares defines total shares issued
                                to a validator's delegators.
                            description:
                              type: object
                              properties:
                                moniker:
                                  type: string
                                  description: moniker defines a human-readable name
                                    for the validator.
                                identity:
                                  type: string
                                  description: identity defines an optional identity
                                    signature (ex. UPort or Keybase).
                                website:
                                  type: string
                                  description: website defines an optional website
                                    link.
                                security_contact:
                                  type: string
                                  description: security_contact defines an optional
                                    email for security contact.
                                details:
                                  type: string
                                  description: details define other optional details.
                              description: description defines the description terms
                                for the validator.
                            unbonding_height:
                              type: string
                              description: unbonding_height defines, if unbonding,
                                the height at which this validator has begun unbonding.
                              format: int64
                            unbonding_time:
                              type: string
                              description: unbonding_time defines, if unbonding, the
                                min time for the validator to complete unbonding.
                              format: date-time
                            commission:
                              type: object
                              properties:
                                commission_rates:
                                  type: object
                                  properties:
                                    rate:
                                      type: string
                                      description: rate is the commission rate charged
                                        to delegators, as a fraction.
                                    max_rate:
                                      type: string
                                      description: max_rate defines the maximum commission
                                        rate which validator can ever charge, as a
                                        fraction.
                                    max_change_rate:
                                      type: string
                                      description: max_change_rate defines the maximum
                                        daily increase of the validator commission,
                                        as a fraction.
                                  description: commission_rates defines the initial
                                    commission rates to be used for creating a validator.
                                update_time:
                                  type: string
                                  description: update_time is the last time the commission
                                    rate was changed.
                                  format: date-time
                              description: commission defines the commission parameters.
                            min_self_delegation:
                              type: string
                              description: min_self_delegation is the validator's
                                self declared minimum self delegation.
                          description: |-
                            Validator defines a validator, together with the total amount of the
                            Validator's bond shares and their exchange rate to coins. Slashing results in
                            a decrease in the exchange rate, allowing correct calculation of future
                            undelegations without iterating over delegators. When coins are delegated to
                            this validator, the validator is credited with a delegation whose number of
                            bond shares is based on the amount of coins delegated divided by the current
                            exchange rate. Voting power can be calculated as total bonded shares
                            multiplied by exchange rate.
                    description: hist defines the historical info at the given height.
                description: |-
                  QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/params:
    get:
      tags:
      - Query
      summary: Parameters queries the staking parameters.
      operationId: StakingParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      unbonding_time:
                        type: string
                        description: unbonding_time is the time duration of unbonding.
                      max_validators:
                        type: integer
                        description: max_validators is the maximum number of validators.
                        format: int64
                      max_entries:
                        type: integer
                        description: max_entries is the max entries for either unbonding
                          delegation or redelegation (per pair/trio).
                        format: int64
                      historical_entries:
                        type: integer
                        description: historical_entries is the number of historical
                          entries to persist.
                        format: int64
                      bond_denom:
                        type: string
                        description: bond_denom defines the bondable coin denomination.
                      power_reduction:
                        title: power_reduction is the amount of staking tokens required
                          for 1 unit of consensus-engine power
                        type: string
                      min_commission_rate:
                        title: min_commission_rate is the chain-wide minimum commission
                          rate that a validator can charge their delegators
                        type: string
                    description: params holds all the parameters of this module.
                description: QueryParamsResponse is response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/pool:
    get:
      tags:
      - Query
      summary: Pool queries the pool info.
      operationId: StakingPool
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  pool:
                    type: object
                    properties:
                      not_bonded_tokens:
                        type: string
                      bonded_tokens:
                        type: string
                    description: pool defines the pool info.
                description: QueryPoolResponse is response type for the Query/Pool
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators:
    get:
      tags:
      - Query
      summary: Validators queries all validators that match the given status.
      operationId: Validators
      parameters:
      - name: status
        in: query
        description: status enables to query for validators matching a given status.
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryValidatorsResponse is response type for the Query/Validators
                  RPC method
                type: object
                properties:
                  validators:
                    type: array
                    description: validators contains all the queried validators.
                    items:
                      type: object
                      properties:
                        operator_address:
                          type: string
                          description: operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                        consensus_pubkey:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: consensus_pubkey is the consensus public key
                            of the validator, as a Protobuf Any.
                        jailed:
                          type: boolean
                          description: jailed defined whether the validator has been
                            jailed from bonded status or not.
                        status:
                          type: string
                          description: status is the validator status (bonded/unbonding/unbonded).
                          default: BOND_STATUS_UNSPECIFIED
                          enum:
                          - BOND_STATUS_UNSPECIFIED
                          - BOND_STATUS_UNBONDED
                          - BOND_STATUS_UNBONDING
                          - BOND_STATUS_BONDED
                        tokens:
                          type: string
                          description: tokens define the delegated tokens (incl. self-delegation).
                        delegator_shares:
                          type: string
                          description: delegator_shares defines total shares issued
                            to a validator's delegators.
                        description:
                          type: object
                          properties:
                            moniker:
                              type: string
                              description: moniker defines a human-readable name for
                                the validator.
                            identity:
                              type: string
                              description: identity defines an optional identity signature
                                (ex. UPort or Keybase).
                            website:
                              type: string
                              description: website defines an optional website link.
                            security_contact:
                              type: string
                              description: security_contact defines an optional email
                                for security contact.
                            details:
                              type: string
                              description: details define other optional details.
                          description: description defines the description terms for
                            the validator.
                        unbonding_height:
                          type: string
                          description: unbonding_height defines, if unbonding, the
                            height at which this validator has begun unbonding.
                          format: int64
                        unbonding_time:
                          type: string
                          description: unbonding_time defines, if unbonding, the min
                            time for the validator to complete unbonding.
                          format: date-time
                        commission:
                          type: object
                          properties:
                            commission_rates:
                              type: object
                              properties:
                                rate:
                                  type: string
                                  description: rate is the commission rate charged
                                    to delegators, as a fraction.
                                max_rate:
                                  type: string
                                  description: max_rate defines the maximum commission
                                    rate which validator can ever charge, as a fraction.
                                max_change_rate:
                                  type: string
                                  description: max_change_rate defines the maximum
                                    daily increase of the validator commission, as
                                    a fraction.
                              description: commission_rates defines the initial commission
                                rates to be used for creating a validator.
                            update_time:
                              type: string
                              description: update_time is the last time the commission
                                rate was changed.
                              format: date-time
                          description: commission defines the commission parameters.
                        min_self_delegation:
                          type: string
                          description: min_self_delegation is the validator's self
                            declared minimum self delegation.
                      description: |-
                        Validator defines a validator, together with the total amount of the
                        Validator's bond shares and their exchange rate to coins. Slashing results in
                        a decrease in the exchange rate, allowing correct calculation of future
                        undelegations without iterating over delegators. When coins are delegated to
                        this validator, the validator is credited with a delegation whose number of
                        bond shares is based on the amount of coins delegated divided by the current
                        exchange rate. Voting power can be calculated as total bonded shares
                        multiplied by exchange rate.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators/{validator_addr}:
    get:
      tags:
      - Query
      summary: Validator queries validator info for given validator address.
      operationId: Validator
      parameters:
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryValidatorResponse is response type for the Query/Validator
                  RPC method
                type: object
                properties:
                  validator:
                    type: object
                    properties:
                      operator_address:
                        type: string
                        description: operator_address defines the address of the validator's
                          operator; bech encoded in JSON.
                      consensus_pubkey:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: consensus_pubkey is the consensus public key
                          of the validator, as a Protobuf Any.
                      jailed:
                        type: boolean
                        description: jailed defined whether the validator has been
                          jailed from bonded status or not.
                      status:
                        type: string
                        description: status is the validator status (bonded/unbonding/unbonded).
                        default: BOND_STATUS_UNSPECIFIED
                        enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      tokens:
                        type: string
                        description: tokens define the delegated tokens (incl. self-delegation).
                      delegator_shares:
                        type: string
                        description: delegator_shares defines total shares issued
                          to a validator's delegators.
                      description:
                        type: object
                        properties:
                          moniker:
                            type: string
                            description: moniker defines a human-readable name for
                              the validator.
                          identity:
                            type: string
                            description: identity defines an optional identity signature
                              (ex. UPort or Keybase).
                          website:
                            type: string
                            description: website defines an optional website link.
                          security_contact:
                            type: string
                            description: security_contact defines an optional email
                              for security contact.
                          details:
                            type: string
                            description: details define other optional details.
                        description: description defines the description terms for
                          the validator.
                      unbonding_height:
                        type: string
                        description: unbonding_height defines, if unbonding, the height
                          at which this validator has begun unbonding.
                        format: int64
                      unbonding_time:
                        type: string
                        description: unbonding_time defines, if unbonding, the min
                          time for the validator to complete unbonding.
                        format: date-time
                      commission:
                        type: object
                        properties:
                          commission_rates:
                            type: object
                            properties:
                              rate:
                                type: string
                                description: rate is the commission rate charged to
                                  delegators, as a fraction.
                              max_rate:
                                type: string
                                description: max_rate defines the maximum commission
                                  rate which validator can ever charge, as a fraction.
                              max_change_rate:
                                type: string
                                description: max_change_rate defines the maximum daily
                                  increase of the validator commission, as a fraction.
                            description: commission_rates defines the initial commission
                              rates to be used for creating a validator.
                          update_time:
                            type: string
                            description: update_time is the last time the commission
                              rate was changed.
                            format: date-time
                        description: commission defines the commission parameters.
                      min_self_delegation:
                        type: string
                        description: min_self_delegation is the validator's self declared
                          minimum self delegation.
                    description: validator defines the the validator info.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations:
    get:
      tags:
      - Query
      summary: ValidatorDelegations queries delegate info for given validator.
      operationId: ValidatorDelegations
      parameters:
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryValidatorDelegationsResponse is response type for the
                  Query/ValidatorDelegations RPC method
                type: object
                properties:
                  delegation_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        delegation:
                          type: object
                          properties:
                            delegator_address:
                              type: string
                              description: delegator_address is the bech32-encoded
                                address of the delegator.
                            validator_address:
                              type: string
                              description: validator_address is the bech32-encoded
                                address of the validator.
                            shares:
                              type: string
                              description: shares define the delegation shares received.
                          description: |-
                            Delegation represents the bond with tokens held by an account. It is
                            owned by one delegator, and is associated with the voting power of one
                            validator.
                        balance:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      description: |-
                        DelegationResponse is equivalent to Delegation except that it contains a
                        balance in addition to shares which is more suitable for client responses.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}:
    get:
      tags:
      - Query
      summary: Delegation queries delegate info for given validator delegator pair.
      operationId: Delegation
      parameters:
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  delegation_response:
                    type: object
                    properties:
                      delegation:
                        type: object
                        properties:
                          delegator_address:
                            type: string
                            description: delegator_address is the bech32-encoded address
                              of the delegator.
                          validator_address:
                            type: string
                            description: validator_address is the bech32-encoded address
                              of the validator.
                          shares:
                            type: string
                            description: shares define the delegation shares received.
                        description: |-
                          Delegation represents the bond with tokens held by an account. It is
                          owned by one delegator, and is associated with the voting power of one
                          validator.
                      balance:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: |-
                          Coin defines a token with a denomination and an amount.

                          NOTE: The amount field is an Int which implements the custom method
                          signatures required by gogoproto.
                    description: delegation_responses defines the delegation info
                      of a delegation.
                description: QueryDelegationResponse is response type for the Query/Delegation
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation:
    get:
      tags:
      - Query
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      operationId: UnbondingDelegation
      parameters:
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      - name: delegator_addr
        in: path
        description: delegator_addr defines the delegator address to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  unbond:
                    type: object
                    properties:
                      delegator_address:
                        type: string
                        description: delegator_address is the bech32-encoded address
                          of the delegator.
                      validator_address:
                        type: string
                        description: validator_address is the bech32-encoded address
                          of the validator.
                      entries:
                        type: array
                        description: entries are the unbonding delegation entries.
                        items:
                          type: object
                          properties:
                            creation_height:
                              type: string
                              description: creation_height is the height which the
                                unbonding took place.
                              format: int64
                            completion_time:
                              type: string
                              description: completion_time is the unix time for unbonding
                                completion.
                              format: date-time
                            initial_balance:
                              type: string
                              description: initial_balance defines the tokens initially
                                scheduled to receive at completion.
                            balance:
                              type: string
                              description: balance defines the tokens to receive at
                                completion.
                          description: UnbondingDelegationEntry defines an unbonding
                            object with relevant metadata.
                    description: unbond defines the unbonding information of a delegation.
                description: |-
                  QueryDelegationResponse is response type for the Query/UnbondingDelegation
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations:
    get:
      tags:
      - Query
      summary: ValidatorUnbondingDelegations queries unbonding delegations of a validator.
      operationId: ValidatorUnbondingDelegations
      parameters:
      - name: validator_addr
        in: path
        description: validator_addr defines the validator address to query for.
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  unbonding_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: delegator_address is the bech32-encoded address
                            of the delegator.
                        validator_address:
                          type: string
                          description: validator_address is the bech32-encoded address
                            of the validator.
                        entries:
                          type: array
                          description: entries are the unbonding delegation entries.
                          items:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                description: creation_height is the height which the
                                  unbonding took place.
                                format: int64
                              completion_time:
                                type: string
                                description: completion_time is the unix time for
                                  unbonding completion.
                                format: date-time
                              initial_balance:
                                type: string
                                description: initial_balance defines the tokens initially
                                  scheduled to receive at completion.
                              balance:
                                type: string
                                description: balance defines the tokens to receive
                                  at completion.
                            description: UnbondingDelegationEntry defines an unbonding
                              object with relevant metadata.
                      description: |-
                        UnbondingDelegation stores all of a single delegator's unbonding bonds
                        for a single validator in an time-ordered list.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryValidatorUnbondingDelegationsResponse is response type for the
                  Query/ValidatorUnbondingDelegations RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/upgrade/v1beta1/applied_plan/{name}:
    get:
      tags:
      - Query
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: AppliedPlan
      parameters:
      - name: name
        in: path
        description: name is the name of the applied plan to query for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  height:
                    type: string
                    description: height is the block height at which the plan was
                      applied.
                    format: int64
                description: |-
                  QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      tags:
      - Query
      summary: CurrentPlan queries the current upgrade plan.
      operationId: CurrentPlan
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  plan:
                    type: object
                    properties:
                      name:
                        type: string
                        description: |-
                          Sets the name for the upgrade. This name will be used by the upgraded
                          version of the software to apply any special "on-upgrade" commands during
                          the first BeginBlock method after the upgrade is applied. It is also used
                          to detect whether a software version can handle a given upgrade. If no
                          upgrade handler with this name has been set in the software, it will be
                          assumed that the software is out-of-date when the upgrade Time or Height is
                          reached and the software will exit.
                      time:
                        type: string
                        description: |-
                          The time after which the upgrade must be performed.
                          Leave set to its zero value to use a pre-defined Height instead.
                        format: date-time
                      height:
                        type: string
                        description: |-
                          The height at which the upgrade must be performed.
                          Only used if Time is not set.
                        format: int64
                      info:
                        title: |-
                          Any application specific upgrade info to be included on-chain
                          such as a git commit that validators could automatically upgrade to
                        type: string
                      upgraded_client_state:
                        title: |-
                          IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
                          This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
                          so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
                          previous version of the chain.
                          This will allow IBC connections to persist smoothly across planned chain upgrades
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    description: plan is the current upgrade plan.
                description: |-
                  QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}:
    get:
      tags:
      - Query
      summary: |-
        UpgradedConsensusState queries the consensus state that will serve
        as a trusted kernel for the next version of this chain. It will only be
        stored at the last height of this chain.
        UpgradedConsensusState RPC not supported with legacy querier
      operationId: UpgradedConsensusState
      parameters:
      - name: last_height
        in: path
        description: |-
          last height of the current chain must be sent in request
          as this is the height under which next consensus state is stored
        required: true
        schema:
          type: string
          format: int64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  upgraded_consensus_state:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: |-
                  QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels:
    get:
      tags:
      - Query
      summary: Channels queries all the IBC channels of a chain.
      operationId: Channels
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    description: list of stored channels of the chain.
                    items:
                      type: object
                      properties:
                        state:
                          title: current state of the channel end
                          type: string
                          description: |-
                            State defines if a channel is in one of the following states:
                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                          - STATE_CLOSED
                        ordering:
                          title: whether the channel is ordered or unordered
                          type: string
                          description: |-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          default: ORDER_NONE_UNSPECIFIED
                          enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        counterparty:
                          title: counterparty channel end
                          type: object
                          properties:
                            port_id:
                              type: string
                              description: port on the counterparty chain which owns
                                the other end of the channel.
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                        connection_hops:
                          title: |-
                            list of connection identifiers, in order, along which packets sent on
                            this channel will travel
                          type: array
                          items:
                            type: string
                        version:
                          title: opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        channel_id:
                          title: channel identifier
                          type: string
                      description: |-
                        IdentifiedChannel defines a channel with additional port and channel
                        identifier fields.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
                description: QueryChannelsResponse is the response type for the Query/Channels
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}:
    get:
      tags:
      - Query
      summary: Channel queries an IBC Channel.
      operationId: Channel
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  channel:
                    title: channel associated with the request identifiers
                    type: object
                    properties:
                      state:
                        title: current state of the channel end
                        type: string
                        description: |-
                          State defines if a channel is in one of the following states:
                          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                           - STATE_INIT: A channel has just started the opening handshake.
                           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                           - STATE_OPEN: A channel has completed the handshake. Open channels are
                          ready to send and receive packets.
                           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                          packets.
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      ordering:
                        title: whether the channel is ordered or unordered
                        type: string
                        description: |-
                          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                          which they were sent.
                           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                        default: ORDER_NONE_UNSPECIFIED
                        enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      counterparty:
                        title: counterparty channel end
                        type: object
                        properties:
                          port_id:
                            type: string
                            description: port on the counterparty chain which owns
                              the other end of the channel.
                          channel_id:
                            title: channel end on the counterparty chain
                            type: string
                      connection_hops:
                        title: |-
                          list of connection identifiers, in order, along which packets sent on
                          this channel will travel
                        type: array
                        items:
                          type: string
                      version:
                        title: opaque channel version, which is agreed upon during
                          the handshake
                        type: string
                    description: |-
                      Channel defines pipeline for exactly-once packet delivery between specific
                      modules on separate blockchains, which has at least one end capable of
                      sending packets and one end capable of receiving packets.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
                description: |-
                  QueryChannelResponse is the response type for the Query/Channel RPC method.
                  Besides the Channel end, it includes a proof and the height from which the
                  proof was retrieved.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/client_state:
    get:
      tags:
      - Query
      summary: |-
        ChannelClientState queries for the client state for the channel associated
        with the provided channel identifiers.
      operationId: ChannelClientState
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
                properties:
                  identified_client_state:
                    title: client state associated with the channel
                    type: object
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        title: client state
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    description: |-
                      IdentifiedClientState defines a client state with an additional client
                      identifier field.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  ? /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}
  : get:
      tags:
      - Query
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      operationId: ChannelConsensusState
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        description: revision number of the consensus state
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        description: revision height of the consensus state
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the channel
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/next_sequence:
    get:
      tags:
      - Query
      summary: NextSequenceReceive returns the next receive sequence for a given channel.
      operationId: NextSequenceReceive
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QuerySequenceResponse is the request type for the
                  Query/QueryNextSequenceReceiveResponse RPC method
                type: object
                properties:
                  next_sequence_receive:
                    title: next sequence receive number
                    type: string
                    format: uint64
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements:
    get:
      tags:
      - Query
      summary: |-
        PacketAcknowledgements returns all the packet acknowledgements associated
        with a channel.
      operationId: PacketAcknowledgements
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketAcknowledgemetsResponse is the request type for the
                  Query/QueryPacketAcknowledgements RPC method
                type: object
                properties:
                  acknowledgements:
                    type: array
                    items:
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: channel port identifier.
                        channel_id:
                          type: string
                          description: channel unique identifier.
                        sequence:
                          type: string
                          description: packet sequence.
                          format: uint64
                        data:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: embedded data that represents packet state.
                          format: byte
                      description: |-
                        PacketState defines the generic type necessary to retrieve and store
                        packet commitments, acknowledgements, and receipts.
                        Caller is responsible for knowing the context necessary to interpret this
                        state as a commitment, acknowledgement, or a receipt.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}:
    get:
      tags:
      - Query
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      operationId: PacketAcknowledgement
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketAcknowledgementResponse defines the client query response for a
                  packet which also includes a proof and the height from which the
                  proof was retrieved
                type: object
                properties:
                  acknowledgement:
                    title: packet associated with the request fields
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments:
    get:
      tags:
      - Query
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      operationId: PacketCommitments
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketCommitmentsResponse is the request type for the
                  Query/QueryPacketCommitments RPC method
                type: object
                properties:
                  commitments:
                    type: array
                    items:
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: channel port identifier.
                        channel_id:
                          type: string
                          description: channel unique identifier.
                        sequence:
                          type: string
                          description: packet sequence.
                          format: uint64
                        data:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: embedded data that represents packet state.
                          format: byte
                      description: |-
                        PacketState defines the generic type necessary to retrieve and store
                        packet commitments, acknowledgements, and receipts.
                        Caller is responsible for knowing the context necessary to interpret this
                        state as a commitment, acknowledgement, or a receipt.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks:
    get:
      tags:
      - Query
      summary: |-
        UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a
        channel and sequences.
      operationId: UnreceivedAcks
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: packet_ack_sequences
        in: path
        description: list of acknowledgement sequences
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryUnreceivedAcksResponse is the response type for the
                  Query/UnreceivedAcks RPC method
                type: object
                properties:
                  sequences:
                    title: list of unreceived acknowledgement sequences
                    type: array
                    items:
                      type: string
                      format: uint64
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  ? /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets
  : get:
      tags:
      - Query
      summary: |-
        UnreceivedPackets returns all the unreceived IBC packets associated with a
        channel and sequences.
      operationId: UnreceivedPackets
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: packet_commitment_sequences
        in: path
        description: list of packet sequences
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryUnreceivedPacketsResponse is the response type for the
                  Query/UnreceivedPacketCommitments RPC method
                type: object
                properties:
                  sequences:
                    title: list of unreceived packet sequences
                    type: array
                    items:
                      type: string
                      format: uint64
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}:
    get:
      tags:
      - Query
      summary: PacketCommitment queries a stored packet commitment hash.
      operationId: PacketCommitment
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketCommitmentResponse defines the client query response for a packet
                  which also includes a proof and the height from which the proof was
                  retrieved
                type: object
                properties:
                  commitment:
                    title: packet associated with the request fields
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}:
    get:
      tags:
      - Query
      summary: PacketReceipt queries if a given packet sequence has been received
        on the queried chain
      operationId: PacketReceipt
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketReceiptResponse defines the client query response for a packet receipt
                  which also includes a proof, and the height from which the proof was
                  retrieved
                type: object
                properties:
                  received:
                    title: success flag for if receipt exists
                    type: boolean
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1beta1/connections/{connection}/channels:
    get:
      tags:
      - Query
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      operationId: ConnectionChannels
      parameters:
      - name: connection
        in: path
        description: connection unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionChannelsResponse is the Response type for the
                  Query/QueryConnectionChannels RPC method
                type: object
                properties:
                  channels:
                    type: array
                    description: list of channels associated with a connection.
                    items:
                      type: object
                      properties:
                        state:
                          title: current state of the channel end
                          type: string
                          description: |-
                            State defines if a channel is in one of the following states:
                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                          - STATE_CLOSED
                        ordering:
                          title: whether the channel is ordered or unordered
                          type: string
                          description: |-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          default: ORDER_NONE_UNSPECIFIED
                          enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        counterparty:
                          title: counterparty channel end
                          type: object
                          properties:
                            port_id:
                              type: string
                              description: port on the counterparty chain which owns
                                the other end of the channel.
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                        connection_hops:
                          title: |-
                            list of connection identifiers, in order, along which packets sent on
                            this channel will travel
                          type: array
                          items:
                            type: string
                        version:
                          title: opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        channel_id:
                          title: channel identifier
                          type: string
                      description: |-
                        IdentifiedChannel defines a channel with additional port and channel
                        identifier fields.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/client/v1beta1/params:
    get:
      tags:
      - Query
      summary: ClientParams queries all parameters of the ibc client.
      operationId: ClientParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      allowed_clients:
                        type: array
                        description: allowed_clients defines the list of allowed client
                          state types.
                        items:
                          type: string
                    description: params defines the parameters of the module.
                description: QueryClientParamsResponse is the response type for the
                  Query/ClientParams RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1beta1/client_states:
    get:
      tags:
      - Query
      summary: ClientStates queries all the IBC light clients of a chain.
      operationId: ClientStates
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  client_states:
                    type: array
                    description: list of stored ClientStates of the chain.
                    items:
                      type: object
                      properties:
                        client_id:
                          title: client identifier
                          type: string
                        client_state:
                          title: client state
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: |-
                            `Any` contains an arbitrary serialized protocol buffer message along with a
                            URL that describes the type of the serialized message.

                            Protobuf library provides support to pack/unpack Any values in the form
                            of utility functions or additional generated methods of the Any type.

                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use
                            'type.googleapis.com/full.type.name' as the type URL and the unpack
                            methods only use the fully qualified type name after the last '/'
                            in the type URL, for example "foo.bar.com/x/y.z" will yield type
                            name "y.z".


                            JSON
                            ====
                            The JSON representation of an `Any` value uses the regular
                            representation of the deserialized, embedded message, with an
                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON
                            representation, that representation will be embedded adding a field
                            `value` which holds the custom JSON in addition to the `@type`
                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                      description: |-
                        IdentifiedClientState defines a client state with an additional client
                        identifier field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                description: |-
                  QueryClientStatesResponse is the response type for the Query/ClientStates RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1beta1/client_states/{client_id}:
    get:
      tags:
      - Query
      summary: ClientState queries an IBC light client.
      operationId: ClientState
      parameters:
      - name: client_id
        in: path
        description: client state unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  client_state:
                    title: client state associated with the request identifier
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
                description: |-
                  QueryClientStateResponse is the response type for the Query/ClientState RPC
                  method. Besides the client state, it includes a proof and the height from
                  which the proof was retrieved.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1beta1/consensus_states/{client_id}:
    get:
      tags:
      - Query
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      operationId: ConsensusStates
      parameters:
      - name: client_id
        in: path
        description: client identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConsensusStatesResponse is the response type for the
                  Query/ConsensusStates RPC method
                type: object
                properties:
                  consensus_states:
                    title: consensus states associated with the identifier
                    type: array
                    items:
                      type: object
                      properties:
                        height:
                          title: consensus state height
                          type: object
                          properties:
                            revision_number:
                              title: the revision that the client is currently on
                              type: string
                              format: uint64
                            revision_height:
                              title: the height within the given revision
                              type: string
                              format: uint64
                          description: |-
                            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                            the same. However some consensus algorithms may choose to reset the
                            height in certain conditions e.g. hard forks, state-machine breaking changes
                            In these cases, the RevisionNumber is incremented so that height continues to
                            be monitonically increasing even as the RevisionHeight gets reset
                        consensus_state:
                          title: consensus state
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: |-
                            `Any` contains an arbitrary serialized protocol buffer message along with a
                            URL that describes the type of the serialized message.

                            Protobuf library provides support to pack/unpack Any values in the form
                            of utility functions or additional generated methods of the Any type.

                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use
                            'type.googleapis.com/full.type.name' as the type URL and the unpack
                            methods only use the fully qualified type name after the last '/'
                            in the type URL, for example "foo.bar.com/x/y.z" will yield type
                            name "y.z".


                            JSON
                            ====
                            The JSON representation of an `Any` value uses the regular
                            representation of the deserialized, embedded message, with an
                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON
                            representation, that representation will be embedded adding a field
                            `value` which holds the custom JSON in addition to the `@type`
                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                      description: ConsensusStateWithHeight defines a consensus state
                        with an additional height field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1beta1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}:
    get:
      tags:
      - Query
      summary: |-
        ConsensusState queries a consensus state associated with a client state at
        a given height.
      operationId: ConsensusState
      parameters:
      - name: client_id
        in: path
        description: client identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        description: consensus state revision number
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        description: consensus state revision height
        required: true
        schema:
          type: string
          format: uint64
      - name: latest_height
        in: query
        description: |-
          latest_height overrrides the height field and queries the latest stored
          ConsensusState.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConsensusStateResponse is the response type for the Query/ConsensusState
                  RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the client identifier at
                      the given height
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1beta1/client_connections/{client_id}:
    get:
      tags:
      - Query
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      operationId: ClientConnections
      parameters:
      - name: client_id
        in: path
        description: client identifier associated with a connection
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryClientConnectionsResponse is the response type for the
                  Query/ClientConnections RPC method
                type: object
                properties:
                  connection_paths:
                    type: array
                    description: slice of all the connection paths associated with
                      a client.
                    items:
                      type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was generated
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1beta1/connections:
    get:
      tags:
      - Query
      summary: Connections queries all the IBC connections of a chain.
      operationId: Connections
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    description: list of stored connections of the chain.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: connection identifier.
                        client_id:
                          type: string
                          description: client associated with this connection.
                        versions:
                          title: |-
                            IBC version which can be utilised to determine encodings or protocols for
                            channels or packets utilising this connection
                          type: array
                          items:
                            type: object
                            properties:
                              identifier:
                                title: unique version identifier
                                type: string
                              features:
                                title: list of features compatible with the specified
                                  identifier
                                type: array
                                items:
                                  type: string
                            description: |-
                              Version defines the versioning scheme used to negotiate the IBC verison in
                              the connection handshake.
                        state:
                          type: string
                          description: current state of the connection end.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                        counterparty:
                          type: object
                          properties:
                            client_id:
                              type: string
                              description: |-
                                identifies the client on the counterparty chain associated with a given
                                connection.
                            connection_id:
                              type: string
                              description: |-
                                identifies the connection end on the counterparty chain associated with a
                                given connection.
                            prefix:
                              title: |-
                                MerklePrefix is merkle path prefixed to the key.
                                The constructed key from the Path and the key will be append(Path.KeyPath,
                                append(Path.KeyPrefix, key...))
                              type: object
                              properties:
                                key_prefix:
                                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                  type: string
                                  format: byte
                              description: commitment merkle prefix of the counterparty
                                chain.
                          description: counterparty chain associated with this connection.
                        delay_period:
                          type: string
                          description: delay period associated with this connection.
                          format: uint64
                      description: |-
                        IdentifiedConnection defines a connection with additional connection
                        identifier field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
                description: |-
                  QueryConnectionsResponse is the response type for the Query/Connections RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1beta1/connections/{connection_id}:
    get:
      tags:
      - Query
      summary: Connection queries an IBC connection end.
      operationId: Connection
      parameters:
      - name: connection_id
        in: path
        description: connection unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  connection:
                    title: connection associated with the request identifier
                    type: object
                    properties:
                      client_id:
                        type: string
                        description: client associated with this connection.
                      versions:
                        type: array
                        description: |-
                          IBC version which can be utilised to determine encodings or protocols for
                          channels or packets utilising this connection.
                        items:
                          type: object
                          properties:
                            identifier:
                              title: unique version identifier
                              type: string
                            features:
                              title: list of features compatible with the specified
                                identifier
                              type: array
                              items:
                                type: string
                          description: |-
                            Version defines the versioning scheme used to negotiate the IBC verison in
                            the connection handshake.
                      state:
                        type: string
                        description: current state of the connection end.
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                      counterparty:
                        type: object
                        properties:
                          client_id:
                            type: string
                            description: |-
                              identifies the client on the counterparty chain associated with a given
                              connection.
                          connection_id:
                            type: string
                            description: |-
                              identifies the connection end on the counterparty chain associated with a
                              given connection.
                          prefix:
                            title: |-
                              MerklePrefix is merkle path prefixed to the key.
                              The constructed key from the Path and the key will be append(Path.KeyPath,
                              append(Path.KeyPrefix, key...))
                            type: object
                            properties:
                              key_prefix:
                                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                type: string
                                format: byte
                            description: commitment merkle prefix of the counterparty
                              chain.
                        description: counterparty chain associated with this connection.
                      delay_period:
                        type: string
                        description: |-
                          delay period that must pass before a consensus state can be used for packet-verification
                          NOTE: delay period logic is only implemented by some clients.
                        format: uint64
                    description: |-
                      ConnectionEnd defines a stateful object on a chain connected to another
                      separate one.
                      NOTE: there must only be 2 defined ConnectionEnds to establish
                      a connection between two chains.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
                description: |-
                  QueryConnectionResponse is the response type for the Query/Connection RPC
                  method. Besides the connection end, it includes a proof and the height from
                  which the proof was retrieved.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1beta1/connections/{connection_id}/client_state:
    get:
      tags:
      - Query
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      operationId: ConnectionClientState
      parameters:
      - name: connection_id
        in: path
        description: connection identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionClientStateResponse is the response type for the
                  Query/ConnectionClientState RPC method
                type: object
                properties:
                  identified_client_state:
                    title: client state associated with the channel
                    type: object
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        title: client state
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    description: |-
                      IdentifiedClientState defines a client state with an additional client
                      identifier field.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1beta1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      tags:
      - Query
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      operationId: ConnectionConsensusState
      parameters:
      - name: connection_id
        in: path
        description: connection identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionConsensusStateResponse is the response type for the
                  Query/ConnectionConsensusState RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the channel
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                      the same. However some consensus algorithms may choose to reset the
                      height in certain conditions e.g. hard forks, state-machine breaking changes
                      In these cases, the RevisionNumber is incremented so that height continues to
                      be monitonically increasing even as the RevisionHeight gets reset
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/applications/transfer/v1beta1/denom_traces:
    get:
      tags:
      - Query
      summary: DenomTraces queries all denomination traces.
      operationId: DenomTraces
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  denom_traces:
                    type: array
                    description: denom_traces returns all denominations trace information.
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: |-
                            path defines the chain of port/channel identifiers used for tracing the
                            source of the fungible token.
                        base_denom:
                          type: string
                          description: base denomination of the relayed fungible token.
                      description: |-
                        DenomTrace contains the base denomination for ICS20 fungible tokens and the
                        source tracing information path.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/applications/transfer/v1beta1/denom_traces/{hash}:
    get:
      tags:
      - Query
      summary: DenomTrace queries a denomination trace information.
      operationId: DenomTrace
      parameters:
      - name: hash
        in: path
        description: hash (in hex format) of the denomination trace information.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  denom_trace:
                    type: object
                    properties:
                      path:
                        type: string
                        description: |-
                          path defines the chain of port/channel identifiers used for tracing the
                          source of the fungible token.
                      base_denom:
                        type: string
                        description: base denomination of the relayed fungible token.
                    description: denom_trace returns the requested denomination trace
                      information.
                description: |-
                  QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/applications/transfer/v1beta1/params:
    get:
      tags:
      - Query
      summary: Params queries all parameters of the ibc-transfer module.
      operationId: IBCTransferParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      send_enabled:
                        type: boolean
                        description: |-
                          send_enabled enables or disables all cross-chain token transfers from this
                          chain.
                      receive_enabled:
                        type: boolean
                        description: |-
                          receive_enabled enables or disables all cross-chain token transfers to this
                          chain.
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
components:
  schemas:
    cosmos.base.query.v1beta1.PageRequest:
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
      type: object
      properties:
        key:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
        offset:
          type: string
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          format: uint64
        limit:
          type: string
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          format: uint64
        count_total:
          type: boolean
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
    cosmos.base.query.v1beta1.PageResponse:
      type: object
      properties:
        next_key:
          title: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        total:
          title: |-
            total is total number of results available if PageRequest.count_total
            was set, its value is undefined otherwise
          type: string
          format: uint64
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
    cosmos.base.v1beta1.Coin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
    google.protobuf.Any:
      type: object
      properties:
        type_url:
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
        value:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := ptypes.MarshalAny(foo)
             ...
             foo := &pb.Foo{}
             if err := ptypes.UnmarshalAny(any, foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    grpc.gateway.runtime.Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: |-
                  A URL/resource name that uniquely identifies the type of the serialized
                  protocol buffer message. This string must contain at least
                  one "/" character. The last segment of the URL's path must represent
                  the fully qualified name of the type (as in
                  `path/google.protobuf.Duration`). The name should be in a canonical form
                  (e.g., leading "." is not accepted).

                  In practice, teams usually precompile into the binary all types that they
                  expect it to use in the context of Any. However, for URLs which use the
                  scheme `http`, `https`, or no scheme, one can optionally set up a type
                  server that maps type URLs to message definitions as follows:

                  * If no scheme is provided, `https` is assumed.
                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official
                  protobuf release, and it is not used for type URLs beginning with
                  type.googleapis.com.

                  Schemes other than `http`, `https` (or the empty scheme) might be
                  used with implementation specific semantics.
              value:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
            description: |-
              `Any` contains an arbitrary serialized protocol buffer message along with a
              URL that describes the type of the serialized message.

              Protobuf library provides support to pack/unpack Any values in the form
              of utility functions or additional generated methods of the Any type.

              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use
              'type.googleapis.com/full.type.name' as the type URL and the unpack
              methods only use the fully qualified type name after the last '/'
              in the type URL, for example "foo.bar.com/x/y.z" will yield type
              name "y.z".


              JSON
              ====
              The JSON representation of an `Any` value uses the regular
              representation of the deserialized, embedded message, with an
              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON
              representation, that representation will be embedded adding a field
              `value` which holds the custom JSON in addition to the `@type`
              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
    osmosis.gamm.v1beta1.PoolAsset:
      type: object
      properties:
        token:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coins we are talking about,
            the denomination must be unique amongst all PoolAssets for this pool.
        weight:
          title: Weight that is not normalized. This weight must be less than 2^50
          type: string
    osmosis.gamm.v1beta1.PoolParams:
      type: object
      properties:
        swapFee:
          type: string
        exitFee:
          type: string
        smoothWeightChangeParams:
          title: |-
            Parameters for changing the weights in a balancer pool smoothly from
            a start weight and end weight over a period of time.
            Currently, the only smooth change supported is linear changing between
            the two weights, but more types may be added in the future.
            When these parameters are set, the weight w(t) for pool time `t` is the
            following:
              t <= start_time: w(t) = initial_pool_weights
              start_time < t <= start_time + duration:
                w(t) = initial_pool_weights + (t - start_time) *
                  (target_pool_weights - initial_pool_weights) / (duration)
              t > start_time + duration: w(t) = target_pool_weights
          type: object
          properties:
            start_time:
              type: string
              description: |-
                The start time for beginning the weight change.
                If a parameter change / pool instantiation leaves this blank,
                it should be generated by the state_machine as the current time.
              format: date-time
            duration:
              title: Duration for the weights to change over
              type: string
            initialPoolWeights:
              type: array
              description: |-
                The initial pool weights. These are copied from the pool's settings
                at the time of weight change instantiation.
                The amount PoolAsset.token.amount field is ignored if present,
                future type refactorings should just have a type with the denom & weight
                here.
              items:
                type: object
                properties:
                  token:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: |-
                      Coins we are talking about,
                      the denomination must be unique amongst all PoolAssets for this pool.
                  weight:
                    title: Weight that is not normalized. This weight must be less
                      than 2^50
                    type: string
            targetPoolWeights:
              type: array
              description: |-
                The target pool weights. The pool weights will change linearly with respect
                to time between start_time, and start_time + duration. The amount
                PoolAsset.token.amount field is ignored if present, future type
                refactorings should just have a type with the denom & weight here.
              items:
                type: object
                properties:
                  token:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: |-
                      Coins we are talking about,
                      the denomination must be unique amongst all PoolAssets for this pool.
                  weight:
                    title: Weight that is not normalized. This weight must be less
                      than 2^50
                    type: string
        start_time:
          type: string
          format: date-time
      description: |-
        PoolParams defined the parameters that will be managed by the pool governance
        in the future. This params are not managed by the chain governanace.
        Instead they will be managed by the token holders of the pool.
        The pool's token holders are specified in future_pool_governor.
    osmosis.gamm.v1beta1.QueryNumPoolsResponse:
      type: object
      properties:
        numPools:
          type: string
          format: uint64
    osmosis.gamm.v1beta1.QueryPoolAssetsResponse:
      type: object
      properties:
        poolAssets:
          type: array
          items:
            type: object
            properties:
              token:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coins we are talking about,
                  the denomination must be unique amongst all PoolAssets for this pool.
              weight:
                title: Weight that is not normalized. This weight must be less than
                  2^50
                type: string
    osmosis.gamm.v1beta1.QueryPoolParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            swapFee:
              type: string
            exitFee:
              type: string
            smoothWeightChangeParams:
              title: |-
                Parameters for changing the weights in a balancer pool smoothly from
                a start weight and end weight over a period of time.
                Currently, the only smooth change supported is linear changing between
                the two weights, but more types may be added in the future.
                When these parameters are set, the weight w(t) for pool time `t` is the
                following:
                  t <= start_time: w(t) = initial_pool_weights
                  start_time < t <= start_time + duration:
                    w(t) = initial_pool_weights + (t - start_time) *
                      (target_pool_weights - initial_pool_weights) / (duration)
                  t > start_time + duration: w(t) = target_pool_weights
              type: object
              properties:
                start_time:
                  type: string
                  description: |-
                    The start time for beginning the weight change.
                    If a parameter change / pool instantiation leaves this blank,
                    it should be generated by the state_machine as the current time.
                  format: date-time
                duration:
                  title: Duration for the weights to change over
                  type: string
                initialPoolWeights:
                  type: array
                  description: |-
                    The initial pool weights. These are copied from the pool's settings
                    at the time of weight change instantiation.
                    The amount PoolAsset.token.amount field is ignored if present,
                    future type refactorings should just have a type with the denom & weight
                    here.
                  items:
                    type: object
                    properties:
                      token:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: |-
                          Coins we are talking about,
                          the denomination must be unique amongst all PoolAssets for this pool.
                      weight:
                        title: Weight that is not normalized. This weight must be
                          less than 2^50
                        type: string
                targetPoolWeights:
                  type: array
                  description: |-
                    The target pool weights. The pool weights will change linearly with respect
                    to time between start_time, and start_time + duration. The amount
                    PoolAsset.token.amount field is ignored if present, future type
                    refactorings should just have a type with the denom & weight here.
                  items:
                    type: object
                    properties:
                      token:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: |-
                          Coins we are talking about,
                          the denomination must be unique amongst all PoolAssets for this pool.
                      weight:
                        title: Weight that is not normalized. This weight must be
                          less than 2^50
                        type: string
            start_time:
              type: string
              format: date-time
          description: |-
            PoolParams defined the parameters that will be managed by the pool governance
            in the future. This params are not managed by the chain governanace.
            Instead they will be managed by the token holders of the pool.
            The pool's token holders are specified in future_pool_governor.
    osmosis.gamm.v1beta1.QueryPoolResponse:
      type: object
      properties:
        pool:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
    osmosis.gamm.v1beta1.QueryPoolsResponse:
      type: object
      properties:
        pools:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: |-
                  A URL/resource name that uniquely identifies the type of the serialized
                  protocol buffer message. This string must contain at least
                  one "/" character. The last segment of the URL's path must represent
                  the fully qualified name of the type (as in
                  `path/google.protobuf.Duration`). The name should be in a canonical form
                  (e.g., leading "." is not accepted).

                  In practice, teams usually precompile into the binary all types that they
                  expect it to use in the context of Any. However, for URLs which use the
                  scheme `http`, `https`, or no scheme, one can optionally set up a type
                  server that maps type URLs to message definitions as follows:

                  * If no scheme is provided, `https` is assumed.
                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official
                  protobuf release, and it is not used for type URLs beginning with
                  type.googleapis.com.

                  Schemes other than `http`, `https` (or the empty scheme) might be
                  used with implementation specific semantics.
              value:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
            description: |-
              `Any` contains an arbitrary serialized protocol buffer message along with a
              URL that describes the type of the serialized message.

              Protobuf library provides support to pack/unpack Any values in the form
              of utility functions or additional generated methods of the Any type.

              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use
              'type.googleapis.com/full.type.name' as the type URL and the unpack
              methods only use the fully qualified type name after the last '/'
              in the type URL, for example "foo.bar.com/x/y.z" will yield type
              name "y.z".


              JSON
              ====
              The JSON representation of an `Any` value uses the regular
              representation of the deserialized, embedded message, with an
              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON
              representation, that representation will be embedded adding a field
              `value` which holds the custom JSON in addition to the `@type`
              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
    osmosis.gamm.v1beta1.QuerySpotPriceResponse:
      type: object
      properties:
        spotPrice:
          title: String of the Dec. Ex) 10.203uatom
          type: string
    osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse:
      type: object
      properties:
        tokenOutAmount:
          type: string
    osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse:
      type: object
      properties:
        tokenInAmount:
          type: string
    osmosis.gamm.v1beta1.QueryTotalLiquidityResponse:
      type: object
      properties:
        liquidity:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.gamm.v1beta1.QueryTotalShareResponse:
      type: object
      properties:
        totalShare:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    osmosis.gamm.v1beta1.SmoothWeightChangeParams:
      title: |-
        Parameters for changing the weights in a balancer pool smoothly from
        a start weight and end weight over a period of time.
        Currently, the only smooth change supported is linear changing between
        the two weights, but more types may be added in the future.
        When these parameters are set, the weight w(t) for pool time `t` is the
        following:
          t <= start_time: w(t) = initial_pool_weights
          start_time < t <= start_time + duration:
            w(t) = initial_pool_weights + (t - start_time) *
              (target_pool_weights - initial_pool_weights) / (duration)
          t > start_time + duration: w(t) = target_pool_weights
      type: object
      properties:
        start_time:
          type: string
          description: |-
            The start time for beginning the weight change.
            If a parameter change / pool instantiation leaves this blank,
            it should be generated by the state_machine as the current time.
          format: date-time
        duration:
          title: Duration for the weights to change over
          type: string
        initialPoolWeights:
          type: array
          description: |-
            The initial pool weights. These are copied from the pool's settings
            at the time of weight change instantiation.
            The amount PoolAsset.token.amount field is ignored if present,
            future type refactorings should just have a type with the denom & weight
            here.
          items:
            type: object
            properties:
              token:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coins we are talking about,
                  the denomination must be unique amongst all PoolAssets for this pool.
              weight:
                title: Weight that is not normalized. This weight must be less than
                  2^50
                type: string
        targetPoolWeights:
          type: array
          description: |-
            The target pool weights. The pool weights will change linearly with respect
            to time between start_time, and start_time + duration. The amount
            PoolAsset.token.amount field is ignored if present, future type
            refactorings should just have a type with the denom & weight here.
          items:
            type: object
            properties:
              token:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coins we are talking about,
                  the denomination must be unique amongst all PoolAssets for this pool.
              weight:
                title: Weight that is not normalized. This weight must be less than
                  2^50
                type: string
    osmosis.gamm.v1beta1.SwapAmountInRoute:
      title: ===================== MsgSwapExactAmountIn
      type: object
      properties:
        poolId:
          type: string
          format: uint64
        tokenOutDenom:
          type: string
    osmosis.gamm.v1beta1.SwapAmountOutRoute:
      title: ===================== MsgSwapExactAmountOut
      type: object
      properties:
        poolId:
          type: string
          format: uint64
        tokenInDenom:
          type: string
    osmosis.epochs.v1beta1.EpochInfo:
      type: object
      properties:
        identifier:
          type: string
        start_time:
          type: string
          format: date-time
        duration:
          type: string
        current_epoch:
          type: string
          format: int64
        current_epoch_start_time:
          type: string
          format: date-time
        epoch_counting_started:
          type: boolean
        current_epoch_ended:
          type: boolean
    osmosis.epochs.v1beta1.QueryCurrentEpochResponse:
      type: object
      properties:
        current_epoch:
          type: string
          format: int64
    osmosis.epochs.v1beta1.QueryEpochsInfoResponse:
      type: object
      properties:
        epochs:
          type: array
          items:
            type: object
            properties:
              identifier:
                type: string
              start_time:
                type: string
                format: date-time
              duration:
                type: string
              current_epoch:
                type: string
                format: int64
              current_epoch_start_time:
                type: string
                format: date-time
              epoch_counting_started:
                type: boolean
              current_epoch_ended:
                type: boolean
    osmosis.poolincentives.v1beta1.DistrInfo:
      type: object
      properties:
        total_weight:
          type: string
        records:
          type: array
          items:
            type: object
            properties:
              gauge_id:
                type: string
                format: uint64
              weight:
                type: string
    osmosis.poolincentives.v1beta1.DistrRecord:
      type: object
      properties:
        gauge_id:
          type: string
          format: uint64
        weight:
          type: string
    osmosis.poolincentives.v1beta1.IncentivizedPool:
      type: object
      properties:
        pool_id:
          type: string
          format: uint64
        lockable_duration:
          type: string
        gauge_id:
          type: string
          format: uint64
    osmosis.poolincentives.v1beta1.Params:
      type: object
      properties:
        minted_denom:
          type: string
          description: |-
            minted_denom is the denomination of the coin expected to be minted by the
            minting module. Pool-incentives module doesn’t actually mint the coin
            itself, but rather manages the distribution of coins that matches the
            defined minted_denom.
    osmosis.poolincentives.v1beta1.QueryDistrInfoResponse:
      type: object
      properties:
        distr_info:
          type: object
          properties:
            total_weight:
              type: string
            records:
              type: array
              items:
                type: object
                properties:
                  gauge_id:
                    type: string
                    format: uint64
                  weight:
                    type: string
    osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse:
      type: object
      properties:
        gauge_ids_with_duration:
          type: array
          items:
            type: object
            properties:
              gauge_id:
                type: string
                format: uint64
              duration:
                type: string
    osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration:
      type: object
      properties:
        gauge_id:
          type: string
          format: uint64
        duration:
          type: string
    osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse:
      type: object
      properties:
        incentivized_pools:
          type: array
          items:
            type: object
            properties:
              pool_id:
                type: string
                format: uint64
              lockable_duration:
                type: string
              gauge_id:
                type: string
                format: uint64
    osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse:
      type: object
      properties:
        lockable_durations:
          type: array
          items:
            type: string
    osmosis.poolincentives.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            minted_denom:
              type: string
              description: |-
                minted_denom is the denomination of the coin expected to be minted by the
                minting module. Pool-incentives module doesn’t actually mint the coin
                itself, but rather manages the distribution of coins that matches the
                defined minted_denom.
    osmosis.lockup.AccountLockedCoinsResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.lockup.AccountLockedLongerDurationDenomResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountLockedLongerDurationResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountLockedPastTimeDenomResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountLockedPastTimeResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountUnlockableCoinsResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.lockup.AccountUnlockedBeforeTimeResponse:
      type: object
      properties:
        locks:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                format: uint64
              owner:
                type: string
              duration:
                type: string
              end_time:
                type: string
                format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              PeriodLock is a single unit of lock by period. It's a record of locked coin
              at a specific time. It stores owner, duration, unlock time and the amount of
              coins locked.
    osmosis.lockup.AccountUnlockingCoinsResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.lockup.LockedResponse:
      type: object
      properties:
        lock:
          type: object
          properties:
            ID:
              type: string
              format: uint64
            owner:
              type: string
            duration:
              type: string
            end_time:
              type: string
              format: date-time
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
          description: |-
            PeriodLock is a single unit of lock by period. It's a record of locked coin
            at a specific time. It stores owner, duration, unlock time and the amount of
            coins locked.
    osmosis.lockup.ModuleBalanceResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.lockup.ModuleLockedAmountResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.lockup.PeriodLock:
      type: object
      properties:
        ID:
          type: string
          format: uint64
        owner:
          type: string
        duration:
          type: string
        end_time:
          type: string
          format: date-time
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
      description: |-
        PeriodLock is a single unit of lock by period. It's a record of locked coin
        at a specific time. It stores owner, duration, unlock time and the amount of
        coins locked.
    osmosis.incentives.ActiveGaugesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uint64
              is_perpetual:
                type: boolean
              distribute_to:
                title: |-
                  distribution incentives by third party
                  Rewards are distributed to lockups that are are returned by at least one of
                  these queries
                type: object
                properties:
                  lock_query_type:
                    type: string
                    default: ByDuration
                    enum:
                    - ByDuration
                    - ByTime
                  denom:
                    type: string
                  duration:
                    title: valid when query condition is ByDuration
                    type: string
                  timestamp:
                    title: valid when query condition is ByTime
                    type: string
                    format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
              start_time:
                title: distribution start time
                type: string
                format: date-time
              num_epochs_paid_over:
                type: string
                format: uint64
              filled_epochs:
                type: string
                format: uint64
              distributed_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines an pagination for the response.
    osmosis.incentives.Gauge:
      type: object
      properties:
        id:
          type: string
          format: uint64
        is_perpetual:
          type: boolean
        distribute_to:
          title: |-
            distribution incentives by third party
            Rewards are distributed to lockups that are are returned by at least one of
            these queries
          type: object
          properties:
            lock_query_type:
              type: string
              default: ByDuration
              enum:
              - ByDuration
              - ByTime
            denom:
              type: string
            duration:
              title: valid when query condition is ByDuration
              type: string
            timestamp:
              title: valid when query condition is ByTime
              type: string
              format: date-time
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        start_time:
          title: distribution start time
          type: string
          format: date-time
        num_epochs_paid_over:
          type: string
          format: uint64
        filled_epochs:
          type: string
          format: uint64
        distributed_coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.incentives.GaugeByIDResponse:
      type: object
      properties:
        gauge:
          type: object
          properties:
            id:
              type: string
              format: uint64
            is_perpetual:
              type: boolean
            distribute_to:
              title: |-
                distribution incentives by third party
                Rewards are distributed to lockups that are are returned by at least one of
                these queries
              type: object
              properties:
                lock_query_type:
                  type: string
                  default: ByDuration
                  enum:
                  - ByDuration
                  - ByTime
                denom:
                  type: string
                duration:
                  title: valid when query condition is ByDuration
                  type: string
                timestamp:
                  title: valid when query condition is ByTime
                  type: string
                  format: date-time
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            start_time:
              title: distribution start time
              type: string
              format: date-time
            num_epochs_paid_over:
              type: string
              format: uint64
            filled_epochs:
              type: string
              format: uint64
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
    osmosis.incentives.GaugesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uint64
              is_perpetual:
                type: boolean
              distribute_to:
                title: |-
                  distribution incentives by third party
                  Rewards are distributed to lockups that are are returned by at least one of
                  these queries
                type: object
                properties:
                  lock_query_type:
                    type: string
                    default: ByDuration
                    enum:
                    - ByDuration
                    - ByTime
                  denom:
                    type: string
                  duration:
                    title: valid when query condition is ByDuration
                    type: string
                  timestamp:
                    title: valid when query condition is ByTime
                    type: string
                    format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
              start_time:
                title: distribution start time
                type: string
                format: date-time
              num_epochs_paid_over:
                type: string
                format: uint64
              filled_epochs:
                type: string
                format: uint64
              distributed_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines an pagination for the response.
    osmosis.incentives.ModuleDistributedCoinsResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.incentives.ModuleToDistributeCoinsResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.incentives.RewardsEstResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.incentives.UpcomingGaugesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uint64
              is_perpetual:
                type: boolean
              distribute_to:
                title: |-
                  distribution incentives by third party
                  Rewards are distributed to lockups that are are returned by at least one of
                  these queries
                type: object
                properties:
                  lock_query_type:
                    type: string
                    default: ByDuration
                    enum:
                    - ByDuration
                    - ByTime
                  denom:
                    type: string
                  duration:
                    title: valid when query condition is ByDuration
                    type: string
                  timestamp:
                    title: valid when query condition is ByTime
                    type: string
                    format: date-time
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
              start_time:
                title: distribution start time
                type: string
                format: date-time
              num_epochs_paid_over:
                type: string
                format: uint64
              filled_epochs:
                type: string
                format: uint64
              distributed_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines an pagination for the response.
    osmosis.lockup.LockQueryType:
      type: string
      default: ByDuration
      enum:
      - ByDuration
      - ByTime
    osmosis.lockup.QueryCondition:
      type: object
      properties:
        lock_query_type:
          type: string
          default: ByDuration
          enum:
          - ByDuration
          - ByTime
        denom:
          type: string
        duration:
          title: valid when query condition is ByDuration
          type: string
        timestamp:
          title: valid when query condition is ByTime
          type: string
          format: date-time
    osmosis.claim.v1beta1.Action:
      type: string
      default: ActionAddLiquidity
      enum:
      - ActionAddLiquidity
      - ActionSwap
      - ActionVote
      - ActionDelegateStake
    osmosis.claim.v1beta1.ClaimRecord:
      title: A Claim Records is the metadata of claim data per address
      type: object
      properties:
        address:
          title: address of claim user
          type: string
        initial_claimable_amount:
          title: total initial claimable amount for the user
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        action_completed:
          title: |-
            true if action is completed
            index of bool in array refers to action enum #
          type: array
          items:
            type: boolean
    osmosis.claim.v1beta1.Params:
      type: object
      properties:
        airdrop_start_time:
          type: string
          format: date-time
        duration_until_decay:
          type: string
        duration_of_decay:
          type: string
        claim_denom:
          title: denom of claimable asset
          type: string
      description: Params defines the claim module's parameters.
    osmosis.claim.v1beta1.QueryClaimRecordResponse:
      type: object
      properties:
        claim_record:
          title: A Claim Records is the metadata of claim data per address
          type: object
          properties:
            address:
              title: address of claim user
              type: string
            initial_claimable_amount:
              title: total initial claimable amount for the user
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            action_completed:
              title: |-
                true if action is completed
                index of bool in array refers to action enum #
              type: array
              items:
                type: boolean
    osmosis.claim.v1beta1.QueryClaimableForActionResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.claim.v1beta1.QueryModuleAccountBalanceResponse:
      type: object
      properties:
        moduleAccountBalance:
          type: array
          description: params defines the parameters of the module.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    osmosis.claim.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            airdrop_start_time:
              type: string
              format: date-time
            duration_until_decay:
              type: string
            duration_of_decay:
              type: string
            claim_denom:
              title: denom of claimable asset
              type: string
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    osmosis.claim.v1beta1.QueryTotalClaimableResponse:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    osmosis.mint.v1beta1.DistributionProportions:
      type: object
      properties:
        staking:
          type: string
          description: |-
            staking defines the proportion of the minted minted_denom that is to be
            allocated as staking rewards.
        pool_incentives:
          type: string
          description: |-
            pool_incentives defines the proportion of the minted minted_denom that is
            to be allocated as pool incentives.
        developer_rewards:
          type: string
          description: |-
            developer_rewards defines the proportion of the minted minted_denom that is
            to be allocated to developer rewards address.
        community_pool:
          type: string
          description: |-
            community_pool defines the proportion of the minted minted_denom that is
            to be allocated to the community pool.
    osmosis.mint.v1beta1.Params:
      type: object
      properties:
        mint_denom:
          title: type of coin to mint
          type: string
        genesis_epoch_provisions:
          title: epoch provisions from the first epoch
          type: string
        epoch_identifier:
          title: mint epoch identifier
          type: string
        reduction_period_in_epochs:
          title: number of epochs take to reduce rewards
          type: string
          format: int64
        reduction_factor:
          title: reduction multiplier to execute on each period
          type: string
        distribution_proportions:
          title: distribution_proportions defines the proportion of the minted denom
          type: object
          properties:
            staking:
              type: string
              description: |-
                staking defines the proportion of the minted minted_denom that is to be
                allocated as staking rewards.
            pool_incentives:
              type: string
              description: |-
                pool_incentives defines the proportion of the minted minted_denom that is
                to be allocated as pool incentives.
            developer_rewards:
              type: string
              description: |-
                developer_rewards defines the proportion of the minted minted_denom that is
                to be allocated to developer rewards address.
            community_pool:
              type: string
              description: |-
                community_pool defines the proportion of the minted minted_denom that is
                to be allocated to the community pool.
        developer_rewards_receiver:
          title: address to receive developer rewards
          type: string
        minting_rewards_distribution_start_epoch:
          title: start epoch to distribute minting rewards
          type: string
          format: int64
      description: Params holds parameters for the mint module.
    osmosis.mint.v1beta1.QueryEpochProvisionsResponse:
      type: object
      properties:
        epoch_provisions:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: epoch_provisions is the current minting per epoch provisions
            value.
          format: byte
      description: |-
        QueryEpochProvisionsResponse is the response type for the
        Query/EpochProvisions RPC method.
    osmosis.mint.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            mint_denom:
              title: type of coin to mint
              type: string
            genesis_epoch_provisions:
              title: epoch provisions from the first epoch
              type: string
            epoch_identifier:
              title: mint epoch identifier
              type: string
            reduction_period_in_epochs:
              title: number of epochs take to reduce rewards
              type: string
              format: int64
            reduction_factor:
              title: reduction multiplier to execute on each period
              type: string
            distribution_proportions:
              title: distribution_proportions defines the proportion of the minted
                denom
              type: object
              properties:
                staking:
                  type: string
                  description: |-
                    staking defines the proportion of the minted minted_denom that is to be
                    allocated as staking rewards.
                pool_incentives:
                  type: string
                  description: |-
                    pool_incentives defines the proportion of the minted minted_denom that is
                    to be allocated as pool incentives.
                developer_rewards:
                  type: string
                  description: |-
                    developer_rewards defines the proportion of the minted minted_denom that is
                    to be allocated to developer rewards address.
                community_pool:
                  type: string
                  description: |-
                    community_pool defines the proportion of the minted minted_denom that is
                    to be allocated to the community pool.
            developer_rewards_receiver:
              title: address to receive developer rewards
              type: string
            minting_rewards_distribution_start_epoch:
              title: start epoch to distribute minting rewards
              type: string
              format: int64
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    cosmos.auth.v1beta1.Params:
      type: object
      properties:
        max_memo_characters:
          type: string
          format: uint64
        tx_sig_limit:
          type: string
          format: uint64
        tx_size_cost_per_byte:
          type: string
          format: uint64
        sig_verify_cost_ed25519:
          type: string
          format: uint64
        sig_verify_cost_secp256k1:
          type: string
          format: uint64
      description: Params defines the parameters for the auth module.
    cosmos.auth.v1beta1.QueryAccountResponse:
      type: object
      properties:
        account:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: account defines the account of the corresponding address.
      description: QueryAccountResponse is the response type for the Query/Account
        RPC method.
    cosmos.auth.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            max_memo_characters:
              type: string
              format: uint64
            tx_sig_limit:
              type: string
              format: uint64
            tx_size_cost_per_byte:
              type: string
              format: uint64
            sig_verify_cost_ed25519:
              type: string
              format: uint64
            sig_verify_cost_secp256k1:
              type: string
              format: uint64
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    cosmos.bank.v1beta1.DenomUnit:
      type: object
      properties:
        denom:
          type: string
          description: denom represents the string name of the given denom unit (e.g
            uatom).
        exponent:
          type: integer
          description: |-
            exponent represents power of 10 exponent that one must
            raise the base_denom to in order to equal the given DenomUnit's denom
            1 denom = 1^exponent base_denom
            (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
            exponent = 6, thus: 1 atom = 10^6 uatom).
          format: int64
        aliases:
          title: aliases is a list of string aliases for the given denom
          type: array
          items:
            type: string
      description: |-
        DenomUnit represents a struct that describes a given
        denomination unit of the basic token.
    cosmos.bank.v1beta1.Metadata:
      type: object
      properties:
        description:
          type: string
        denom_units:
          title: denom_units represents the list of DenomUnit's for a given coin
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
                description: denom represents the string name of the given denom unit
                  (e.g uatom).
              exponent:
                type: integer
                description: |-
                  exponent represents power of 10 exponent that one must
                  raise the base_denom to in order to equal the given DenomUnit's denom
                  1 denom = 1^exponent base_denom
                  (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
                  exponent = 6, thus: 1 atom = 10^6 uatom).
                format: int64
              aliases:
                title: aliases is a list of string aliases for the given denom
                type: array
                items:
                  type: string
            description: |-
              DenomUnit represents a struct that describes a given
              denomination unit of the basic token.
        base:
          type: string
          description: base represents the base denom (should be the DenomUnit with
            exponent = 0).
        display:
          type: string
          description: |-
            display indicates the suggested denom that should be
            displayed in clients.
      description: |-
        Metadata represents a struct that describes
        a basic token.
    cosmos.bank.v1beta1.Params:
      type: object
      properties:
        send_enabled:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              enabled:
                type: boolean
            description: |-
              SendEnabled maps coin denom to a send_enabled status (whether a denom is
              sendable).
        default_send_enabled:
          type: boolean
      description: Params defines the parameters for the bank module.
    cosmos.bank.v1beta1.QueryAllBalancesResponse:
      type: object
      properties:
        balances:
          type: array
          description: balances is the balances of all the coins.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
        method.
    cosmos.bank.v1beta1.QueryBalanceResponse:
      type: object
      properties:
        balance:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: balance is the balance of the coin.
      description: QueryBalanceResponse is the response type for the Query/Balance
        RPC method.
    cosmos.bank.v1beta1.QueryDenomMetadataResponse:
      type: object
      properties:
        metadata:
          type: object
          properties:
            description:
              type: string
            denom_units:
              title: denom_units represents the list of DenomUnit's for a given coin
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    description: denom represents the string name of the given denom
                      unit (e.g uatom).
                  exponent:
                    type: integer
                    description: |-
                      exponent represents power of 10 exponent that one must
                      raise the base_denom to in order to equal the given DenomUnit's denom
                      1 denom = 1^exponent base_denom
                      (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
                      exponent = 6, thus: 1 atom = 10^6 uatom).
                    format: int64
                  aliases:
                    title: aliases is a list of string aliases for the given denom
                    type: array
                    items:
                      type: string
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
            base:
              type: string
              description: base represents the base denom (should be the DenomUnit
                with exponent = 0).
            display:
              type: string
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
          description: metadata describes and provides all the client information
            for the requested token.
      description: |-
        QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
        method.
    cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
      type: object
      properties:
        metadatas:
          type: array
          description: metadata provides the client information for all the registered
            tokens.
          items:
            type: object
            properties:
              description:
                type: string
              denom_units:
                title: denom_units represents the list of DenomUnit's for a given
                  coin
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                      description: denom represents the string name of the given denom
                        unit (e.g uatom).
                    exponent:
                      type: integer
                      description: |-
                        exponent represents power of 10 exponent that one must
                        raise the base_denom to in order to equal the given DenomUnit's denom
                        1 denom = 1^exponent base_denom
                        (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
                        exponent = 6, thus: 1 atom = 10^6 uatom).
                      format: int64
                    aliases:
                      title: aliases is a list of string aliases for the given denom
                      type: array
                      items:
                        type: string
                  description: |-
                    DenomUnit represents a struct that describes a given
                    denomination unit of the basic token.
              base:
                type: string
                description: base represents the base denom (should be the DenomUnit
                  with exponent = 0).
              display:
                type: string
                description: |-
                  display indicates the suggested denom that should be
                  displayed in clients.
            description: |-
              Metadata represents a struct that describes
              a basic token.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
        method.
    cosmos.bank.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            send_enabled:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  enabled:
                    type: boolean
                description: |-
                  SendEnabled maps coin denom to a send_enabled status (whether a denom is
                  sendable).
            default_send_enabled:
              type: boolean
          description: Params defines the parameters for the bank module.
      description: QueryParamsResponse defines the response type for querying x/bank
        parameters.
    cosmos.bank.v1beta1.QuerySupplyOfResponse:
      type: object
      properties:
        amount:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: amount is the supply of the coin.
      description: QuerySupplyOfResponse is the response type for the Query/SupplyOf
        RPC method.
    cosmos.bank.v1beta1.QueryTotalSupplyResponse:
      title: |-
        QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
        method
      type: object
      properties:
        supply:
          title: supply is the supply of the coins
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    cosmos.bank.v1beta1.SendEnabled:
      type: object
      properties:
        denom:
          type: string
        enabled:
          type: boolean
      description: |-
        SendEnabled maps coin denom to a send_enabled status (whether a denom is
        sendable).
    cosmos.base.v1beta1.DecCoin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        DecCoin defines a token with a denomination and a decimal amount.

        NOTE: The amount field is an Dec which implements the custom method
        signatures required by gogoproto.
    cosmos.distribution.v1beta1.DelegationDelegatorReward:
      type: object
      properties:
        validator_address:
          type: string
        reward:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        DelegationDelegatorReward represents the properties
        of a delegator's delegation reward.
    cosmos.distribution.v1beta1.Params:
      type: object
      properties:
        community_tax:
          type: string
        base_proposer_reward:
          type: string
        bonus_proposer_reward:
          type: string
        withdraw_addr_enabled:
          type: boolean
      description: Params defines the set of params for the distribution module.
    cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
      type: object
      properties:
        pool:
          type: array
          description: pool defines community pool's coins.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        QueryCommunityPoolResponse is the response type for the Query/CommunityPool
        RPC method.
    cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          description: rewards defines the rewards accrued by a delegation.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        QueryDelegationRewardsResponse is the response type for the
        Query/DelegationRewards RPC method.
    cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          description: rewards defines all the rewards accrued by a delegator.
          items:
            type: object
            properties:
              validator_address:
                type: string
              reward:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    DecCoin defines a token with a denomination and a decimal amount.

                    NOTE: The amount field is an Dec which implements the custom method
                    signatures required by gogoproto.
            description: |-
              DelegationDelegatorReward represents the properties
              of a delegator's delegation reward.
        total:
          type: array
          description: total defines the sum of all the rewards.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        QueryDelegationTotalRewardsResponse is the response type for the
        Query/DelegationTotalRewards RPC method.
    cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          description: validators defines the validators a delegator is delegating
            for.
          items:
            type: string
      description: |-
        QueryDelegatorValidatorsResponse is the response type for the
        Query/DelegatorValidators RPC method.
    cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
      type: object
      properties:
        withdraw_address:
          type: string
          description: withdraw_address defines the delegator address to query for.
      description: |-
        QueryDelegatorWithdrawAddressResponse is the response type for the
        Query/DelegatorWithdrawAddress RPC method.
    cosmos.distribution.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            community_tax:
              type: string
            base_proposer_reward:
              type: string
            bonus_proposer_reward:
              type: string
            withdraw_addr_enabled:
              type: boolean
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
      title: |-
        QueryValidatorCommissionResponse is the response type for the
        Query/ValidatorCommission RPC method
      type: object
      properties:
        commission:
          type: object
          properties:
            commission:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  DecCoin defines a token with a denomination and a decimal amount.

                  NOTE: The amount field is an Dec which implements the custom method
                  signatures required by gogoproto.
          description: commission defines the commision the validator received.
    cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
      type: object
      properties:
        rewards:
          type: object
          properties:
            rewards:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  DecCoin defines a token with a denomination and a decimal amount.

                  NOTE: The amount field is an Dec which implements the custom method
                  signatures required by gogoproto.
          description: |-
            ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
            for a validator inexpensive to track, allows simple sanity checks.
      description: |-
        QueryValidatorOutstandingRewardsResponse is the response type for the
        Query/ValidatorOutstandingRewards RPC method.
    cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
      type: object
      properties:
        slashes:
          type: array
          description: slashes defines the slashes the validator received.
          items:
            type: object
            properties:
              validator_period:
                type: string
                format: uint64
              fraction:
                type: string
            description: |-
              ValidatorSlashEvent represents a validator slash event.
              Height is implicit within the store key.
              This is needed to calculate appropriate amount of staking tokens
              for delegations which are withdrawn after a slash has occurred.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryValidatorSlashesResponse is the response type for the
        Query/ValidatorSlashes RPC method.
    cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
      type: object
      properties:
        commission:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        ValidatorAccumulatedCommission represents accumulated commission
        for a validator kept as a running counter, can be withdrawn at any time.
    cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
      type: object
      properties:
        rewards:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              DecCoin defines a token with a denomination and a decimal amount.

              NOTE: The amount field is an Dec which implements the custom method
              signatures required by gogoproto.
      description: |-
        ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
        for a validator inexpensive to track, allows simple sanity checks.
    cosmos.distribution.v1beta1.ValidatorSlashEvent:
      type: object
      properties:
        validator_period:
          type: string
          format: uint64
        fraction:
          type: string
      description: |-
        ValidatorSlashEvent represents a validator slash event.
        Height is implicit within the store key.
        This is needed to calculate appropriate amount of staking tokens
        for delegations which are withdrawn after a slash has occurred.
    cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
      type: object
      properties:
        evidence:
          type: array
          description: evidence returns all evidences.
          items:
            type: object
            properties:
              type_url:
                type: string
                description: |-
                  A URL/resource name that uniquely identifies the type of the serialized
                  protocol buffer message. This string must contain at least
                  one "/" character. The last segment of the URL's path must represent
                  the fully qualified name of the type (as in
                  `path/google.protobuf.Duration`). The name should be in a canonical form
                  (e.g., leading "." is not accepted).

                  In practice, teams usually precompile into the binary all types that they
                  expect it to use in the context of Any. However, for URLs which use the
                  scheme `http`, `https`, or no scheme, one can optionally set up a type
                  server that maps type URLs to message definitions as follows:

                  * If no scheme is provided, `https` is assumed.
                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official
                  protobuf release, and it is not used for type URLs beginning with
                  type.googleapis.com.

                  Schemes other than `http`, `https` (or the empty scheme) might be
                  used with implementation specific semantics.
              value:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
            description: |-
              `Any` contains an arbitrary serialized protocol buffer message along with a
              URL that describes the type of the serialized message.

              Protobuf library provides support to pack/unpack Any values in the form
              of utility functions or additional generated methods of the Any type.

              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use
              'type.googleapis.com/full.type.name' as the type URL and the unpack
              methods only use the fully qualified type name after the last '/'
              in the type URL, for example "foo.bar.com/x/y.z" will yield type
              name "y.z".


              JSON
              ====
              The JSON representation of an `Any` value uses the regular
              representation of the deserialized, embedded message, with an
              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON
              representation, that representation will be embedded adding a field
              `value` which holds the custom JSON in addition to the `@type`
              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
        method.
    cosmos.evidence.v1beta1.QueryEvidenceResponse:
      type: object
      properties:
        evidence:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: evidence returns the requested evidence.
      description: QueryEvidenceResponse is the response type for the Query/Evidence
        RPC method.
    cosmos.gov.v1beta1.Deposit:
      type: object
      properties:
        proposal_id:
          type: string
          format: uint64
        depositor:
          type: string
        amount:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
      description: |-
        Deposit defines an amount deposited by an account address to an active
        proposal.
    cosmos.gov.v1beta1.DepositParams:
      type: object
      properties:
        min_deposit:
          type: array
          description: Minimum deposit for a proposal to enter voting period.
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        max_deposit_period:
          type: string
          description: |-
            Maximum period for Atom holders to deposit on a proposal. Initial value: 2
             months.
      description: DepositParams defines the params for deposits on governance proposals.
    cosmos.gov.v1beta1.Proposal:
      type: object
      properties:
        proposal_id:
          type: string
          format: uint64
        content:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        status:
          type: string
          description: |-
            ProposalStatus enumerates the valid statuses of a proposal.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          default: PROPOSAL_STATUS_UNSPECIFIED
          enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        final_tally_result:
          type: object
          properties:
            "yes":
              type: string
            abstain:
              type: string
            "no":
              type: string
            no_with_veto:
              type: string
          description: TallyResult defines a standard tally for a governance proposal.
        submit_time:
          type: string
          format: date-time
        deposit_end_time:
          type: string
          format: date-time
        total_deposit:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        voting_start_time:
          type: string
          format: date-time
        voting_end_time:
          type: string
          format: date-time
      description: Proposal defines the core field members of a governance proposal.
    cosmos.gov.v1beta1.ProposalStatus:
      type: string
      description: |-
        ProposalStatus enumerates the valid statuses of a proposal.

         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
        period.
         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
        period.
         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
        passed.
         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
        been rejected.
         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
        failed.
      default: PROPOSAL_STATUS_UNSPECIFIED
      enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    cosmos.gov.v1beta1.QueryDepositResponse:
      type: object
      properties:
        deposit:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            depositor:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
          description: deposit defines the requested deposit.
      description: QueryDepositResponse is the response type for the Query/Deposit
        RPC method.
    cosmos.gov.v1beta1.QueryDepositsResponse:
      type: object
      properties:
        deposits:
          type: array
          items:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
              depositor:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
            description: |-
              Deposit defines an amount deposited by an account address to an active
              proposal.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: QueryDepositsResponse is the response type for the Query/Deposits
        RPC method.
    cosmos.gov.v1beta1.QueryParamsResponse:
      type: object
      properties:
        voting_params:
          type: object
          properties:
            voting_period:
              type: string
              description: Length of the voting period.
          description: voting_params defines the parameters related to voting.
        deposit_params:
          type: object
          properties:
            min_deposit:
              type: array
              description: Minimum deposit for a proposal to enter voting period.
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            max_deposit_period:
              type: string
              description: |-
                Maximum period for Atom holders to deposit on a proposal. Initial value: 2
                 months.
          description: deposit_params defines the parameters related to deposit.
        tally_params:
          type: object
          properties:
            quorum:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                Minimum percentage of total stake needed to vote for a result to be
                 considered valid.
              format: byte
            threshold:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: 'Minimum proportion of Yes votes for proposal to pass.
                Default value: 0.5.'
              format: byte
            veto_threshold:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                Minimum value of Veto votes to Total votes ratio for proposal to be
                 vetoed. Default value: 1/3.
              format: byte
          description: tally_params defines the parameters related to tally.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    cosmos.gov.v1beta1.QueryProposalResponse:
      type: object
      properties:
        proposal:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            content:
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            status:
              type: string
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
              default: PROPOSAL_STATUS_UNSPECIFIED
              enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            final_tally_result:
              type: object
              properties:
                "yes":
                  type: string
                abstain:
                  type: string
                "no":
                  type: string
                no_with_veto:
                  type: string
              description: TallyResult defines a standard tally for a governance proposal.
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
          description: Proposal defines the core field members of a governance proposal.
      description: QueryProposalResponse is the response type for the Query/Proposal
        RPC method.
    cosmos.gov.v1beta1.QueryProposalsResponse:
      type: object
      properties:
        proposals:
          type: array
          items:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
              content:
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: |-
                  `Any` contains an arbitrary serialized protocol buffer message along with a
                  URL that describes the type of the serialized message.

                  Protobuf library provides support to pack/unpack Any values in the form
                  of utility functions or additional generated methods of the Any type.

                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use
                  'type.googleapis.com/full.type.name' as the type URL and the unpack
                  methods only use the fully qualified type name after the last '/'
                  in the type URL, for example "foo.bar.com/x/y.z" will yield type
                  name "y.z".


                  JSON
                  ====
                  The JSON representation of an `Any` value uses the regular
                  representation of the deserialized, embedded message, with an
                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON
                  representation, that representation will be embedded adding a field
                  `value` which holds the custom JSON in addition to the `@type`
                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              status:
                type: string
                description: |-
                  ProposalStatus enumerates the valid statuses of a proposal.

                   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                   - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                  period.
                   - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                  period.
                   - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                  passed.
                   - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                  been rejected.
                   - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                  failed.
                default: PROPOSAL_STATUS_UNSPECIFIED
                enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              final_tally_result:
                type: object
                properties:
                  "yes":
                    type: string
                  abstain:
                    type: string
                  "no":
                    type: string
                  no_with_veto:
                    type: string
                description: TallyResult defines a standard tally for a governance
                  proposal.
              submit_time:
                type: string
                format: date-time
              deposit_end_time:
                type: string
                format: date-time
              total_deposit:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: |-
                    Coin defines a token with a denomination and an amount.

                    NOTE: The amount field is an Int which implements the custom method
                    signatures required by gogoproto.
              voting_start_time:
                type: string
                format: date-time
              voting_end_time:
                type: string
                format: date-time
            description: Proposal defines the core field members of a governance proposal.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryProposalsResponse is the response type for the Query/Proposals RPC
        method.
    cosmos.gov.v1beta1.QueryTallyResultResponse:
      type: object
      properties:
        tally:
          type: object
          properties:
            "yes":
              type: string
            abstain:
              type: string
            "no":
              type: string
            no_with_veto:
              type: string
          description: tally defines the requested tally.
      description: QueryTallyResultResponse is the response type for the Query/Tally
        RPC method.
    cosmos.gov.v1beta1.QueryVoteResponse:
      type: object
      properties:
        vote:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            voter:
              type: string
            option:
              type: string
              description: |-
                VoteOption enumerates the valid vote options for a given governance proposal.

                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
          description: vote defined the queried vote.
      description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    cosmos.gov.v1beta1.QueryVotesResponse:
      type: object
      properties:
        votes:
          type: array
          description: votes defined the queried votes.
          items:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
              voter:
                type: string
              option:
                type: string
                description: |-
                  VoteOption enumerates the valid vote options for a given governance proposal.

                   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                   - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                   - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                   - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                   - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                default: VOTE_OPTION_UNSPECIFIED
                enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
            description: |-
              Vote defines a vote on a governance proposal.
              A Vote consists of a proposal ID, the voter, and the vote option.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: QueryVotesResponse is the response type for the Query/Votes RPC
        method.
    cosmos.gov.v1beta1.TallyParams:
      type: object
      properties:
        quorum:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            Minimum percentage of total stake needed to vote for a result to be
             considered valid.
          format: byte
        threshold:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: 'Minimum proportion of Yes votes for proposal to pass. Default
            value: 0.5.'
          format: byte
        veto_threshold:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            Minimum value of Veto votes to Total votes ratio for proposal to be
             vetoed. Default value: 1/3.
          format: byte
      description: TallyParams defines the params for tallying votes on governance
        proposals.
    cosmos.gov.v1beta1.TallyResult:
      type: object
      properties:
        "yes":
          type: string
        abstain:
          type: string
        "no":
          type: string
        no_with_veto:
          type: string
      description: TallyResult defines a standard tally for a governance proposal.
    cosmos.gov.v1beta1.Vote:
      type: object
      properties:
        proposal_id:
          type: string
          format: uint64
        voter:
          type: string
        option:
          type: string
          description: |-
            VoteOption enumerates the valid vote options for a given governance proposal.

             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
          default: VOTE_OPTION_UNSPECIFIED
          enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
      description: |-
        Vote defines a vote on a governance proposal.
        A Vote consists of a proposal ID, the voter, and the vote option.
    cosmos.gov.v1beta1.VoteOption:
      type: string
      description: |-
        VoteOption enumerates the valid vote options for a given governance proposal.

         - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
         - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
         - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
         - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
         - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
      default: VOTE_OPTION_UNSPECIFIED
      enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    cosmos.gov.v1beta1.VotingParams:
      type: object
      properties:
        voting_period:
          type: string
          description: Length of the voting period.
      description: VotingParams defines the params for voting on governance proposals.
    cosmos.params.v1beta1.ParamChange:
      type: object
      properties:
        subspace:
          type: string
        key:
          type: string
        value:
          type: string
      description: |-
        ParamChange defines an individual parameter change, for use in
        ParameterChangeProposal.
    cosmos.params.v1beta1.QueryParamsResponse:
      type: object
      properties:
        param:
          type: object
          properties:
            subspace:
              type: string
            key:
              type: string
            value:
              type: string
          description: param defines the queried parameter.
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    cosmos.slashing.v1beta1.Params:
      type: object
      properties:
        signed_blocks_window:
          type: string
          format: int64
        min_signed_per_window:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        downtime_jail_duration:
          type: string
        slash_fraction_double_sign:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        slash_fraction_downtime:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
      description: Params represents the parameters used for by the slashing module.
    cosmos.slashing.v1beta1.QueryParamsResponse:
      title: QueryParamsResponse is the response type for the Query/Params RPC method
      type: object
      properties:
        params:
          type: object
          properties:
            signed_blocks_window:
              type: string
              format: int64
            min_signed_per_window:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            downtime_jail_duration:
              type: string
            slash_fraction_double_sign:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            slash_fraction_downtime:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
          description: Params represents the parameters used for by the slashing module.
    cosmos.slashing.v1beta1.QuerySigningInfoResponse:
      title: |-
        QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
        method
      type: object
      properties:
        val_signing_info:
          title: val_signing_info is the signing info of requested val cons address
          type: object
          properties:
            address:
              type: string
            start_height:
              title: height at which validator was first a candidate OR was unjailed
              type: string
              format: int64
            index_offset:
              title: index offset into signed block bit array
              type: string
              format: int64
            jailed_until:
              title: timestamp validator cannot be unjailed until
              type: string
              format: date-time
            tombstoned:
              title: |-
                whether or not a validator has been tombstoned (killed out of validator
                set)
              type: boolean
            missed_blocks_counter:
              title: missed blocks counter (to avoid scanning the array every time)
              type: string
              format: int64
          description: |-
            ValidatorSigningInfo defines a validator's signing info for monitoring their
            liveness activity.
    cosmos.slashing.v1beta1.QuerySigningInfosResponse:
      title: |-
        QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
        method
      type: object
      properties:
        info:
          title: info is the signing info of all validators
          type: array
          items:
            type: object
            properties:
              address:
                type: string
              start_height:
                title: height at which validator was first a candidate OR was unjailed
                type: string
                format: int64
              index_offset:
                title: index offset into signed block bit array
                type: string
                format: int64
              jailed_until:
                title: timestamp validator cannot be unjailed until
                type: string
                format: date-time
              tombstoned:
                title: |-
                  whether or not a validator has been tombstoned (killed out of validator
                  set)
                type: boolean
              missed_blocks_counter:
                title: missed blocks counter (to avoid scanning the array every time)
                type: string
                format: int64
            description: |-
              ValidatorSigningInfo defines a validator's signing info for monitoring their
              liveness activity.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
    cosmos.slashing.v1beta1.ValidatorSigningInfo:
      type: object
      properties:
        address:
          type: string
        start_height:
          title: height at which validator was first a candidate OR was unjailed
          type: string
          format: int64
        index_offset:
          title: index offset into signed block bit array
          type: string
          format: int64
        jailed_until:
          title: timestamp validator cannot be unjailed until
          type: string
          format: date-time
        tombstoned:
          title: |-
            whether or not a validator has been tombstoned (killed out of validator
            set)
          type: boolean
        missed_blocks_counter:
          title: missed blocks counter (to avoid scanning the array every time)
          type: string
          format: int64
      description: |-
        ValidatorSigningInfo defines a validator's signing info for monitoring their
        liveness activity.
    cosmos.staking.v1beta1.BondStatus:
      type: string
      description: |-
        BondStatus is the status of a validator.

         - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
         - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
         - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
         - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
      default: BOND_STATUS_UNSPECIFIED
      enum:
      - BOND_STATUS_UNSPECIFIED
      - BOND_STATUS_UNBONDED
      - BOND_STATUS_UNBONDING
      - BOND_STATUS_BONDED
    cosmos.staking.v1beta1.Commission:
      type: object
      properties:
        commission_rates:
          type: object
          properties:
            rate:
              type: string
              description: rate is the commission rate charged to delegators, as a
                fraction.
            max_rate:
              type: string
              description: max_rate defines the maximum commission rate which validator
                can ever charge, as a fraction.
            max_change_rate:
              type: string
              description: max_change_rate defines the maximum daily increase of the
                validator commission, as a fraction.
          description: commission_rates defines the initial commission rates to be
            used for creating a validator.
        update_time:
          type: string
          description: update_time is the last time the commission rate was changed.
          format: date-time
      description: Commission defines commission parameters for a given validator.
    cosmos.staking.v1beta1.CommissionRates:
      type: object
      properties:
        rate:
          type: string
          description: rate is the commission rate charged to delegators, as a fraction.
        max_rate:
          type: string
          description: max_rate defines the maximum commission rate which validator
            can ever charge, as a fraction.
        max_change_rate:
          type: string
          description: max_change_rate defines the maximum daily increase of the validator
            commission, as a fraction.
      description: |-
        CommissionRates defines the initial commission rates to be used for creating
        a validator.
    cosmos.staking.v1beta1.Delegation:
      type: object
      properties:
        delegator_address:
          type: string
          description: delegator_address is the bech32-encoded address of the delegator.
        validator_address:
          type: string
          description: validator_address is the bech32-encoded address of the validator.
        shares:
          type: string
          description: shares define the delegation shares received.
      description: |-
        Delegation represents the bond with tokens held by an account. It is
        owned by one delegator, and is associated with the voting power of one
        validator.
    cosmos.staking.v1beta1.DelegationResponse:
      type: object
      properties:
        delegation:
          type: object
          properties:
            delegator_address:
              type: string
              description: delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: validator_address is the bech32-encoded address of the
                validator.
            shares:
              type: string
              description: shares define the delegation shares received.
          description: |-
            Delegation represents the bond with tokens held by an account. It is
            owned by one delegator, and is associated with the voting power of one
            validator.
        balance:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      description: |-
        DelegationResponse is equivalent to Delegation except that it contains a
        balance in addition to shares which is more suitable for client responses.
    cosmos.staking.v1beta1.Description:
      type: object
      properties:
        moniker:
          type: string
          description: moniker defines a human-readable name for the validator.
        identity:
          type: string
          description: identity defines an optional identity signature (ex. UPort
            or Keybase).
        website:
          type: string
          description: website defines an optional website link.
        security_contact:
          type: string
          description: security_contact defines an optional email for security contact.
        details:
          type: string
          description: details define other optional details.
      description: Description defines a validator description.
    cosmos.staking.v1beta1.HistoricalInfo:
      type: object
      properties:
        header:
          type: object
          properties:
            version:
              title: basic block info
              type: object
              properties:
                block:
                  type: string
                  format: uint64
                app:
                  type: string
                  format: uint64
              description: |-
                Consensus captures the consensus rules for processing a block in the blockchain,
                including all blockchain data structures and the rules of the application's
                state transition machine.
            chain_id:
              type: string
            height:
              type: string
              format: int64
            time:
              type: string
              format: date-time
            last_block_id:
              title: prev block info
              type: object
              properties:
                hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                part_set_header:
                  title: PartsetHeader
                  type: object
                  properties:
                    total:
                      type: integer
                      format: int64
                    hash:
                      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                      type: string
                      format: byte
            last_commit_hash:
              title: hashes of block data
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            data_hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            validators_hash:
              title: hashes from the app output from the prev block
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            next_validators_hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            consensus_hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            app_hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            last_results_hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            evidence_hash:
              title: consensus info
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            proposer_address:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
          description: Header defines the structure of a Tendermint block header.
        valset:
          type: array
          items:
            type: object
            properties:
              operator_address:
                type: string
                description: operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
              consensus_pubkey:
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: consensus_pubkey is the consensus public key of the validator,
                  as a Protobuf Any.
              jailed:
                type: boolean
                description: jailed defined whether the validator has been jailed
                  from bonded status or not.
              status:
                type: string
                description: status is the validator status (bonded/unbonding/unbonded).
                default: BOND_STATUS_UNSPECIFIED
                enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              tokens:
                type: string
                description: tokens define the delegated tokens (incl. self-delegation).
              delegator_shares:
                type: string
                description: delegator_shares defines total shares issued to a validator's
                  delegators.
              description:
                type: object
                properties:
                  moniker:
                    type: string
                    description: moniker defines a human-readable name for the validator.
                  identity:
                    type: string
                    description: identity defines an optional identity signature (ex.
                      UPort or Keybase).
                  website:
                    type: string
                    description: website defines an optional website link.
                  security_contact:
                    type: string
                    description: security_contact defines an optional email for security
                      contact.
                  details:
                    type: string
                    description: details define other optional details.
                description: description defines the description terms for the validator.
              unbonding_height:
                type: string
                description: unbonding_height defines, if unbonding, the height at
                  which this validator has begun unbonding.
                format: int64
              unbonding_time:
                type: string
                description: unbonding_time defines, if unbonding, the min time for
                  the validator to complete unbonding.
                format: date-time
              commission:
                type: object
                properties:
                  commission_rates:
                    type: object
                    properties:
                      rate:
                        type: string
                        description: rate is the commission rate charged to delegators,
                          as a fraction.
                      max_rate:
                        type: string
                        description: max_rate defines the maximum commission rate
                          which validator can ever charge, as a fraction.
                      max_change_rate:
                        type: string
                        description: max_change_rate defines the maximum daily increase
                          of the validator commission, as a fraction.
                    description: commission_rates defines the initial commission rates
                      to be used for creating a validator.
                  update_time:
                    type: string
                    description: update_time is the last time the commission rate
                      was changed.
                    format: date-time
                description: commission defines the commission parameters.
              min_self_delegation:
                type: string
                description: min_self_delegation is the validator's self declared
                  minimum self delegation.
            description: |-
              Validator defines a validator, together with the total amount of the
              Validator's bond shares and their exchange rate to coins. Slashing results in
              a decrease in the exchange rate, allowing correct calculation of future
              undelegations without iterating over delegators. When coins are delegated to
              this validator, the validator is credited with a delegation whose number of
              bond shares is based on the amount of coins delegated divided by the current
              exchange rate. Voting power can be calculated as total bonded shares
              multiplied by exchange rate.
      description: |-
        HistoricalInfo contains header and validator information for a given block.
        It is stored as part of staking module's state, which persists the `n` most
        recent HistoricalInfo
        (`n` is set by the staking module's `historical_entries` parameter).
    cosmos.staking.v1beta1.Params:
      type: object
      properties:
        unbonding_time:
          type: string
          description: unbonding_time is the time duration of unbonding.
        max_validators:
          type: integer
          description: max_validators is the maximum number of validators.
          format: int64
        max_entries:
          type: integer
          description: max_entries is the max entries for either unbonding delegation
            or redelegation (per pair/trio).
          format: int64
        historical_entries:
          type: integer
          description: historical_entries is the number of historical entries to persist.
          format: int64
        bond_denom:
          type: string
          description: bond_denom defines the bondable coin denomination.
        power_reduction:
          title: power_reduction is the amount of staking tokens required for 1 unit
            of consensus-engine power
          type: string
        min_commission_rate:
          title: min_commission_rate is the chain-wide minimum commission rate that
            a validator can charge their delegators
          type: string
      description: Params defines the parameters for the staking module.
    cosmos.staking.v1beta1.Pool:
      type: object
      properties:
        not_bonded_tokens:
          type: string
        bonded_tokens:
          type: string
      description: |-
        Pool is used for tracking bonded and not-bonded token supply of the bond
        denomination.
    cosmos.staking.v1beta1.QueryDelegationResponse:
      type: object
      properties:
        delegation_response:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: delegator_address is the bech32-encoded address of
                    the delegator.
                validator_address:
                  type: string
                  description: validator_address is the bech32-encoded address of
                    the validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: |-
                Delegation represents the bond with tokens held by an account. It is
                owned by one delegator, and is associated with the voting power of one
                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: |-
                Coin defines a token with a denomination and an amount.

                NOTE: The amount field is an Int which implements the custom method
                signatures required by gogoproto.
          description: delegation_responses defines the delegation info of a delegation.
      description: QueryDelegationResponse is response type for the Query/Delegation
        RPC method.
    cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
      type: object
      properties:
        delegation_responses:
          type: array
          description: delegation_responses defines all the delegations' info of a
            delegator.
          items:
            type: object
            properties:
              delegation:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: delegator_address is the bech32-encoded address of
                      the delegator.
                  validator_address:
                    type: string
                    description: validator_address is the bech32-encoded address of
                      the validator.
                  shares:
                    type: string
                    description: shares define the delegation shares received.
                description: |-
                  Delegation represents the bond with tokens held by an account. It is
                  owned by one delegator, and is associated with the voting power of one
                  validator.
              balance:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            description: |-
              DelegationResponse is equivalent to Delegation except that it contains a
              balance in addition to shares which is more suitable for client responses.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryDelegatorDelegationsResponse is response type for the
        Query/DelegatorDelegations RPC method.
    cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
      type: object
      properties:
        unbonding_responses:
          type: array
          items:
            type: object
            properties:
              delegator_address:
                type: string
                description: delegator_address is the bech32-encoded address of the
                  delegator.
              validator_address:
                type: string
                description: validator_address is the bech32-encoded address of the
                  validator.
              entries:
                type: array
                description: entries are the unbonding delegation entries.
                items:
                  type: object
                  properties:
                    creation_height:
                      type: string
                      description: creation_height is the height which the unbonding
                        took place.
                      format: int64
                    completion_time:
                      type: string
                      description: completion_time is the unix time for unbonding
                        completion.
                      format: date-time
                    initial_balance:
                      type: string
                      description: initial_balance defines the tokens initially scheduled
                        to receive at completion.
                    balance:
                      type: string
                      description: balance defines the tokens to receive at completion.
                  description: UnbondingDelegationEntry defines an unbonding object
                    with relevant metadata.
            description: |-
              UnbondingDelegation stores all of a single delegator's unbonding bonds
              for a single validator in an time-ordered list.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryUnbondingDelegatorDelegationsResponse is response type for the
        Query/UnbondingDelegatorDelegations RPC method.
    cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
      type: object
      properties:
        validator:
          type: object
          properties:
            operator_address:
              type: string
              description: operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: consensus_pubkey is the consensus public key of the validator,
                as a Protobuf Any.
            jailed:
              type: boolean
              description: jailed defined whether the validator has been jailed from
                bonded status or not.
            status:
              type: string
              description: status is the validator status (bonded/unbonding/unbonded).
              default: BOND_STATUS_UNSPECIFIED
              enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: identity defines an optional identity signature (ex.
                    UPort or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
              description: description defines the description terms for the validator.
            unbonding_height:
              type: string
              description: unbonding_height defines, if unbonding, the height at which
                this validator has begun unbonding.
              format: int64
            unbonding_time:
              type: string
              description: unbonding_time defines, if unbonding, the min time for
                the validator to complete unbonding.
              format: date-time
            commission:
              type: object
              properties:
                commission_rates:
                  type: object
                  properties:
                    rate:
                      type: string
                      description: rate is the commission rate charged to delegators,
                        as a fraction.
                    max_rate:
                      type: string
                      description: max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: max_change_rate defines the maximum daily increase
                        of the validator commission, as a fraction.
                  description: commission_rates defines the initial commission rates
                    to be used for creating a validator.
                update_time:
                  type: string
                  description: update_time is the last time the commission rate was
                    changed.
                  format: date-time
              description: commission defines the commission parameters.
            min_self_delegation:
              type: string
              description: min_self_delegation is the validator's self declared minimum
                self delegation.
          description: validator defines the the validator info.
      description: |-
        QueryDelegatorValidatorResponse response type for the
        Query/DelegatorValidator RPC method.
    cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          description: validators defines the the validators' info of a delegator.
          items:
            type: object
            properties:
              operator_address:
                type: string
                description: operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
              consensus_pubkey:
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: consensus_pubkey is the consensus public key of the validator,
                  as a Protobuf Any.
              jailed:
                type: boolean
                description: jailed defined whether the validator has been jailed
                  from bonded status or not.
              status:
                type: string
                description: status is the validator status (bonded/unbonding/unbonded).
                default: BOND_STATUS_UNSPECIFIED
                enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              tokens:
                type: string
                description: tokens define the delegated tokens (incl. self-delegation).
              delegator_shares:
                type: string
                description: delegator_shares defines total shares issued to a validator's
                  delegators.
              description:
                type: object
                properties:
                  moniker:
                    type: string
                    description: moniker defines a human-readable name for the validator.
                  identity:
                    type: string
                    description: identity defines an optional identity signature (ex.
                      UPort or Keybase).
                  website:
                    type: string
                    description: website defines an optional website link.
                  security_contact:
                    type: string
                    description: security_contact defines an optional email for security
                      contact.
                  details:
                    type: string
                    description: details define other optional details.
                description: description defines the description terms for the validator.
              unbonding_height:
                type: string
                description: unbonding_height defines, if unbonding, the height at
                  which this validator has begun unbonding.
                format: int64
              unbonding_time:
                type: string
                description: unbonding_time defines, if unbonding, the min time for
                  the validator to complete unbonding.
                format: date-time
              commission:
                type: object
                properties:
                  commission_rates:
                    type: object
                    properties:
                      rate:
                        type: string
                        description: rate is the commission rate charged to delegators,
                          as a fraction.
                      max_rate:
                        type: string
                        description: max_rate defines the maximum commission rate
                          which validator can ever charge, as a fraction.
                      max_change_rate:
                        type: string
                        description: max_change_rate defines the maximum daily increase
                          of the validator commission, as a fraction.
                    description: commission_rates defines the initial commission rates
                      to be used for creating a validator.
                  update_time:
                    type: string
                    description: update_time is the last time the commission rate
                      was changed.
                    format: date-time
                description: commission defines the commission parameters.
              min_self_delegation:
                type: string
                description: min_self_delegation is the validator's self declared
                  minimum self delegation.
            description: |-
              Validator defines a validator, together with the total amount of the
              Validator's bond shares and their exchange rate to coins. Slashing results in
              a decrease in the exchange rate, allowing correct calculation of future
              undelegations without iterating over delegators. When coins are delegated to
              this validator, the validator is credited with a delegation whose number of
              bond shares is based on the amount of coins delegated divided by the current
              exchange rate. Voting power can be calculated as total bonded shares
              multiplied by exchange rate.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryDelegatorValidatorsResponse is response type for the
        Query/DelegatorValidators RPC method.
    cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
      type: object
      properties:
        hist:
          type: object
          properties:
            header:
              type: object
              properties:
                version:
                  title: basic block info
                  type: object
                  properties:
                    block:
                      type: string
                      format: uint64
                    app:
                      type: string
                      format: uint64
                  description: |-
                    Consensus captures the consensus rules for processing a block in the blockchain,
                    including all blockchain data structures and the rules of the application's
                    state transition machine.
                chain_id:
                  type: string
                height:
                  type: string
                  format: int64
                time:
                  type: string
                  format: date-time
                last_block_id:
                  title: prev block info
                  type: object
                  properties:
                    hash:
                      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                      type: string
                      format: byte
                    part_set_header:
                      title: PartsetHeader
                      type: object
                      properties:
                        total:
                          type: integer
                          format: int64
                        hash:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
                last_commit_hash:
                  title: hashes of block data
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                data_hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                validators_hash:
                  title: hashes from the app output from the prev block
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                next_validators_hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                consensus_hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                app_hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                last_results_hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                evidence_hash:
                  title: consensus info
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                proposer_address:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
              description: Header defines the structure of a Tendermint block header.
            valset:
              type: array
              items:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: consensus_pubkey is the consensus public key of the
                      validator, as a Protobuf Any.
                  jailed:
                    type: boolean
                    description: jailed defined whether the validator has been jailed
                      from bonded status or not.
                  status:
                    type: string
                    description: status is the validator status (bonded/unbonding/unbonded).
                    default: BOND_STATUS_UNSPECIFIED
                    enum:
                    - BOND_STATUS_UNSPECIFIED
                    - BOND_STATUS_UNBONDED
                    - BOND_STATUS_UNBONDING
                    - BOND_STATUS_BONDED
                  tokens:
                    type: string
                    description: tokens define the delegated tokens (incl. self-delegation).
                  delegator_shares:
                    type: string
                    description: delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: identity defines an optional identity signature
                          (ex. UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                    description: description defines the description terms for the
                      validator.
                  unbonding_height:
                    type: string
                    description: unbonding_height defines, if unbonding, the height
                      at which this validator has begun unbonding.
                    format: int64
                  unbonding_time:
                    type: string
                    description: unbonding_time defines, if unbonding, the min time
                      for the validator to complete unbonding.
                    format: date-time
                  commission:
                    type: object
                    properties:
                      commission_rates:
                        type: object
                        properties:
                          rate:
                            type: string
                            description: rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: max_rate defines the maximum commission rate
                              which validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: max_change_rate defines the maximum daily
                              increase of the validator commission, as a fraction.
                        description: commission_rates defines the initial commission
                          rates to be used for creating a validator.
                      update_time:
                        type: string
                        description: update_time is the last time the commission rate
                          was changed.
                        format: date-time
                    description: commission defines the commission parameters.
                  min_self_delegation:
                    type: string
                    description: min_self_delegation is the validator's self declared
                      minimum self delegation.
                description: |-
                  Validator defines a validator, together with the total amount of the
                  Validator's bond shares and their exchange rate to coins. Slashing results in
                  a decrease in the exchange rate, allowing correct calculation of future
                  undelegations without iterating over delegators. When coins are delegated to
                  this validator, the validator is credited with a delegation whose number of
                  bond shares is based on the amount of coins delegated divided by the current
                  exchange rate. Voting power can be calculated as total bonded shares
                  multiplied by exchange rate.
          description: hist defines the historical info at the given height.
      description: |-
        QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
        method.
    cosmos.staking.v1beta1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            unbonding_time:
              type: string
              description: unbonding_time is the time duration of unbonding.
            max_validators:
              type: integer
              description: max_validators is the maximum number of validators.
              format: int64
            max_entries:
              type: integer
              description: max_entries is the max entries for either unbonding delegation
                or redelegation (per pair/trio).
              format: int64
            historical_entries:
              type: integer
              description: historical_entries is the number of historical entries
                to persist.
              format: int64
            bond_denom:
              type: string
              description: bond_denom defines the bondable coin denomination.
            power_reduction:
              title: power_reduction is the amount of staking tokens required for
                1 unit of consensus-engine power
              type: string
            min_commission_rate:
              title: min_commission_rate is the chain-wide minimum commission rate
                that a validator can charge their delegators
              type: string
          description: params holds all the parameters of this module.
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    cosmos.staking.v1beta1.QueryPoolResponse:
      type: object
      properties:
        pool:
          type: object
          properties:
            not_bonded_tokens:
              type: string
            bonded_tokens:
              type: string
          description: pool defines the pool info.
      description: QueryPoolResponse is response type for the Query/Pool RPC method.
    cosmos.staking.v1beta1.QueryRedelegationsResponse:
      type: object
      properties:
        redelegation_responses:
          type: array
          items:
            type: object
            properties:
              redelegation:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: delegator_address is the bech32-encoded address of
                      the delegator.
                  validator_src_address:
                    type: string
                    description: validator_src_address is the validator redelegation
                      source operator address.
                  validator_dst_address:
                    type: string
                    description: validator_dst_address is the validator redelegation
                      destination operator address.
                  entries:
                    type: array
                    description: entries are the redelegation entries.
                    items:
                      type: object
                      properties:
                        creation_height:
                          type: string
                          description: creation_height  defines the height which the
                            redelegation took place.
                          format: int64
                        completion_time:
                          type: string
                          description: completion_time defines the unix time for redelegation
                            completion.
                          format: date-time
                        initial_balance:
                          type: string
                          description: initial_balance defines the initial balance
                            when redelegation started.
                        shares_dst:
                          type: string
                          description: shares_dst is the amount of destination-validator
                            shares created by redelegation.
                      description: RedelegationEntry defines a redelegation object
                        with relevant metadata.
                description: |-
                  Redelegation contains the list of a particular delegator's redelegating bonds
                  from a particular source validator to a particular destination validator.
              entries:
                type: array
                items:
                  type: object
                  properties:
                    redelegation_entry:
                      type: object
                      properties:
                        creation_height:
                          type: string
                          description: creation_height  defines the height which the
                            redelegation took place.
                          format: int64
                        completion_time:
                          type: string
                          description: completion_time defines the unix time for redelegation
                            completion.
                          format: date-time
                        initial_balance:
                          type: string
                          description: initial_balance defines the initial balance
                            when redelegation started.
                        shares_dst:
                          type: string
                          description: shares_dst is the amount of destination-validator
                            shares created by redelegation.
                      description: RedelegationEntry defines a redelegation object
                        with relevant metadata.
                    balance:
                      type: string
                  description: |-
                    RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
                    contains a balance in addition to shares which is more suitable for client
                    responses.
            description: |-
              RedelegationResponse is equivalent to a Redelegation except that its entries
              contain a balance in addition to shares which is more suitable for client
              responses.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryRedelegationsResponse is response type for the Query/Redelegations RPC
        method.
    cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
      type: object
      properties:
        unbond:
          type: object
          properties:
            delegator_address:
              type: string
              description: delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              description: entries are the unbonding delegation entries.
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    description: creation_height is the height which the unbonding
                      took place.
                    format: int64
                  completion_time:
                    type: string
                    description: completion_time is the unix time for unbonding completion.
                    format: date-time
                  initial_balance:
                    type: string
                    description: initial_balance defines the tokens initially scheduled
                      to receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: UnbondingDelegationEntry defines an unbonding object
                  with relevant metadata.
          description: unbond defines the unbonding information of a delegation.
      description: |-
        QueryDelegationResponse is response type for the Query/UnbondingDelegation
        RPC method.
    cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
      title: |-
        QueryValidatorDelegationsResponse is response type for the
        Query/ValidatorDelegations RPC method
      type: object
      properties:
        delegation_responses:
          type: array
          items:
            type: object
            properties:
              delegation:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: delegator_address is the bech32-encoded address of
                      the delegator.
                  validator_address:
                    type: string
                    description: validator_address is the bech32-encoded address of
                      the validator.
                  shares:
                    type: string
                    description: shares define the delegation shares received.
                description: |-
                  Delegation represents the bond with tokens held by an account. It is
                  owned by one delegator, and is associated with the voting power of one
                  validator.
              balance:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            description: |-
              DelegationResponse is equivalent to Delegation except that it contains a
              balance in addition to shares which is more suitable for client responses.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
    cosmos.staking.v1beta1.QueryValidatorResponse:
      title: QueryValidatorResponse is response type for the Query/Validator RPC method
      type: object
      properties:
        validator:
          type: object
          properties:
            operator_address:
              type: string
              description: operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: consensus_pubkey is the consensus public key of the validator,
                as a Protobuf Any.
            jailed:
              type: boolean
              description: jailed defined whether the validator has been jailed from
                bonded status or not.
            status:
              type: string
              description: status is the validator status (bonded/unbonding/unbonded).
              default: BOND_STATUS_UNSPECIFIED
              enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: identity defines an optional identity signature (ex.
                    UPort or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
              description: description defines the description terms for the validator.
            unbonding_height:
              type: string
              description: unbonding_height defines, if unbonding, the height at which
                this validator has begun unbonding.
              format: int64
            unbonding_time:
              type: string
              description: unbonding_time defines, if unbonding, the min time for
                the validator to complete unbonding.
              format: date-time
            commission:
              type: object
              properties:
                commission_rates:
                  type: object
                  properties:
                    rate:
                      type: string
                      description: rate is the commission rate charged to delegators,
                        as a fraction.
                    max_rate:
                      type: string
                      description: max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: max_change_rate defines the maximum daily increase
                        of the validator commission, as a fraction.
                  description: commission_rates defines the initial commission rates
                    to be used for creating a validator.
                update_time:
                  type: string
                  description: update_time is the last time the commission rate was
                    changed.
                  format: date-time
              description: commission defines the commission parameters.
            min_self_delegation:
              type: string
              description: min_self_delegation is the validator's self declared minimum
                self delegation.
          description: validator defines the the validator info.
    cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
      type: object
      properties:
        unbonding_responses:
          type: array
          items:
            type: object
            properties:
              delegator_address:
                type: string
                description: delegator_address is the bech32-encoded address of the
                  delegator.
              validator_address:
                type: string
                description: validator_address is the bech32-encoded address of the
                  validator.
              entries:
                type: array
                description: entries are the unbonding delegation entries.
                items:
                  type: object
                  properties:
                    creation_height:
                      type: string
                      description: creation_height is the height which the unbonding
                        took place.
                      format: int64
                    completion_time:
                      type: string
                      description: completion_time is the unix time for unbonding
                        completion.
                      format: date-time
                    initial_balance:
                      type: string
                      description: initial_balance defines the tokens initially scheduled
                        to receive at completion.
                    balance:
                      type: string
                      description: balance defines the tokens to receive at completion.
                  description: UnbondingDelegationEntry defines an unbonding object
                    with relevant metadata.
            description: |-
              UnbondingDelegation stores all of a single delegator's unbonding bonds
              for a single validator in an time-ordered list.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryValidatorUnbondingDelegationsResponse is response type for the
        Query/ValidatorUnbondingDelegations RPC method.
    cosmos.staking.v1beta1.QueryValidatorsResponse:
      title: QueryValidatorsResponse is response type for the Query/Validators RPC
        method
      type: object
      properties:
        validators:
          type: array
          description: validators contains all the queried validators.
          items:
            type: object
            properties:
              operator_address:
                type: string
                description: operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
              consensus_pubkey:
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: consensus_pubkey is the consensus public key of the validator,
                  as a Protobuf Any.
              jailed:
                type: boolean
                description: jailed defined whether the validator has been jailed
                  from bonded status or not.
              status:
                type: string
                description: status is the validator status (bonded/unbonding/unbonded).
                default: BOND_STATUS_UNSPECIFIED
                enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              tokens:
                type: string
                description: tokens define the delegated tokens (incl. self-delegation).
              delegator_shares:
                type: string
                description: delegator_shares defines total shares issued to a validator's
                  delegators.
              description:
                type: object
                properties:
                  moniker:
                    type: string
                    description: moniker defines a human-readable name for the validator.
                  identity:
                    type: string
                    description: identity defines an optional identity signature (ex.
                      UPort or Keybase).
                  website:
                    type: string
                    description: website defines an optional website link.
                  security_contact:
                    type: string
                    description: security_contact defines an optional email for security
                      contact.
                  details:
                    type: string
                    description: details define other optional details.
                description: description defines the description terms for the validator.
              unbonding_height:
                type: string
                description: unbonding_height defines, if unbonding, the height at
                  which this validator has begun unbonding.
                format: int64
              unbonding_time:
                type: string
                description: unbonding_time defines, if unbonding, the min time for
                  the validator to complete unbonding.
                format: date-time
              commission:
                type: object
                properties:
                  commission_rates:
                    type: object
                    properties:
                      rate:
                        type: string
                        description: rate is the commission rate charged to delegators,
                          as a fraction.
                      max_rate:
                        type: string
                        description: max_rate defines the maximum commission rate
                          which validator can ever charge, as a fraction.
                      max_change_rate:
                        type: string
                        description: max_change_rate defines the maximum daily increase
                          of the validator commission, as a fraction.
                    description: commission_rates defines the initial commission rates
                      to be used for creating a validator.
                  update_time:
                    type: string
                    description: update_time is the last time the commission rate
                      was changed.
                    format: date-time
                description: commission defines the commission parameters.
              min_self_delegation:
                type: string
                description: min_self_delegation is the validator's self declared
                  minimum self delegation.
            description: |-
              Validator defines a validator, together with the total amount of the
              Validator's bond shares and their exchange rate to coins. Slashing results in
              a decrease in the exchange rate, allowing correct calculation of future
              undelegations without iterating over delegators. When coins are delegated to
              this validator, the validator is credited with a delegation whose number of
              bond shares is based on the amount of coins delegated divided by the current
              exchange rate. Voting power can be calculated as total bonded shares
              multiplied by exchange rate.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
    cosmos.staking.v1beta1.Redelegation:
      type: object
      properties:
        delegator_address:
          type: string
          description: delegator_address is the bech32-encoded address of the delegator.
        validator_src_address:
          type: string
          description: validator_src_address is the validator redelegation source
            operator address.
        validator_dst_address:
          type: string
          description: validator_dst_address is the validator redelegation destination
            operator address.
        entries:
          type: array
          description: entries are the redelegation entries.
          items:
            type: object
            properties:
              creation_height:
                type: string
                description: creation_height  defines the height which the redelegation
                  took place.
                format: int64
              completion_time:
                type: string
                description: completion_time defines the unix time for redelegation
                  completion.
                format: date-time
              initial_balance:
                type: string
                description: initial_balance defines the initial balance when redelegation
                  started.
              shares_dst:
                type: string
                description: shares_dst is the amount of destination-validator shares
                  created by redelegation.
            description: RedelegationEntry defines a redelegation object with relevant
              metadata.
      description: |-
        Redelegation contains the list of a particular delegator's redelegating bonds
        from a particular source validator to a particular destination validator.
    cosmos.staking.v1beta1.RedelegationEntry:
      type: object
      properties:
        creation_height:
          type: string
          description: creation_height  defines the height which the redelegation
            took place.
          format: int64
        completion_time:
          type: string
          description: completion_time defines the unix time for redelegation completion.
          format: date-time
        initial_balance:
          type: string
          description: initial_balance defines the initial balance when redelegation
            started.
        shares_dst:
          type: string
          description: shares_dst is the amount of destination-validator shares created
            by redelegation.
      description: RedelegationEntry defines a redelegation object with relevant metadata.
    cosmos.staking.v1beta1.RedelegationEntryResponse:
      type: object
      properties:
        redelegation_entry:
          type: object
          properties:
            creation_height:
              type: string
              description: creation_height  defines the height which the redelegation
                took place.
              format: int64
            completion_time:
              type: string
              description: completion_time defines the unix time for redelegation
                completion.
              format: date-time
            initial_balance:
              type: string
              description: initial_balance defines the initial balance when redelegation
                started.
            shares_dst:
              type: string
              description: shares_dst is the amount of destination-validator shares
                created by redelegation.
          description: RedelegationEntry defines a redelegation object with relevant
            metadata.
        balance:
          type: string
      description: |-
        RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
        contains a balance in addition to shares which is more suitable for client
        responses.
    cosmos.staking.v1beta1.RedelegationResponse:
      type: object
      properties:
        redelegation:
          type: object
          properties:
            delegator_address:
              type: string
              description: delegator_address is the bech32-encoded address of the
                delegator.
            validator_src_address:
              type: string
              description: validator_src_address is the validator redelegation source
                operator address.
            validator_dst_address:
              type: string
              description: validator_dst_address is the validator redelegation destination
                operator address.
            entries:
              type: array
              description: entries are the redelegation entries.
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    description: creation_height  defines the height which the redelegation
                      took place.
                    format: int64
                  completion_time:
                    type: string
                    description: completion_time defines the unix time for redelegation
                      completion.
                    format: date-time
                  initial_balance:
                    type: string
                    description: initial_balance defines the initial balance when
                      redelegation started.
                  shares_dst:
                    type: string
                    description: shares_dst is the amount of destination-validator
                      shares created by redelegation.
                description: RedelegationEntry defines a redelegation object with
                  relevant metadata.
          description: |-
            Redelegation contains the list of a particular delegator's redelegating bonds
            from a particular source validator to a particular destination validator.
        entries:
          type: array
          items:
            type: object
            properties:
              redelegation_entry:
                type: object
                properties:
                  creation_height:
                    type: string
                    description: creation_height  defines the height which the redelegation
                      took place.
                    format: int64
                  completion_time:
                    type: string
                    description: completion_time defines the unix time for redelegation
                      completion.
                    format: date-time
                  initial_balance:
                    type: string
                    description: initial_balance defines the initial balance when
                      redelegation started.
                  shares_dst:
                    type: string
                    description: shares_dst is the amount of destination-validator
                      shares created by redelegation.
                description: RedelegationEntry defines a redelegation object with
                  relevant metadata.
              balance:
                type: string
            description: |-
              RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
              contains a balance in addition to shares which is more suitable for client
              responses.
      description: |-
        RedelegationResponse is equivalent to a Redelegation except that its entries
        contain a balance in addition to shares which is more suitable for client
        responses.
    cosmos.staking.v1beta1.UnbondingDelegation:
      type: object
      properties:
        delegator_address:
          type: string
          description: delegator_address is the bech32-encoded address of the delegator.
        validator_address:
          type: string
          description: validator_address is the bech32-encoded address of the validator.
        entries:
          type: array
          description: entries are the unbonding delegation entries.
          items:
            type: object
            properties:
              creation_height:
                type: string
                description: creation_height is the height which the unbonding took
                  place.
                format: int64
              completion_time:
                type: string
                description: completion_time is the unix time for unbonding completion.
                format: date-time
              initial_balance:
                type: string
                description: initial_balance defines the tokens initially scheduled
                  to receive at completion.
              balance:
                type: string
                description: balance defines the tokens to receive at completion.
            description: UnbondingDelegationEntry defines an unbonding object with
              relevant metadata.
      description: |-
        UnbondingDelegation stores all of a single delegator's unbonding bonds
        for a single validator in an time-ordered list.
    cosmos.staking.v1beta1.UnbondingDelegationEntry:
      type: object
      properties:
        creation_height:
          type: string
          description: creation_height is the height which the unbonding took place.
          format: int64
        completion_time:
          type: string
          description: completion_time is the unix time for unbonding completion.
          format: date-time
        initial_balance:
          type: string
          description: initial_balance defines the tokens initially scheduled to receive
            at completion.
        balance:
          type: string
          description: balance defines the tokens to receive at completion.
      description: UnbondingDelegationEntry defines an unbonding object with relevant
        metadata.
    cosmos.staking.v1beta1.Validator:
      type: object
      properties:
        operator_address:
          type: string
          description: operator_address defines the address of the validator's operator;
            bech encoded in JSON.
        consensus_pubkey:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: consensus_pubkey is the consensus public key of the validator,
            as a Protobuf Any.
        jailed:
          type: boolean
          description: jailed defined whether the validator has been jailed from bonded
            status or not.
        status:
          type: string
          description: status is the validator status (bonded/unbonding/unbonded).
          default: BOND_STATUS_UNSPECIFIED
          enum:
          - BOND_STATUS_UNSPECIFIED
          - BOND_STATUS_UNBONDED
          - BOND_STATUS_UNBONDING
          - BOND_STATUS_BONDED
        tokens:
          type: string
          description: tokens define the delegated tokens (incl. self-delegation).
        delegator_shares:
          type: string
          description: delegator_shares defines total shares issued to a validator's
            delegators.
        description:
          type: object
          properties:
            moniker:
              type: string
              description: moniker defines a human-readable name for the validator.
            identity:
              type: string
              description: identity defines an optional identity signature (ex. UPort
                or Keybase).
            website:
              type: string
              description: website defines an optional website link.
            security_contact:
              type: string
              description: security_contact defines an optional email for security
                contact.
            details:
              type: string
              description: details define other optional details.
          description: description defines the description terms for the validator.
        unbonding_height:
          type: string
          description: unbonding_height defines, if unbonding, the height at which
            this validator has begun unbonding.
          format: int64
        unbonding_time:
          type: string
          description: unbonding_time defines, if unbonding, the min time for the
            validator to complete unbonding.
          format: date-time
        commission:
          type: object
          properties:
            commission_rates:
              type: object
              properties:
                rate:
                  type: string
                  description: rate is the commission rate charged to delegators,
                    as a fraction.
                max_rate:
                  type: string
                  description: max_rate defines the maximum commission rate which
                    validator can ever charge, as a fraction.
                max_change_rate:
                  type: string
                  description: max_change_rate defines the maximum daily increase
                    of the validator commission, as a fraction.
              description: commission_rates defines the initial commission rates to
                be used for creating a validator.
            update_time:
              type: string
              description: update_time is the last time the commission rate was changed.
              format: date-time
          description: commission defines the commission parameters.
        min_self_delegation:
          type: string
          description: min_self_delegation is the validator's self declared minimum
            self delegation.
      description: |-
        Validator defines a validator, together with the total amount of the
        Validator's bond shares and their exchange rate to coins. Slashing results in
        a decrease in the exchange rate, allowing correct calculation of future
        undelegations without iterating over delegators. When coins are delegated to
        this validator, the validator is credited with a delegation whose number of
        bond shares is based on the amount of coins delegated divided by the current
        exchange rate. Voting power can be calculated as total bonded shares
        multiplied by exchange rate.
    tendermint.types.BlockID:
      title: BlockID
      type: object
      properties:
        hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        part_set_header:
          title: PartsetHeader
          type: object
          properties:
            total:
              type: integer
              format: int64
            hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
    tendermint.types.Header:
      type: object
      properties:
        version:
          title: basic block info
          type: object
          properties:
            block:
              type: string
              format: uint64
            app:
              type: string
              format: uint64
          description: |-
            Consensus captures the consensus rules for processing a block in the blockchain,
            including all blockchain data structures and the rules of the application's
            state transition machine.
        chain_id:
          type: string
        height:
          type: string
          format: int64
        time:
          type: string
          format: date-time
        last_block_id:
          title: prev block info
          type: object
          properties:
            hash:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            part_set_header:
              title: PartsetHeader
              type: object
              properties:
                total:
                  type: integer
                  format: int64
                hash:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
        last_commit_hash:
          title: hashes of block data
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        data_hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        validators_hash:
          title: hashes from the app output from the prev block
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        next_validators_hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        consensus_hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        app_hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        last_results_hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        evidence_hash:
          title: consensus info
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proposer_address:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
      description: Header defines the structure of a Tendermint block header.
    tendermint.types.PartSetHeader:
      title: PartsetHeader
      type: object
      properties:
        total:
          type: integer
          format: int64
        hash:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    tendermint.version.Consensus:
      type: object
      properties:
        block:
          type: string
          format: uint64
        app:
          type: string
          format: uint64
      description: |-
        Consensus captures the consensus rules for processing a block in the blockchain,
        including all blockchain data structures and the rules of the application's
        state transition machine.
    cosmos.upgrade.v1beta1.Plan:
      type: object
      properties:
        name:
          type: string
          description: |-
            Sets the name for the upgrade. This name will be used by the upgraded
            version of the software to apply any special "on-upgrade" commands during
            the first BeginBlock method after the upgrade is applied. It is also used
            to detect whether a software version can handle a given upgrade. If no
            upgrade handler with this name has been set in the software, it will be
            assumed that the software is out-of-date when the upgrade Time or Height is
            reached and the software will exit.
        time:
          type: string
          description: |-
            The time after which the upgrade must be performed.
            Leave set to its zero value to use a pre-defined Height instead.
          format: date-time
        height:
          type: string
          description: |-
            The height at which the upgrade must be performed.
            Only used if Time is not set.
          format: int64
        info:
          title: |-
            Any application specific upgrade info to be included on-chain
            such as a git commit that validators could automatically upgrade to
          type: string
        upgraded_client_state:
          title: |-
            IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
            This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
            so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
            previous version of the chain.
            This will allow IBC connections to persist smoothly across planned chain upgrades
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: Plan specifies information about a planned upgrade and when it
        should occur.
    cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
      type: object
      properties:
        height:
          type: string
          description: height is the block height at which the plan was applied.
          format: int64
      description: |-
        QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
        method.
    cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
      type: object
      properties:
        plan:
          type: object
          properties:
            name:
              type: string
              description: |-
                Sets the name for the upgrade. This name will be used by the upgraded
                version of the software to apply any special "on-upgrade" commands during
                the first BeginBlock method after the upgrade is applied. It is also used
                to detect whether a software version can handle a given upgrade. If no
                upgrade handler with this name has been set in the software, it will be
                assumed that the software is out-of-date when the upgrade Time or Height is
                reached and the software will exit.
            time:
              type: string
              description: |-
                The time after which the upgrade must be performed.
                Leave set to its zero value to use a pre-defined Height instead.
              format: date-time
            height:
              type: string
              description: |-
                The height at which the upgrade must be performed.
                Only used if Time is not set.
              format: int64
            info:
              title: |-
                Any application specific upgrade info to be included on-chain
                such as a git commit that validators could automatically upgrade to
              type: string
            upgraded_client_state:
              title: |-
                IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
                This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
                so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
                previous version of the chain.
                This will allow IBC connections to persist smoothly across planned chain upgrades
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: plan is the current upgrade plan.
      description: |-
        QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
        method.
    cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
      type: object
      properties:
        upgraded_consensus_state:
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
        RPC method.
    ibc.core.channel.v1.Channel:
      type: object
      properties:
        state:
          title: current state of the channel end
          type: string
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        ordering:
          title: whether the channel is ordered or unordered
          type: string
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          default: ORDER_NONE_UNSPECIFIED
          enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        counterparty:
          title: counterparty channel end
          type: object
          properties:
            port_id:
              type: string
              description: port on the counterparty chain which owns the other end
                of the channel.
            channel_id:
              title: channel end on the counterparty chain
              type: string
        connection_hops:
          title: |-
            list of connection identifiers, in order, along which packets sent on
            this channel will travel
          type: array
          items:
            type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
      description: |-
        Channel defines pipeline for exactly-once packet delivery between specific
        modules on separate blockchains, which has at least one end capable of
        sending packets and one end capable of receiving packets.
    ibc.core.channel.v1.Counterparty:
      title: Counterparty defines a channel end counterparty
      type: object
      properties:
        port_id:
          type: string
          description: port on the counterparty chain which owns the other end of
            the channel.
        channel_id:
          title: channel end on the counterparty chain
          type: string
    ibc.core.channel.v1.IdentifiedChannel:
      type: object
      properties:
        state:
          title: current state of the channel end
          type: string
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        ordering:
          title: whether the channel is ordered or unordered
          type: string
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          default: ORDER_NONE_UNSPECIFIED
          enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        counterparty:
          title: counterparty channel end
          type: object
          properties:
            port_id:
              type: string
              description: port on the counterparty chain which owns the other end
                of the channel.
            channel_id:
              title: channel end on the counterparty chain
              type: string
        connection_hops:
          title: |-
            list of connection identifiers, in order, along which packets sent on
            this channel will travel
          type: array
          items:
            type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
        port_id:
          title: port identifier
          type: string
        channel_id:
          title: channel identifier
          type: string
      description: |-
        IdentifiedChannel defines a channel with additional port and channel
        identifier fields.
    ibc.core.channel.v1.Order:
      title: Order defines if a channel is ORDERED or UNORDERED
      type: string
      description: |-
        - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
        which they were sent.
         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      default: ORDER_NONE_UNSPECIFIED
      enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    ibc.core.channel.v1.PacketState:
      type: object
      properties:
        port_id:
          type: string
          description: channel port identifier.
        channel_id:
          type: string
          description: channel unique identifier.
        sequence:
          type: string
          description: packet sequence.
          format: uint64
        data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: embedded data that represents packet state.
          format: byte
      description: |-
        PacketState defines the generic type necessary to retrieve and store
        packet commitments, acknowledgements, and receipts.
        Caller is responsible for knowing the context necessary to interpret this
        state as a commitment, acknowledgement, or a receipt.
    ibc.core.channel.v1.QueryChannelClientStateResponse:
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
      properties:
        identified_client_state:
          title: client state associated with the channel
          type: object
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              title: client state
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: |-
            IdentifiedClientState defines a client state with an additional client
            identifier field.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryChannelConsensusStateResponse:
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the channel
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        client_id:
          title: client ID associated with the consensus state
          type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryChannelResponse:
      type: object
      properties:
        channel:
          title: channel associated with the request identifiers
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
              default: STATE_UNINITIALIZED_UNSPECIFIED
              enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
              default: ORDER_NONE_UNSPECIFIED
              enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: port on the counterparty chain which owns the other
                    end of the channel.
                channel_id:
                  title: channel end on the counterparty chain
                  type: string
            connection_hops:
              title: |-
                list of connection identifiers, in order, along which packets sent on
                this channel will travel
              type: array
              items:
                type: string
            version:
              title: opaque channel version, which is agreed upon during the handshake
              type: string
          description: |-
            Channel defines pipeline for exactly-once packet delivery between specific
            modules on separate blockchains, which has at least one end capable of
            sending packets and one end capable of receiving packets.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
      description: |-
        QueryChannelResponse is the response type for the Query/Channel RPC method.
        Besides the Channel end, it includes a proof and the height from which the
        proof was retrieved.
    ibc.core.channel.v1.QueryChannelsResponse:
      type: object
      properties:
        channels:
          type: array
          description: list of stored channels of the chain.
          items:
            type: object
            properties:
              state:
                title: current state of the channel end
                type: string
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              ordering:
                title: whether the channel is ordered or unordered
                type: string
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                default: ORDER_NONE_UNSPECIFIED
                enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              counterparty:
                title: counterparty channel end
                type: object
                properties:
                  port_id:
                    type: string
                    description: port on the counterparty chain which owns the other
                      end of the channel.
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
              connection_hops:
                title: |-
                  list of connection identifiers, in order, along which packets sent on
                  this channel will travel
                type: array
                items:
                  type: string
              version:
                title: opaque channel version, which is agreed upon during the handshake
                type: string
              port_id:
                title: port identifier
                type: string
              channel_id:
                title: channel identifier
                type: string
            description: |-
              IdentifiedChannel defines a channel with additional port and channel
              identifier fields.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
      description: QueryChannelsResponse is the response type for the Query/Channels
        RPC method.
    ibc.core.channel.v1.QueryConnectionChannelsResponse:
      title: |-
        QueryConnectionChannelsResponse is the Response type for the
        Query/QueryConnectionChannels RPC method
      type: object
      properties:
        channels:
          type: array
          description: list of channels associated with a connection.
          items:
            type: object
            properties:
              state:
                title: current state of the channel end
                type: string
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              ordering:
                title: whether the channel is ordered or unordered
                type: string
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                default: ORDER_NONE_UNSPECIFIED
                enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              counterparty:
                title: counterparty channel end
                type: object
                properties:
                  port_id:
                    type: string
                    description: port on the counterparty chain which owns the other
                      end of the channel.
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
              connection_hops:
                title: |-
                  list of connection identifiers, in order, along which packets sent on
                  this channel will travel
                type: array
                items:
                  type: string
              version:
                title: opaque channel version, which is agreed upon during the handshake
                type: string
              port_id:
                title: port identifier
                type: string
              channel_id:
                title: channel identifier
                type: string
            description: |-
              IdentifiedChannel defines a channel with additional port and channel
              identifier fields.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
      title: |-
        QuerySequenceResponse is the request type for the
        Query/QueryNextSequenceReceiveResponse RPC method
      type: object
      properties:
        next_sequence_receive:
          title: next sequence receive number
          type: string
          format: uint64
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
      title: |-
        QueryPacketAcknowledgementResponse defines the client query response for a
        packet which also includes a proof and the height from which the
        proof was retrieved
      type: object
      properties:
        acknowledgement:
          title: packet associated with the request fields
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
      title: |-
        QueryPacketAcknowledgemetsResponse is the request type for the
        Query/QueryPacketAcknowledgements RPC method
      type: object
      properties:
        acknowledgements:
          type: array
          items:
            type: object
            properties:
              port_id:
                type: string
                description: channel port identifier.
              channel_id:
                type: string
                description: channel unique identifier.
              sequence:
                type: string
                description: packet sequence.
                format: uint64
              data:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: embedded data that represents packet state.
                format: byte
            description: |-
              PacketState defines the generic type necessary to retrieve and store
              packet commitments, acknowledgements, and receipts.
              Caller is responsible for knowing the context necessary to interpret this
              state as a commitment, acknowledgement, or a receipt.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryPacketCommitmentResponse:
      title: |-
        QueryPacketCommitmentResponse defines the client query response for a packet
        which also includes a proof and the height from which the proof was
        retrieved
      type: object
      properties:
        commitment:
          title: packet associated with the request fields
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryPacketCommitmentsResponse:
      title: |-
        QueryPacketCommitmentsResponse is the request type for the
        Query/QueryPacketCommitments RPC method
      type: object
      properties:
        commitments:
          type: array
          items:
            type: object
            properties:
              port_id:
                type: string
                description: channel port identifier.
              channel_id:
                type: string
                description: channel unique identifier.
              sequence:
                type: string
                description: packet sequence.
                format: uint64
              data:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: embedded data that represents packet state.
                format: byte
            description: |-
              PacketState defines the generic type necessary to retrieve and store
              packet commitments, acknowledgements, and receipts.
              Caller is responsible for knowing the context necessary to interpret this
              state as a commitment, acknowledgement, or a receipt.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryPacketReceiptResponse:
      title: |-
        QueryPacketReceiptResponse defines the client query response for a packet receipt
        which also includes a proof, and the height from which the proof was
        retrieved
      type: object
      properties:
        received:
          title: success flag for if receipt exists
          type: boolean
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryUnreceivedAcksResponse:
      title: |-
        QueryUnreceivedAcksResponse is the response type for the
        Query/UnreceivedAcks RPC method
      type: object
      properties:
        sequences:
          title: list of unreceived acknowledgement sequences
          type: array
          items:
            type: string
            format: uint64
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
      title: |-
        QueryUnreceivedPacketsResponse is the response type for the
        Query/UnreceivedPacketCommitments RPC method
      type: object
      properties:
        sequences:
          title: list of unreceived packet sequences
          type: array
          items:
            type: string
            format: uint64
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.channel.v1.State:
      type: string
      description: |-
        State defines if a channel is in one of the following states:
        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A channel has just started the opening handshake.
         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
         - STATE_OPEN: A channel has completed the handshake. Open channels are
        ready to send and receive packets.
         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
        packets.
      default: STATE_UNINITIALIZED_UNSPECIFIED
      enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
    ibc.core.client.v1.Height:
      title: |-
        Height is a monotonically increasing data type
        that can be compared against another Height for the purposes of updating and
        freezing clients
      type: object
      properties:
        revision_number:
          title: the revision that the client is currently on
          type: string
          format: uint64
        revision_height:
          title: the height within the given revision
          type: string
          format: uint64
      description: |-
        Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
        the same. However some consensus algorithms may choose to reset the
        height in certain conditions e.g. hard forks, state-machine breaking changes
        In these cases, the RevisionNumber is incremented so that height continues to
        be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.client.v1.IdentifiedClientState:
      type: object
      properties:
        client_id:
          title: client identifier
          type: string
        client_state:
          title: client state
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        IdentifiedClientState defines a client state with an additional client
        identifier field.
    ibc.core.client.v1.ConsensusStateWithHeight:
      type: object
      properties:
        height:
          title: consensus state height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
        consensus_state:
          title: consensus state
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: ConsensusStateWithHeight defines a consensus state with an additional
        height field.
    ibc.core.client.v1.Params:
      type: object
      properties:
        allowed_clients:
          type: array
          description: allowed_clients defines the list of allowed client state types.
          items:
            type: string
      description: Params defines the set of IBC light client parameters.
    ibc.core.client.v1.QueryClientParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            allowed_clients:
              type: array
              description: allowed_clients defines the list of allowed client state
                types.
              items:
                type: string
          description: params defines the parameters of the module.
      description: QueryClientParamsResponse is the response type for the Query/ClientParams
        RPC method.
    ibc.core.client.v1.QueryClientStateResponse:
      type: object
      properties:
        client_state:
          title: client state associated with the request identifier
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
      description: |-
        QueryClientStateResponse is the response type for the Query/ClientState RPC
        method. Besides the client state, it includes a proof and the height from
        which the proof was retrieved.
    ibc.core.client.v1.QueryClientStatesResponse:
      type: object
      properties:
        client_states:
          type: array
          description: list of stored ClientStates of the chain.
          items:
            type: object
            properties:
              client_id:
                title: client identifier
                type: string
              client_state:
                title: client state
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: |-
                  `Any` contains an arbitrary serialized protocol buffer message along with a
                  URL that describes the type of the serialized message.

                  Protobuf library provides support to pack/unpack Any values in the form
                  of utility functions or additional generated methods of the Any type.

                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use
                  'type.googleapis.com/full.type.name' as the type URL and the unpack
                  methods only use the fully qualified type name after the last '/'
                  in the type URL, for example "foo.bar.com/x/y.z" will yield type
                  name "y.z".


                  JSON
                  ====
                  The JSON representation of an `Any` value uses the regular
                  representation of the deserialized, embedded message, with an
                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON
                  representation, that representation will be embedded adding a field
                  `value` which holds the custom JSON in addition to the `@type`
                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: |-
              IdentifiedClientState defines a client state with an additional client
              identifier field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
      description: |-
        QueryClientStatesResponse is the response type for the Query/ClientStates RPC
        method.
    ibc.core.client.v1.QueryConsensusStateResponse:
      title: |-
        QueryConsensusStateResponse is the response type for the Query/ConsensusState
        RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the client identifier at the given
            height
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.client.v1.QueryConsensusStatesResponse:
      title: |-
        QueryConsensusStatesResponse is the response type for the
        Query/ConsensusStates RPC method
      type: object
      properties:
        consensus_states:
          title: consensus states associated with the identifier
          type: array
          items:
            type: object
            properties:
              height:
                title: consensus state height
                type: object
                properties:
                  revision_number:
                    title: the revision that the client is currently on
                    type: string
                    format: uint64
                  revision_height:
                    title: the height within the given revision
                    type: string
                    format: uint64
                description: |-
                  Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
                  the same. However some consensus algorithms may choose to reset the
                  height in certain conditions e.g. hard forks, state-machine breaking changes
                  In these cases, the RevisionNumber is incremented so that height continues to
                  be monitonically increasing even as the RevisionHeight gets reset
              consensus_state:
                title: consensus state
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: |-
                  `Any` contains an arbitrary serialized protocol buffer message along with a
                  URL that describes the type of the serialized message.

                  Protobuf library provides support to pack/unpack Any values in the form
                  of utility functions or additional generated methods of the Any type.

                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use
                  'type.googleapis.com/full.type.name' as the type URL and the unpack
                  methods only use the fully qualified type name after the last '/'
                  in the type URL, for example "foo.bar.com/x/y.z" will yield type
                  name "y.z".


                  JSON
                  ====
                  The JSON representation of an `Any` value uses the regular
                  representation of the deserialized, embedded message, with an
                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON
                  representation, that representation will be embedded adding a field
                  `value` which holds the custom JSON in addition to the `@type`
                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: ConsensusStateWithHeight defines a consensus state with an
              additional height field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
    ibc.core.commitment.v1.MerklePrefix:
      title: |-
        MerklePrefix is merkle path prefixed to the key.
        The constructed key from the Path and the key will be append(Path.KeyPath,
        append(Path.KeyPrefix, key...))
      type: object
      properties:
        key_prefix:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    ibc.core.connection.v1.ConnectionEnd:
      type: object
      properties:
        client_id:
          type: string
          description: client associated with this connection.
        versions:
          type: array
          description: |-
            IBC version which can be utilised to determine encodings or protocols for
            channels or packets utilising this connection.
          items:
            type: object
            properties:
              identifier:
                title: unique version identifier
                type: string
              features:
                title: list of features compatible with the specified identifier
                type: array
                items:
                  type: string
            description: |-
              Version defines the versioning scheme used to negotiate the IBC verison in
              the connection handshake.
        state:
          type: string
          description: current state of the connection end.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        counterparty:
          type: object
          properties:
            client_id:
              type: string
              description: |-
                identifies the client on the counterparty chain associated with a given
                connection.
            connection_id:
              type: string
              description: |-
                identifies the connection end on the counterparty chain associated with a
                given connection.
            prefix:
              title: |-
                MerklePrefix is merkle path prefixed to the key.
                The constructed key from the Path and the key will be append(Path.KeyPath,
                append(Path.KeyPrefix, key...))
              type: object
              properties:
                key_prefix:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
              description: commitment merkle prefix of the counterparty chain.
          description: counterparty chain associated with this connection.
        delay_period:
          type: string
          description: |-
            delay period that must pass before a consensus state can be used for packet-verification
            NOTE: delay period logic is only implemented by some clients.
          format: uint64
      description: |-
        ConnectionEnd defines a stateful object on a chain connected to another
        separate one.
        NOTE: there must only be 2 defined ConnectionEnds to establish
        a connection between two chains.
    ibc.core.connection.v1.Counterparty:
      type: object
      properties:
        client_id:
          type: string
          description: |-
            identifies the client on the counterparty chain associated with a given
            connection.
        connection_id:
          type: string
          description: |-
            identifies the connection end on the counterparty chain associated with a
            given connection.
        prefix:
          title: |-
            MerklePrefix is merkle path prefixed to the key.
            The constructed key from the Path and the key will be append(Path.KeyPath,
            append(Path.KeyPrefix, key...))
          type: object
          properties:
            key_prefix:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
          description: commitment merkle prefix of the counterparty chain.
      description: Counterparty defines the counterparty chain associated with a connection
        end.
    ibc.core.connection.v1.IdentifiedConnection:
      type: object
      properties:
        id:
          type: string
          description: connection identifier.
        client_id:
          type: string
          description: client associated with this connection.
        versions:
          title: |-
            IBC version which can be utilised to determine encodings or protocols for
            channels or packets utilising this connection
          type: array
          items:
            type: object
            properties:
              identifier:
                title: unique version identifier
                type: string
              features:
                title: list of features compatible with the specified identifier
                type: array
                items:
                  type: string
            description: |-
              Version defines the versioning scheme used to negotiate the IBC verison in
              the connection handshake.
        state:
          type: string
          description: current state of the connection end.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        counterparty:
          type: object
          properties:
            client_id:
              type: string
              description: |-
                identifies the client on the counterparty chain associated with a given
                connection.
            connection_id:
              type: string
              description: |-
                identifies the connection end on the counterparty chain associated with a
                given connection.
            prefix:
              title: |-
                MerklePrefix is merkle path prefixed to the key.
                The constructed key from the Path and the key will be append(Path.KeyPath,
                append(Path.KeyPrefix, key...))
              type: object
              properties:
                key_prefix:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
              description: commitment merkle prefix of the counterparty chain.
          description: counterparty chain associated with this connection.
        delay_period:
          type: string
          description: delay period associated with this connection.
          format: uint64
      description: |-
        IdentifiedConnection defines a connection with additional connection
        identifier field.
    ibc.core.connection.v1.QueryClientConnectionsResponse:
      title: |-
        QueryClientConnectionsResponse is the response type for the
        Query/ClientConnections RPC method
      type: object
      properties:
        connection_paths:
          type: array
          description: slice of all the connection paths associated with a client.
          items:
            type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was generated
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.connection.v1.QueryConnectionClientStateResponse:
      title: |-
        QueryConnectionClientStateResponse is the response type for the
        Query/ConnectionClientState RPC method
      type: object
      properties:
        identified_client_state:
          title: client state associated with the channel
          type: object
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              title: client state
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: |-
            IdentifiedClientState defines a client state with an additional client
            identifier field.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
      title: |-
        QueryConnectionConsensusStateResponse is the response type for the
        Query/ConnectionConsensusState RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the channel
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        client_id:
          title: client ID associated with the consensus state
          type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
    ibc.core.connection.v1.QueryConnectionResponse:
      type: object
      properties:
        connection:
          title: connection associated with the request identifier
          type: object
          properties:
            client_id:
              type: string
              description: client associated with this connection.
            versions:
              type: array
              description: |-
                IBC version which can be utilised to determine encodings or protocols for
                channels or packets utilising this connection.
              items:
                type: object
                properties:
                  identifier:
                    title: unique version identifier
                    type: string
                  features:
                    title: list of features compatible with the specified identifier
                    type: array
                    items:
                      type: string
                description: |-
                  Version defines the versioning scheme used to negotiate the IBC verison in
                  the connection handshake.
            state:
              type: string
              description: current state of the connection end.
              default: STATE_UNINITIALIZED_UNSPECIFIED
              enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
            counterparty:
              type: object
              properties:
                client_id:
                  type: string
                  description: |-
                    identifies the client on the counterparty chain associated with a given
                    connection.
                connection_id:
                  type: string
                  description: |-
                    identifies the connection end on the counterparty chain associated with a
                    given connection.
                prefix:
                  title: |-
                    MerklePrefix is merkle path prefixed to the key.
                    The constructed key from the Path and the key will be append(Path.KeyPath,
                    append(Path.KeyPrefix, key...))
                  type: object
                  properties:
                    key_prefix:
                      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                      type: string
                      format: byte
                  description: commitment merkle prefix of the counterparty chain.
              description: counterparty chain associated with this connection.
            delay_period:
              type: string
              description: |-
                delay period that must pass before a consensus state can be used for packet-verification
                NOTE: delay period logic is only implemented by some clients.
              format: uint64
          description: |-
            ConnectionEnd defines a stateful object on a chain connected to another
            separate one.
            NOTE: there must only be 2 defined ConnectionEnds to establish
            a connection between two chains.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
      description: |-
        QueryConnectionResponse is the response type for the Query/Connection RPC
        method. Besides the connection end, it includes a proof and the height from
        which the proof was retrieved.
    ibc.core.connection.v1.QueryConnectionsResponse:
      type: object
      properties:
        connections:
          type: array
          description: list of stored connections of the chain.
          items:
            type: object
            properties:
              id:
                type: string
                description: connection identifier.
              client_id:
                type: string
                description: client associated with this connection.
              versions:
                title: |-
                  IBC version which can be utilised to determine encodings or protocols for
                  channels or packets utilising this connection
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      title: unique version identifier
                      type: string
                    features:
                      title: list of features compatible with the specified identifier
                      type: array
                      items:
                        type: string
                  description: |-
                    Version defines the versioning scheme used to negotiate the IBC verison in
                    the connection handshake.
              state:
                type: string
                description: current state of the connection end.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: |-
                      identifies the client on the counterparty chain associated with a given
                      connection.
                  connection_id:
                    type: string
                    description: |-
                      identifies the connection end on the counterparty chain associated with a
                      given connection.
                  prefix:
                    title: |-
                      MerklePrefix is merkle path prefixed to the key.
                      The constructed key from the Path and the key will be append(Path.KeyPath,
                      append(Path.KeyPrefix, key...))
                    type: object
                    properties:
                      key_prefix:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                    description: commitment merkle prefix of the counterparty chain.
                description: counterparty chain associated with this connection.
              delay_period:
                type: string
                description: delay period associated with this connection.
                format: uint64
            description: |-
              IdentifiedConnection defines a connection with additional connection
              identifier field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping RevisionNumber
            the same. However some consensus algorithms may choose to reset the
            height in certain conditions e.g. hard forks, state-machine breaking changes
            In these cases, the RevisionNumber is incremented so that height continues to
            be monitonically increasing even as the RevisionHeight gets reset
      description: |-
        QueryConnectionsResponse is the response type for the Query/Connections RPC
        method.
    ibc.core.connection.v1.State:
      type: string
      description: |-
        State defines if a connection is in one of the following states:
        INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A connection end has just started the opening handshake.
         - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
        chain.
         - STATE_OPEN: A connection end has completed the handshake.
      default: STATE_UNINITIALIZED_UNSPECIFIED
      enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
    ibc.core.connection.v1.Version:
      type: object
      properties:
        identifier:
          title: unique version identifier
          type: string
        features:
          title: list of features compatible with the specified identifier
          type: array
          items:
            type: string
      description: |-
        Version defines the versioning scheme used to negotiate the IBC verison in
        the connection handshake.
    ibc.applications.transfer.v1.DenomTrace:
      type: object
      properties:
        path:
          type: string
          description: |-
            path defines the chain of port/channel identifiers used for tracing the
            source of the fungible token.
        base_denom:
          type: string
          description: base denomination of the relayed fungible token.
      description: |-
        DenomTrace contains the base denomination for ICS20 fungible tokens and the
        source tracing information path.
    ibc.applications.transfer.v1.Params:
      type: object
      properties:
        send_enabled:
          type: boolean
          description: |-
            send_enabled enables or disables all cross-chain token transfers from this
            chain.
        receive_enabled:
          type: boolean
          description: |-
            receive_enabled enables or disables all cross-chain token transfers to this
            chain.
      description: |-
        Params defines the set of IBC transfer parameters.
        NOTE: To prevent a single token from being transferred, set the
        TransfersEnabled parameter to true and then set the bank module's SendEnabled
        parameter for the denomination to false.
    ibc.applications.transfer.v1.QueryDenomTraceResponse:
      type: object
      properties:
        denom_trace:
          type: object
          properties:
            path:
              type: string
              description: |-
                path defines the chain of port/channel identifiers used for tracing the
                source of the fungible token.
            base_denom:
              type: string
              description: base denomination of the relayed fungible token.
          description: denom_trace returns the requested denomination trace information.
      description: |-
        QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
        method.
    ibc.applications.transfer.v1.QueryDenomTracesResponse:
      type: object
      properties:
        denom_traces:
          type: array
          description: denom_traces returns all denominations trace information.
          items:
            type: object
            properties:
              path:
                type: string
                description: |-
                  path defines the chain of port/channel identifiers used for tracing the
                  source of the fungible token.
              base_denom:
                type: string
                description: base denomination of the relayed fungible token.
            description: |-
              DenomTrace contains the base denomination for ICS20 fungible tokens and the
              source tracing information path.
        pagination:
          type: object
          properties:
            next_key:
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
        method.
    ibc.applications.transfer.v1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            send_enabled:
              type: boolean
              description: |-
                send_enabled enables or disables all cross-chain token transfers from this
                chain.
            receive_enabled:
              type: boolean
              description: |-
                receive_enabled enables or disables all cross-chain token transfers to this
                chain.
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
