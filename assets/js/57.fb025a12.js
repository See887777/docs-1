(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{504:function(e,t,s){"use strict";s.r(t);var a=s(8),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"superfluid-staking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-staking"}},[e._v("#")]),e._v(" Superfluid Staking")]),e._v(" "),s("h2",{attrs:{id:"abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),s("p",[e._v('Superfluid Staking provides the consensus layer more security with a\nsort of "Proof of Useful Stake". Each person gets an amount of Osmo\nrepresentative of the value of their share of liquidity pool tokens\nstaked and delegated to validators, resulting in the security guarantee\nof the consensus layer to also be based on GAMM LP shares. The OSMO\ntoken is minted and burned in the context of Superfluid Staking.\nThroughout all of this, OSMO\'s supply is preserved in queries to the\nbank module.')]),e._v(" "),s("h3",{attrs:{id:"the-process"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-process"}},[e._v("#")]),e._v(" The process")]),e._v(" "),s("p",[e._v("All of the below methods are found under the "),s("a",{attrs:{href:"https://github.com/osmosis-labs/osmosis/tree/main/x/superfluid",target:"_blank",rel:"noopener noreferrer"}},[e._v("Superfluid\nmodules"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("ul",[s("li",[e._v("The "),s("code",[e._v("SuperfluidDelegate")]),e._v(" method stores your share of bonded\nliquidity pool tokens, with "),s("code",[e._v("validateLock")]),e._v(" as a verifier for lockup\ntime.")]),e._v(" "),s("li",[s("code",[e._v("GetSuperfluidOsmo")]),e._v(" mints OSMO tokens each day for delegation as a\nrepresentative of the value of your pool share. This amount is\nminted because the staking module at the moment requires staked\ntokens to be in OSMO. This amount is burned each day and re-minted\nto keep the representative amount of the value of your pool share\naccurate. The lockup duration is guaranteed from the underlying\nlockup module.")]),e._v(" "),s("li",[s("code",[e._v("GetExpectedDelegationAmount")]),e._v(" iterates over each (denom, delegate)\npair and checks for how much OSMO we have delegated. The difference\nfrom the current balance to what is expected is burned / minted to\nmatch with the expected.")]),e._v(" "),s("li",[e._v("A "),s("code",[e._v("messageServer")]),e._v(" method executes the Superfluid delegate message.")]),e._v(" "),s("li",[s("code",[e._v("syntheticLockup")]),e._v(" is used to index bond holders and tracking their\naddresses for reward distribution or potentially slashing purposes.\nThese track whether if your Superfluid stake is currently bonding or\nunbonding.")]),e._v(" "),s("li",[e._v("An "),s("code",[e._v("IntermediaryAccount")]),e._v(" is mostly used for the actual reward\ndistribution or slashing events, and are responsible for\nestablishing the connection between each superfluid staked lock and\ntheir delegation to the validator. These work by transferring the\nsuperfluid OSMO to their respective delegators. Rewards are linearly\nscaled based on how much you have locked for a given (validator,\ndenom) pair. Rewards are first moved to the incentive gauges, then\ndistributed from the gauges. In this way, we're using the existing\ngauge reward system for paying out superfluid staking rewards and\ntracking the amount you have superfluidly staked using the lockup\nmodule.")]),e._v(" "),s("li",[e._v("Rewards are distributed per epoch, which is currently a day.\n"),s("code",[e._v("abci.go")]),e._v(" checks whether or not the current block is at the\nbeginning of the epoch using "),s("code",[e._v("BeginBlock")]),e._v(".")]),e._v(" "),s("li",[e._v("Superfluid staking will continue to expand to other Osmosis pools\nbased on governance proposals and vote turnouts.")])]),e._v(" "),s("h3",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),s("p",[e._v("If Alice has 500 GAMM tokens bonded to the ATOM <> OSMO, she will have\nthe equivalent value of OSMO minted, delegated to her chosen staker, and\nburned for her each day with Superfluid staking. On the user side, all\nshe has to know is who she wants to delegate her tokens to. In order to\nswitch delegation, she has to unbond her tokens from the pool first and\nthen redeposit. Bob, who has a share of the same liquidity pool before\nSuperfluid Staking went live, also has to re-deposit into the pool for\nthe above process to kickstart.")]),e._v(" "),s("h3",{attrs:{id:"why-mint-osmo-how-is-this-method-safe-and-accurate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#why-mint-osmo-how-is-this-method-safe-and-accurate"}},[e._v("#")]),e._v(" Why mint Osmo? How is this method safe and accurate?")]),e._v(" "),s("p",[e._v("Superfluid staking requires the minting of OSMO because in order to\nstake on the Osmosis chain, OSMO tokens are required as the chosen\ncollateral. Synthetic Osmo is minted here as a representative of the\nvalue of each superfluid staker's liquidity pool tokens.")]),e._v(" "),s("p",[e._v("The pool tokens are acquired by the user from normally staking in a\nliquidity pool. They get minted an amount of OSMO equivalent to the\nvalue of their GAMM pool tokens. This method is accurate because\nquerying the value OSMO every day allows for burning and minting\naccording to the difference in value of OSMO relative to the expected\ndelegation amount (as seen with\n"),s("a",{attrs:{href:"https://github.com/osmosis-labs/osmosis/blob/main/x/superfluid/keeper/stake.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("GetExpectedDelegationAmount"),s("OutboundLink")],1),e._v(").\nIt's like having a price oracle for fairly calculating the amount the\nuser has superfluidly staked.")]),e._v(" "),s("p",[e._v('On epoch (start of every day), we read from the lockup module how much\nGAMM tokens we have locked which acts as an oracle for the\nrepresentative price of the GAMM token shares. The superfluid module has\n"hooks" messages to refresh delegation amounts\n('),s("code",[e._v("RefreshIntermediaryDelegationAmounts")]),e._v(") and to increase delegation on\nlockup ("),s("code",[e._v("IncreaseSuperfluidDelegation")]),e._v("). Then, we see whether or not the\nsuperfluid OSMO currently delegated is worth more or less than this\nexpected delegation amount amount. If the OSMO is worth more, we do\ninstant undelegations and immediately burn the OSMO. If less, we mint\nOSMO and update the amount delegated. A simplified diagram of this whole\nprocess is found below:")]),e._v(" "),s("br"),e._v(" "),s("p",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/osmosis-labs/osmosis/main/x/superfluid/spec/superfluiddiagram.png",height:"300"}})]),e._v(" "),s("br"),e._v(" "),s("p",[e._v("This minting is safe because we strict constrain the permissions of Bank\n(the module that burns and mints OSMO) to do what it's designed to do.\nThe authority is mediated through "),s("code",[e._v("mintOsmoTokensAndDelegate")]),e._v(" and\n"),s("code",[e._v("forceUndelegateAndBurnOsmoTokens")]),e._v(" keeper methods called by the\n"),s("code",[e._v("SuperfluidDelegate")]),e._v(" and "),s("code",[e._v("SuperfluidUndelegate")]),e._v(" message handlers for the\ntokens. The hooks above that increase delegation and refresh delegation\namounts also call this keeper method.")]),e._v(" "),s("p",[e._v("The delegation is then verified to not already be associated with an\nintermediary account (to prevent double-staking), and is always\ndelegated or withdrawn taking into account various multipliers for\nsynthetic OSMO value (its worth with respect to the liquidity pool, and\na risk modifier) to prevent mint inaccuracies. Before minting, we also\ncheck that the message sender is the owner of the locked funds; that the\nlock is not unlocking; is locked for at least the unbonding period, and\nis bonded to a single asset. We also check to see if the lock isn't\nalready in superfluid and that the same lock isn't currently being\nunbonded.")]),e._v(" "),s("p",[e._v("On the end of each epoch, we iterate through all intermediary accounts\nto withdraw delegation rewards they may have received and put it all\ninto the perpetual gauges corresponding to each account for reward\ndelegation.")]),e._v(" "),s("h3",{attrs:{id:"bonding-unbonding-slashing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bonding-unbonding-slashing"}},[e._v("#")]),e._v(" Bonding, unbonding, slashing")]),e._v(" "),s("p",[e._v("Here, we describe how token bonding and unbonding works, and what\nhappens to your superfluid tokens in the case of a slashing event.")]),e._v(" "),s("h3",{attrs:{id:"bonding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bonding"}},[e._v("#")]),e._v(" Bonding")]),e._v(" "),s("p",[e._v("When bonding, your input tokens are locked up and you are given GAMM\npool tokens in exchange. These GAMM pool tokens represent a share of the\ntotal liquidity pool, and allows you to get transaction fees or\nparticipate in external incentive gauge token distributions. When\nbonding, on top of the regular bonding transaction there will also be a\nselection of validators. As stated above, OSMO is also minted and burned\neach day and superfluidly staked to whoever you have chosen to be your\nvalidator. You gain additional APR as a reward for bolstering the\nOsmosis chain's consensus integrity by delegating.")]),e._v(" "),s("h3",{attrs:{id:"unbonding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unbonding"}},[e._v("#")]),e._v(" Unbonding")]),e._v(" "),s("p",[e._v("When unbonding, superfluid tokens get un-delegated. After making sure\nthat the unbond message sender is the owner of their corresponding\nlocked funds, the existing synthetic lockup is deleted and replaced with\na new synthetic lockup for unbonding purposes. The undelegated OSMO is\nthen instantly withdrawn from the intermediate account and validator\nusing the InstantUndelegate function. The OSMO that was originally used\nfor representing your LP shares are burnt. Moves the tracker for\nunbonding, allows the underlying lock to start unlocking if desired")]),e._v(" "),s("h2",{attrs:{id:"concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[e._v("#")]),e._v(" Concepts")]),e._v(" "),s("h3",{attrs:{id:"syntheticlockups"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntheticlockups"}},[e._v("#")]),e._v(" SyntheticLockups")]),e._v(" "),s("p",[e._v("SyntheticLockups are synthetica of PeriodLocks, but different in the\nsense that they store suffix, which is a combination of\nbonding/unbonding status + validator address. This is mainly used to\ntrack whether an individual lock that has been superfluid staked has an\nbonding status or a unbonding status from the staking delegations.")]),e._v(" "),s("h3",{attrs:{id:"intermediary-account"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intermediary-account"}},[e._v("#")]),e._v(" Intermediary Account")]),e._v(" "),s("p",[e._v("Intermediary Accounts establishes the connections between the superfluid\nstaked locks and delegations to the validator. Intermediary accounts\nexists for every denom + validator combination, so that it would group\nlocks with the same denom + validator selection. Superfluid staking a\nlock would mint equivalent amount of OSMO of the lock and send it to the\nintermediary account and the intermediarry accounts would be delegating\nto the specified validator.")]),e._v(" "),s("h3",{attrs:{id:"intermediary-account-connection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intermediary-account-connection"}},[e._v("#")]),e._v(" Intermediary Account Connection")]),e._v(" "),s("p",[e._v("Intermediary Accounts Connection serves the role of tracking the locks\nthat an Intermediary Account is dedicated to.")]),e._v(" "),s("h2",{attrs:{id:"state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[e._v("#")]),e._v(" State")]),e._v(" "),s("h3",{attrs:{id:"superfluid-asset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-asset"}},[e._v("#")]),e._v(" Superfluid Asset")]),e._v(" "),s("p",[e._v("A superfluid asset is a alternative asset (non-OSMO) that is allowed by\ngovernance to be used for staking.")]),e._v(" "),s("p",[e._v("It can only be updated by governance proposals. We validate at proposal\ncreation time that the denom + pool exists. (Are we going to ignore edge\ncases around a reference pool getting deleted it)")]),e._v(" "),s("h3",{attrs:{id:"intermediary-accounts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intermediary-accounts"}},[e._v("#")]),e._v(" Intermediary Accounts")]),e._v(" "),s("p",[e._v("Lots of questions to be answered here")]),e._v(" "),s("h3",{attrs:{id:"dedicated-gauges"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dedicated-gauges"}},[e._v("#")]),e._v(" Dedicated Gauges")]),e._v(" "),s("p",[e._v("Each intermediary account has has dedicated gauge where it sends the\ndelegation rewards to. Gauges are distributing the rewards to end users\nat the end of the epoch.")]),e._v(" "),s("h3",{attrs:{id:"synthetic-lockups-created"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synthetic-lockups-created"}},[e._v("#")]),e._v(" Synthetic Lockups created")]),e._v(" "),s("p",[e._v("At the moment, one lock can only be fully bonded to one validator.")]),e._v(" "),s("h3",{attrs:{id:"osmo-equivalent-multipliers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#osmo-equivalent-multipliers"}},[e._v("#")]),e._v(" Osmo Equivalent Multipliers")]),e._v(" "),s("p",[e._v("The Osmo Equivalent Multiplier for an asset is the multiplier it has for\nits value relative to OSMO.")]),e._v(" "),s("p",[e._v("Different types of assets can have different functions for calculating\ntheir multiplier. We currently support two asset types.")]),e._v(" "),s("ol",[s("li",[e._v("Native Token")])]),e._v(" "),s("p",[e._v("The multiplier for OSMO is alway 1.")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("Gamm LP Shares")])]),e._v(" "),s("p",[e._v("Currently we use the spot price for an asset based on a designated\nosmo-basepair pool of an asset. The multiplier is set once per epoch, at\nthe beginning of the epoch. In the future, we will switch this out to\nuse a TWAP instead.")]),e._v(" "),s("h3",{attrs:{id:"state-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-changes"}},[e._v("#")]),e._v(" State changes")]),e._v(" "),s("p",[e._v("The state of superfluid module state modifiers are classified into below\ncategories.")]),e._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/developing/osmosis-core/modules/07_proposals.html"}},[e._v("Proposals")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/developing/osmosis-core/modules/03_messages.html"}},[e._v("Messages")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/developing/osmosis-core/modules/04_epoch.html"}},[e._v("Epoch")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/developing/osmosis-core/modules/06_hooks.html"}},[e._v("Hooks")])],1)]),e._v(" "),s("h3",{attrs:{id:"messages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messages"}},[e._v("#")]),e._v(" Messages")]),e._v(" "),s("h3",{attrs:{id:"superfluid-delegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-delegate"}},[e._v("#")]),e._v(" Superfluid Delegate")]),e._v(" "),s("p",[e._v("Owners of superfluid asset locks can submit "),s("code",[e._v("MsgSuperfluidDelegate")]),e._v("\ntransactions to delegate the Osmo in their locks to a selected\nvalidator.")]),e._v(" "),s("div",{staticClass:"language-{.go} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type MsgSuperfluidDelegate struct {\n Sender  string\n LockId  uint64\n ValAddr string\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("State Modifications:")])]),e._v(" "),s("ul",[s("li",[e._v("Safety Checks that are being done before running superfluid logic:\n"),s("ul",[s("li",[e._v("Check that "),s("code",[e._v("Sender")]),e._v(" is the owner of "),s("code",[e._v("lock")])]),e._v(" "),s("li",[e._v("Check that "),s("code",[e._v("lock")]),e._v(" corresponds to a single locked asset")]),e._v(" "),s("li",[e._v("Check that "),s("code",[e._v("lock")]),e._v(" is not unlocking")]),e._v(" "),s("li",[e._v("Check that "),s("code",[e._v("lock")]),e._v(" is locked for at least the unbonding period")]),e._v(" "),s("li",[e._v("Check that this "),s("code",[e._v("LockID")]),e._v(" is not already superfluided")]),e._v(" "),s("li",[e._v("Check that the same lock isn't being unbonded")])])]),e._v(" "),s("li",[e._v("Get the "),s("code",[e._v("IntermediaryAccount")]),e._v(" for this lock's "),s("code",[e._v("Denom")]),e._v(" and "),s("code",[e._v("ValAddr")]),e._v("\npair.\n"),s("ul",[s("li",[e._v("Create it + a new gauge for the synthetic denom, if it does not\nyet exist.")])])]),e._v(" "),s("li",[e._v("Create a SyntheticLockup.")]),e._v(" "),s("li",[e._v("Calculate "),s("code",[e._v("Osmo")]),e._v(" to delegate on behalf of this "),s("code",[e._v("lock")]),e._v(", as\n"),s("code",[e._v("Osmo Equivalent Multiplier")]),e._v(" * "),s("code",[e._v("# LP Shares")]),e._v(" *\n"),s("code",[e._v("Risk Adjustment Factor")]),e._v(" "),s("ul",[s("li",[e._v("If this amount is less than 0.000001 "),s("code",[e._v("Osmo")]),e._v(" ("),s("code",[e._v("1 uosmo")]),e._v(") reject\nthe transaction, as it would be delegating "),s("code",[e._v("0 uosmo")])])])]),e._v(" "),s("li",[e._v("Mint "),s("code",[e._v("Osmo")]),e._v(" to match this amount and send to "),s("code",[e._v("IntermediaryAccount")])]),e._v(" "),s("li",[e._v("Create a delegation from "),s("code",[e._v("IntermediaryAccount")]),e._v(" to "),s("code",[e._v("Validator")])]),e._v(" "),s("li",[e._v("Create a new perpetual "),s("code",[e._v("Gauge")]),e._v(" for distributing staking payouts to\nlocks of a synethic asset based on this "),s("code",[e._v("Validator")]),e._v(" / "),s("code",[e._v("Denom")]),e._v(" pair.")]),e._v(" "),s("li",[e._v("Create a connection between this "),s("code",[e._v("lockID")]),e._v(" and this\n"),s("code",[e._v("IntermediaryAccount")])])]),e._v(" "),s("h3",{attrs:{id:"superfluid-undelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-undelegate"}},[e._v("#")]),e._v(" Superfluid Undelegate")]),e._v(" "),s("div",{staticClass:"language-{.go} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type MsgSuperfluidUndelegate struct {\n Sender string\n LockId uint64\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[s("strong",[e._v("State Modifications:")])]),e._v(" "),s("ul",[s("li",[e._v("Lookup "),s("code",[e._v("lock")]),e._v(" by "),s("code",[e._v("LockID")])]),e._v(" "),s("li",[e._v("Check that "),s("code",[e._v("Sender")]),e._v(" is the owner of "),s("code",[e._v("lock")])]),e._v(" "),s("li",[e._v("Get the "),s("code",[e._v("IntermediaryAccount")]),e._v(" for this "),s("code",[e._v("lockID")])]),e._v(" "),s("li",[e._v("Delete the "),s("code",[e._v("SyntheticLockup")]),e._v(" associated to this "),s("code",[e._v("lockID")]),e._v(" + "),s("code",[e._v("ValAddr")]),e._v("\npair")]),e._v(" "),s("li",[e._v("Create a new "),s("code",[e._v("SyntheticLockup")]),e._v(" which is unbonding")]),e._v(" "),s("li",[e._v("Calculate the amount of "),s("code",[e._v("Osmo")]),e._v(" delegated on behalf of this "),s("code",[e._v("lock")]),e._v(" as\n"),s("code",[e._v("Osmo Equivalent Multipler")]),e._v(" * "),s("code",[e._v("# LP Shares")]),e._v(" *\n"),s("code",[e._v("Risk Adjustment Factor")]),e._v(" "),s("ul",[s("li",[e._v("If this amount is less than 0.000001 "),s("code",[e._v("Osmo")]),e._v(", there is no\ndelegated "),s("code",[e._v("Osmo")]),e._v(" to undelegate and burn")])])]),e._v(" "),s("li",[e._v("Use "),s("code",[e._v("InstantUndelegate")]),e._v(" to instantly remove delegation from\n"),s("code",[e._v("IntermediaryAccount")]),e._v(" to "),s("code",[e._v("Validator")])]),e._v(" "),s("li",[e._v("Immediately burn undelegated "),s("code",[e._v("Osmo")])]),e._v(" "),s("li",[e._v("Delete the connection between "),s("code",[e._v("lockID")]),e._v(" and "),s("code",[e._v("IntermediaryAccount")])])]),e._v(" "),s("h3",{attrs:{id:"lock-and-superfluid-delegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock-and-superfluid-delegate"}},[e._v("#")]),e._v(" Lock and Superfluid Delegate")]),e._v(" "),s("div",{staticClass:"language-{.go} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type MsgLockAndSuperfluidDelegate struct {\n Sender string\n Coins sdk.Coins\n ValAddr string\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("This is effectively a multimsg tx of lockup's "),s("code",[e._v("MsgLockTokens")]),e._v(" and\nsuperfluid's "),s("code",[e._v("MsgSuperfluidDelegate")]),e._v(", but it is implemented as a single\nmsg, because currently we don't have a way of passing the lockid\noutputted by "),s("code",[e._v("MsgLockTokens")]),e._v(" as an input into the\n"),s("code",[e._v("MsgSuperfluidDelegate")]),e._v(" prior to execution.")]),e._v(" "),s("p",[s("strong",[e._v("State Modifications:")])]),e._v(" "),s("ul",[s("li",[e._v("Ensures that Coins has a length of only 1 (we use sdk.Coins instead\nof sdk.Coin in order to allow more flexibility in the future)")]),e._v(" "),s("li",[e._v("Creates a lockup with Coins of a lock duration equivalent to the\nunstaking period from the staking module\n"),s("ul",[s("li",[e._v("Uses the lockup module's MsgServer")])])]),e._v(" "),s("li",[e._v("Gets the lock id of the created lock, and uses it generate and\nexecute a MsgSuperfluidDelegate message\n"),s("ul",[s("li",[e._v("Uses the SuperfluidDelegate function on this msg server")])])])]),e._v(" "),s("h3",{attrs:{id:"superfluid-unbond-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-unbond-lock"}},[e._v("#")]),e._v(" Superfluid Unbond Lock")]),e._v(" "),s("div",{staticClass:"language-{.go} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type MsgSuperfluidUnbondLock struct {\n Sender string\n LockId uint64\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("This message does all the functionality of "),s("code",[e._v("MsgSuperfluidUndelegate")]),e._v(" but\nalso starts unbonding the underlying lock as well, allowing both the\nunstaking and unlocking to complete at the same time. Without using this\nfunction, a user will not be able to start unbonding their underlying\nlock until after the the unstaking has finished.")]),e._v(" "),s("p",[s("strong",[e._v("State Modifications:")])]),e._v(" "),s("ul",[s("li",[e._v("This runs the functionality of "),s("code",[e._v("MsgSuperfluidUndelegate")])]),e._v(" "),s("li",[e._v("It then triggers a force unbond of the underlying lock id")])]),e._v(" "),s("h2",{attrs:{id:"epochs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#epochs"}},[e._v("#")]),e._v(" Epochs")]),e._v(" "),s("p",[e._v("Overall Epoch sequence")]),e._v(" "),s("ul",[s("li",[e._v("Epoch N ends, during AfterEpochEnd:\n"),s("ul",[s("li",[e._v("Distribute gauge rewards for all non-superfluid gauges")]),e._v(" "),s("li",[e._v("Mint new tokens\n"),s("ul",[s("li",[e._v("Issue new Osmo, and send to various modules (distribution,\nincentives, etc.)")]),e._v(" "),s("li",[e._v("25% currently goes to "),s("code",[e._v("x/distribution")]),e._v(" which funds "),s("code",[e._v("Staking")]),e._v("\nand "),s("code",[e._v("Superfluid")]),e._v(" rewards")]),e._v(" "),s("li",[e._v("Rewards for "),s("code",[e._v("Superfluid")]),e._v(" are based on the just updated\ndelegation amounts, and queued for payout in the next epoch")])])])])]),e._v(" "),s("li",[e._v("BeginBlock for Distribution\n"),s("ul",[s("li",[e._v("Distribute staking rewards to all of the 'lazy accounting'\naccumulators. (F1)")])])]),e._v(" "),s("li",[e._v("Epoch N ends, during BeginBlock for superfluid "),s("strong",[e._v("After")]),e._v("\nAfterEpochEnd:\n"),s("ul",[s("li",[e._v("Claim staking rewards for every "),s("code",[e._v("Intermediary Account")]),e._v(", put them\ninto gauges.")]),e._v(" "),s("li",[e._v("Distribute Superfluid staking rewards from gauges to bonded\nSynthetic Lock owners")]),e._v(" "),s("li",[e._v("Update "),s("code",[e._v("Osmo Equivalent Multiplier")]),e._v(" value for each LP token\n"),s("ul",[s("li",[e._v("(Currently spot price at epoch)")])])]),e._v(" "),s("li",[e._v("Refresh delegation amounts for all "),s("code",[e._v("Intermediary Accounts")]),e._v(" "),s("ul",[s("li",[e._v("Calculate the expected delegation for this account as\n"),s("code",[e._v("Osmo Equivalent Multipler")]),e._v(" "),s("em",[s("code",[e._v("# LP Shares")])]),e._v(" "),s("code",[e._v("Risk adjustment")]),e._v(" "),s("ul",[s("li",[e._v("If this is less than 0.000001 "),s("code",[e._v("Osmo")]),e._v(" it will be rounded\nto 0")])])]),e._v(" "),s("li",[e._v("Lookup current delegation amount for "),s("code",[e._v("Intermediary Account")]),e._v(" "),s("ul",[s("li",[e._v("If there is no delegation, treat the current delegation\nas 0")])])]),e._v(" "),s("li",[e._v("If expected amount > current delegation:\n"),s("ul",[s("li",[e._v("Mint new "),s("code",[e._v("Osmo")]),e._v(" and "),s("code",[e._v("Delegate")]),e._v(" to "),s("code",[e._v("Validator")])])])]),e._v(" "),s("li",[e._v("If expected amount < current delegation:\n"),s("ul",[s("li",[e._v("Use "),s("code",[e._v("InstantUndelegate")]),e._v(" and burn the received "),s("code",[e._v("Osmo")])])])])])])])])]),e._v(" "),s("h2",{attrs:{id:"staking-power-updates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#staking-power-updates"}},[e._v("#")]),e._v(" Staking power updates")]),e._v(" "),s("p",[e._v("We need to be concerned with how/when validators enter and leave the\nactive set.")]),e._v(" "),s("p",[e._v("We expect the guarantee that there is an Intermediary account for every\n(active validator, superfluid denom) pair, and every (unbonding\nvalidator, superfluid denom) pair. (TODO: Where/why)")]),e._v(" "),s("p",[e._v("We also want to avoid resource exhaustion attacks. We relegate concerns\naround upper-bounding the number of active + unbonding validators to the\nstaking module. This module is liable to potentially cause a 100-1000x\namplification factor on this workload.")]),e._v(" "),s("h3",{attrs:{id:"how-we-handle-it-now"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-we-handle-it-now"}},[e._v("#")]),e._v(" How we handle it now")]),e._v(" "),s("ul",[s("li",[e._v("Intermediary accounts are not created on SetSuperfluidAsset")]),e._v(" "),s("li",[e._v("They are created at-time-of-need on MsgSuperfluidDelegate")]),e._v(" "),s("li",[e._v("Concerns: What happens if you delegate to an unbonding or jailed\nvalidator. Note: Isn't it same as normal delegation for unbonding\nvalidator?")])]),e._v(" "),s("h2",{attrs:{id:"other-module-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-module-hooks"}},[e._v("#")]),e._v(" Other Module Hooks")]),e._v(" "),s("p",[e._v("-----;")]),e._v(" "),s("p",[e._v('In this section we describe the "hooks" that '),s("code",[e._v("superfluid")]),e._v(" module\nreceives from other modules.")]),e._v(" "),s("h3",{attrs:{id:"afterepochend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afterepochend"}},[e._v("#")]),e._v(" AfterEpochEnd")]),e._v(" "),s("p",[e._v("On AfterEpochEnd, we iterate through all existing intermediary accounts\nand withdraw delegation rewards they have received. Then we send the\ncollective rewards to the perpetual gauge corresponding to the\nintermediary account. Then we update OSMO backing per share for the\nspecific pool. After the update, iteration through all intermediate\naccounts happen, undelegating and bonding existing delegations for all\nsuperfluid staking and use the updated spot price at epoch time to mint\nand delegate.")]),e._v(" "),s("h3",{attrs:{id:"afteraddtokenstolock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afteraddtokenstolock"}},[e._v("#")]),e._v(" AfterAddTokensToLock")]),e._v(" "),s("p",[e._v("When a token is locked, we first check if the corresponding lock is\ncurrently in the state of superfluid delegation. If it is, we run the\nlogic to add delegation via intermediary account.")]),e._v(" "),s("h3",{attrs:{id:"beforevalidatorslashed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforevalidatorslashed"}},[e._v("#")]),e._v(" BeforeValidatorSlashed")]),e._v(" "),s("p",[e._v("Slashes the synthetic lockups and native lockups that is connected to\nthe to be slashed validator.")]),e._v(" "),s("h2",{attrs:{id:"proposal-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proposal-hooks"}},[e._v("#")]),e._v(" Proposal Hooks")]),e._v(" "),s("p",[e._v("-----;")]),e._v(" "),s("p",[e._v("In this section we describe the proposals that is associated to\nsuperfluid module.")]),e._v(" "),s("h3",{attrs:{id:"setsuperfluidassetsproposal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setsuperfluidassetsproposal"}},[e._v("#")]),e._v(" SetSuperfluidAssetsProposal")]),e._v(" "),s("p",[e._v("Enable multiple superfluid assets to be used for superfluid staking.")]),e._v(" "),s("h3",{attrs:{id:"removesuperfluidassetsproposal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removesuperfluidassetsproposal"}},[e._v("#")]),e._v(" RemoveSuperfluidAssetsProposal")]),e._v(" "),s("p",[e._v("Disable multiple assets from being used for superfluid staking.")]),e._v(" "),s("h2",{attrs:{id:"events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),s("p",[e._v("-----;")]),e._v(" "),s("h3",{attrs:{id:"messages-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messages-2"}},[e._v("#")]),e._v(" Messages")]),e._v(" "),s("h3",{attrs:{id:"msgsuperfluiddelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msgsuperfluiddelegate"}},[e._v("#")]),e._v(" MsgSuperfluidDelegate")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("superfluid_delegate")]),e._v(" "),s("td",[e._v("lock_id")]),e._v(" "),s("td",[e._v("{lock_id}")])]),e._v(" "),s("tr",[s("td",[e._v("superfluid_delegate")]),e._v(" "),s("td",[e._v("validator")]),e._v(" "),s("td",[e._v("{validator}")])])])]),e._v(" "),s("h3",{attrs:{id:"msgsuperfluidundelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msgsuperfluidundelegate"}},[e._v("#")]),e._v(" MsgSuperfluidUndelegate")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("superfluid_undelegate")]),e._v(" "),s("td",[e._v("lock_id")]),e._v(" "),s("td",[e._v("{lock_id}")])])])]),e._v(" "),s("h3",{attrs:{id:"msgsuperfluidunbondlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msgsuperfluidunbondlock"}},[e._v("#")]),e._v(" MsgSuperfluidUnbondLock")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("superfluid_unbond_lock")]),e._v(" "),s("td",[e._v("lock_id")]),e._v(" "),s("td",[e._v("{lock_id}")])])])]),e._v(" "),s("h3",{attrs:{id:"msglockandsuperfluiddelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msglockandsuperfluiddelegate"}},[e._v("#")]),e._v(" MsgLockAndSuperfluidDelegate")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("lock_tokens")]),e._v(" "),s("td",[e._v("period_lock_id")]),e._v(" "),s("td",[e._v("{periodLockID}")])]),e._v(" "),s("tr",[s("td",[e._v("lock_tokens")]),e._v(" "),s("td",[e._v("owner")]),e._v(" "),s("td",[e._v("{owner}")])]),e._v(" "),s("tr",[s("td",[e._v("lock_tokens")]),e._v(" "),s("td",[e._v("amount")]),e._v(" "),s("td",[e._v("{amount}")])]),e._v(" "),s("tr",[s("td",[e._v("lock_tokens")]),e._v(" "),s("td",[e._v("duration")]),e._v(" "),s("td",[e._v("{duration}")])]),e._v(" "),s("tr",[s("td",[e._v("lock_tokens")]),e._v(" "),s("td",[e._v("unlock_time")]),e._v(" "),s("td",[e._v("{unlockTime}")])]),e._v(" "),s("tr",[s("td",[e._v("message")]),e._v(" "),s("td",[e._v("action")]),e._v(" "),s("td",[e._v("lock_tokens")])]),e._v(" "),s("tr",[s("td",[e._v("message")]),e._v(" "),s("td",[e._v("sender")]),e._v(" "),s("td",[e._v("{owner}")])]),e._v(" "),s("tr",[s("td",[e._v("transfer")]),e._v(" "),s("td",[e._v("recipient")]),e._v(" "),s("td",[e._v("{moduleAccount}")])]),e._v(" "),s("tr",[s("td",[e._v("transfer")]),e._v(" "),s("td",[e._v("sender")]),e._v(" "),s("td",[e._v("{owner}")])]),e._v(" "),s("tr",[s("td",[e._v("transfer")]),e._v(" "),s("td",[e._v("amount")]),e._v(" "),s("td",[e._v("{amount}")])]),e._v(" "),s("tr",[s("td",[e._v("superfluid_delegate")]),e._v(" "),s("td",[e._v("lock_id")]),e._v(" "),s("td",[e._v("{lock_id}")])]),e._v(" "),s("tr",[s("td",[e._v("superfluid_delegate")]),e._v(" "),s("td",[e._v("validator")]),e._v(" "),s("td",[e._v("{validator}")])])])]),e._v(" "),s("h2",{attrs:{id:"proposals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proposals"}},[e._v("#")]),e._v(" Proposals")]),e._v(" "),s("h3",{attrs:{id:"setsuperfluidassetsproposal-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setsuperfluidassetsproposal-2"}},[e._v("#")]),e._v(" SetSuperfluidAssetsProposal")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("set_superfluid_asset")]),e._v(" "),s("td",[e._v("denom")]),e._v(" "),s("td",[e._v("{denom}")])]),e._v(" "),s("tr",[s("td",[e._v("set_superfluid_asset")]),e._v(" "),s("td",[e._v("superfluid_asset_type")]),e._v(" "),s("td",[e._v("{asset_type}")])])])]),e._v(" "),s("h3",{attrs:{id:"removesuperfluidassetsproposal-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removesuperfluidassetsproposal-2"}},[e._v("#")]),e._v(" RemoveSuperfluidAssetsProposal")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Attribute Key")]),e._v(" "),s("th",[e._v("Attribute Value")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("remove_superfluid_asset")]),e._v(" "),s("td",[e._v("denom")]),e._v(" "),s("td",[e._v("{denom}")])])])]),e._v(" "),s("h2",{attrs:{id:"queries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queries"}},[e._v("#")]),e._v(" Queries")]),e._v(" "),s("h3",{attrs:{id:"params"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[e._v("#")]),e._v(" Params")]),e._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ParamsRequest")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ParamsResponse")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// params defines the parameters of the module.")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("Params")]),e._v(" params "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gogoproto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nullable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Params")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("sdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Dec")]),e._v(" minimum_risk_factor "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// serialized as string")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("The params query returns the params for the superfluid module. This\ncurrently contains:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("MinimumRiskFactor")]),e._v(" which is an sdk.Dec that represents the discount\nto apply to all superfluid staked modules when calcultating their\nstaking power. For example, if a specific denom has an OSMO\nequivalent value of 100 OSMO, but the the "),s("code",[e._v("MinimumRiskFactor")]),e._v(" param\nis 0.05, then the denom will only get 95 OSMO worth of staking power\nwhen staked.")])]),e._v(" "),s("h3",{attrs:{id:"assettype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assettype"}},[e._v("#")]),e._v(" AssetType")]),e._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AssetTypeRequest")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" denom "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AssetTypeResponse")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("SuperfluidAssetType")]),e._v(" asset_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("enum")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SuperfluidAssetType")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  SuperfluidAssetTypeNative "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  SuperfluidAssetTypeLPShare "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v('The AssetType query returns what type of superfluid asset a denom is.\nAssetTypes are meant for when we support more types of assets for\nsuperfluid staking than just LP shares. Each AssetType has a different\nalgorithm used to get its "Osmo equivalent value".')]),e._v(" "),s("p",[e._v("We represent different types of superfluid assets as different enums.\nCurrently, only enum "),s("code",[e._v("1")]),e._v(" is actually used. Enum value "),s("code",[e._v("0")]),e._v(" is reserved\nfor the Native staking token for if we deprecate the legacy staking\nworkflow to have native staking also go through the superfluid module.\nIn the future, more enums will be added.")]),e._v(" "),s("p",[e._v("If this query errors, that means that a denom is not allowed to be used\nfor superfluid staking.")]),e._v(" "),s("h3",{attrs:{id:"allassets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#allassets"}},[e._v("#")]),e._v(" AllAssets")]),e._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AllAssetsRequest")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AllAssetsResponse")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("repeated")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("SuperfluidAsset")]),e._v(" assets "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gogoproto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nullable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SuperfluidAsset")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" denom "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("SuperfluidAssetType")]),e._v(" asset_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("This parameterless query returns a list of all the superfluid staking\ncompatible assets. The return value includes a list of SuperfluidAssets,\nwhich are pairs of "),s("code",[e._v("denom")]),e._v(" with "),s("code",[e._v("SuperfluidAssetType")]),e._v(" which was\ndescribed in the previous section.")]),e._v(" "),s("p",[e._v("This query does not currently support pagination, but may in the future.")]),e._v(" "),s("h3",{attrs:{id:"assetmultiplier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assetmultiplier"}},[e._v("#")]),e._v(" AssetMultiplier")]),e._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AssetMultiplierRequest")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" denom "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AssetMultiplierResponse")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("OsmoEquivalentMultiplierRecord")]),e._v(" osmo_equivalent_multiplier "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("OsmoEquivalentMultiplierRecord")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("int64")]),e._v(" epoch_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" denom "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" multiplier "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("This query allows you to find the multiplier factor on a specific denom.\nThe Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo\nworth we treat a denom as having, for all of epoch N. For now, this is\nthe spot price at the last epoch boundary, and this is reset every\nepoch. We currently don't store historical multipliers, so the epoch\nparameter is kind of meaningless for now.")]),e._v(" "),s("p",[e._v("To calculate the staking power of the denom, one needs to multiply the\namount of the denom with "),s("code",[e._v("OsmoEquivalentMultipler")]),e._v(" from this query with\nthe "),s("code",[e._v("MinimumRiskFactor")]),e._v(" from the Params query endpoint.")]),e._v(" "),s("p",[s("code",[e._v("staking_power = amount * OsmoEquivalentMultipler * MinimumRiskFactor")])]),e._v(" "),s("h3",{attrs:{id:"connectedintermediaryaccount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connectedintermediaryaccount"}},[e._v("#")]),e._v(" ConnectedIntermediaryAccount")]),e._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ConnectedIntermediaryAccountRequest")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint64")]),e._v(" lock_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ConnectedIntermediaryAccountResponse")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[e._v("SuperfluidIntermediaryAccountInfo")]),e._v(" account "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("message")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SuperfluidIntermediaryAccount")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" denom "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" val_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint64")]),e._v(" gauge_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// perpetual gauge for rewards distribution")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v('Every superfluid denom and validator pair has an associated\n"intermediary account", which does the actual delegation. This query\nhelps find the superfluid intermediary account for any superfluid\nposition.')]),e._v(" "),s("p",[e._v("That "),s("code",[e._v("lock_id")]),e._v(" parameter passed in is the underlying lock id for the\nsuperfluid, NOT the synthetic lock id.")]),e._v(" "),s("p",[e._v("This query can be used to find the validator a superfluid lock is\ndelegated to. The "),s("code",[e._v("gauge_id")]),e._v(" also refers to the perpetual gauge that is\nused to pay out the superfluid positions associated with this\nintermediary account.")]),e._v(" "),s("h3",{attrs:{id:"allintermediaryaccounts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#allintermediaryaccounts"}},[e._v("#")]),e._v(" AllIntermediaryAccounts")]),e._v(" "),s("div",{staticClass:"language-{.protobuf} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("message AllIntermediaryAccountsRequest {\n  cosmos.base.query.v1beta1.PageRequest pagination = 1;\n};\n\nmessage AllIntermediaryAccountsResponse {\n  repeated SuperfluidIntermediaryAccountInfo accounts = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("This query returns a list of all superfluid intermediary accounts. It\nsupports pagination.")]),e._v(" "),s("h3",{attrs:{id:"superfluiddelegationamount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluiddelegationamount"}},[e._v("#")]),e._v(" SuperfluidDelegationAmount")]),e._v(" "),s("div",{staticClass:"language-{.protobuf} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("message SuperfluidDelegationAmountRequest {\n  string delegator_address = 1;\n  string validator_address = 2;\n  string denom = 3;\n}\n\nmessage SuperfluidDelegationAmountResponse {\n  repeated cosmos.base.v1beta1.Coin amount = 1 [];\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("This query returns the amount of underlying denom (i.e. lp share) for a\ntriplet of delegator, validator, and denom.")]),e._v(" "),s("h3",{attrs:{id:"superfluiddelegationsbydelegator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluiddelegationsbydelegator"}},[e._v("#")]),e._v(" SuperfluidDelegationsByDelegator")]),e._v(" "),s("div",{staticClass:"language-{.protobuf} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("message SuperfluidDelegationsByDelegatorRequest {\n  string delegator_address = 1;\n}\n\nmessage SuperfluidDelegationsByDelegatorResponse {\n  repeated SuperfluidDelegationRecord superfluid_delegation_records = 1;\n  repeated cosmos.base.v1beta1.Coin total_delegated_coins = 2;\n}\n\nmessage SuperfluidDelegationRecord {\n  string delegator_address = 1;\n  string validator_address = 2;\n  cosmos.base.v1beta1.Coin delegation_amount = 3;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("This query returns a list of all the superfluid delegations of a\nspecific delegator. The return value includes, the validator delgated to\nand the delegated coins (both denom and amount).")]),e._v(" "),s("p",[e._v("The return value of the query also includes the "),s("code",[e._v("total_delegated_coins")]),e._v("\nwhich is the sum of all the delegations of that validator.")]),e._v(" "),s("p",[e._v("This query does require iteration that is linear with the number of\ndelegations a delegator has made, but for now until we support many\nsuperfluid denoms, should be relatively bounded. Once that increases, we\nwill need to support pagination.")]),e._v(" "),s("h3",{attrs:{id:"superfluiddelegationsbyvalidatordenom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluiddelegationsbyvalidatordenom"}},[e._v("#")]),e._v(" SuperfluidDelegationsByValidatorDenom")]),e._v(" "),s("div",{staticClass:"language-{.protobuf} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("message SuperfluidDelegationsByValidatorDenomRequest {\n  string validator_address = 1;\n  string denom = 2;\n}\n\nmessage SuperfluidDelegationsByValidatorDenomResponse {\n  repeated SuperfluidDelegationRecord superfluid_delegation_records = 1;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("This query returns a list of all superfluid delegations that are with a\nvalidator / superfluid denom pair. This query requires a lot of\niteration and should be used sparingly. We will need to add pagination\nto make this usable.")]),e._v(" "),s("h3",{attrs:{id:"estimatesuperfluiddelegatedamountbyvalidatordenom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#estimatesuperfluiddelegatedamountbyvalidatordenom"}},[e._v("#")]),e._v(" EstimateSuperfluidDelegatedAmountByValidatorDenom")]),e._v(" "),s("div",{staticClass:"language-{.protobuf} line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("message EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {\n  string validator_address = 1;\n  string denom = 2;\n}\n\nmessage EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {\n  repeated cosmos.base.v1beta1.Coin total_delegated_coins = 1;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("This query returns the total amount of delegated coins for a validator /\nsuperfluid denom pair. This query does NOT involve iteration, so should\nbe used instead of the above "),s("code",[e._v("SuperfluidDelegationsByValidatorDenom")]),e._v('\nwhenever possible. It is called an "Estimate" because it can have some\nslight rounding errors, due to conversions between sdk.Dec and\nsdk.Int", but for the most part it should be very close to the sum of\nthe results of the previous query.')]),e._v(" "),s("h2",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),s("p",[e._v("The superfluid module contains the following parameters:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Key")]),e._v(" "),s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Example")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("minimum_risk_factor")]),e._v(" "),s("td",[e._v("decimal")]),e._v(" "),s("td",[e._v("0.01")])])])]),e._v(" "),s("h2",{attrs:{id:"slashing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slashing"}},[e._v("#")]),e._v(" Slashing")]),e._v(" "),s("p",[e._v("Slashing works by gathering all accounts who were superfluidly staking\nand delegated to the violating validator and slashing their underlying\nlock collateral. The amount of tokens to slash are first calculated then\nremoved from the underlying and synthetic lock. Therefore, it is\nimportant to select a reputable or reliable validator as to minimize\nslashing risks on your tokens. At the moment we are slashing at latest\nprice rather than block height price. All slashed tokens go to the\ncommunity pool.")]),e._v(" "),s("p",[e._v("We first get a hook from the staking module, marking that a validator is\nabout to be slashed at a slashFactor of "),s("code",[e._v("f")]),e._v(", for an infraction at height\n"),s("code",[e._v("h")]),e._v(".")]),e._v(" "),s("p",[e._v("The staking module handles slashing every delegation to that validator,\nwhich will handle slashing the delegation from every intermediary\naccount. However, it is up to the superfluid module to then:")]),e._v(" "),s("ul",[s("li",[e._v("Slash every constituent superfluid staking position for this\nvalidator.")]),e._v(" "),s("li",[e._v("Slash every unbonding superfluid staking position to this validator.")])]),e._v(" "),s("p",[e._v("We do this by:")]),e._v(" "),s("ul",[s("li",[e._v("Collect all intermediate accounts to this validator")]),e._v(" "),s("li",[e._v("For each IA, iterate over every lock to the underlying native denom.")]),e._v(" "),s("li",[e._v("If the lock has a synthetic lockup, it gets slashed.")]),e._v(" "),s("li",[e._v("The slash works by calculating the amount of tokens to slash.")]),e._v(" "),s("li",[e._v("It removes these from the underlying lock and the synthetic lock.")]),e._v(" "),s("li",[e._v("These coins are moved to the community pool.")])]),e._v(" "),s("h3",{attrs:{id:"nuances"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nuances"}},[e._v("#")]),e._v(" Nuances")]),e._v(" "),s("ul",[s("li",[e._v("Slashed tokens go to the community pool, rather than being burned as\nin staking.")]),e._v(" "),s("li",[e._v("We slash every unbonding, rather than just unbondings that started\nafter the infraction height.")]),e._v(" "),s("li",[e._v('We can "overslash" relative to the staking module. (For a slash\nfactor of 5%, the staking module can often burn <5% of active\ndelegation, but superfluid will always slash 5%)')])]),e._v(" "),s("p",[e._v("We slash every unbonding, purely because lockup module tracks things by\nunbonding start time, whereas staking/slashing tracks things by height\nwe begin unbonding at. Thus we get a problem that we cannot convert\nbetween these cleanly. Really there should be a storage of all\nhistorical block height <> block times for everything in the unbonding\nperiod, but this is not considered a near-term problem.")]),e._v(" "),s("h3",{attrs:{id:"correcting-overslashing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#correcting-overslashing"}},[e._v("#")]),e._v(" Correcting overslashing")]),e._v(" "),s("p",[e._v("The overslashing possibility stems from a problem in the SDKs slashing\nmodule, that really is a bug there, and superfluid is doing the correct\nthing. "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/1440",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/cosmos/cosmos-sdk/issues/1440"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Basically, slashes to unbondings and redelegations can lower the amount\nthat gets slashed from live delegations in the staking module today.")]),e._v(" "),s("p",[e._v("It turns out this edge case, where superfluid's intermediate account can\nhave more delegation than expected from its underlying collateral, is\nalready safely handled by the Superfluid refreshing logic.")]),e._v(" "),s("p",[e._v("The refreshing logic checks the total amount of tokens in locks to this\ndenom (Reading from the lockup accumulation store), calculates how many\nosmo thats worth at the epochs new osmo worth for that asset, and then\nuses that. Thus this safely handles this edge case, as it uses the new\n'live' lockup amount.")]),e._v(" "),s("h2",{attrs:{id:"minting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minting"}},[e._v("#")]),e._v(" Minting")]),e._v(" "),s("p",[e._v("Superfluid module has the ability to arbitrarily mint and burn Osmo\nthrough the "),s("code",[e._v("bank")]),e._v(" module. This is potentially dangerous so we strictly\nconstrain it's ability to do so. This authority is mediated through the\n"),s("code",[e._v("mintOsmoTokensAndDelegate")]),e._v(" and "),s("code",[e._v("forceUndelegateAndBurnOsmoTokens")]),e._v("\nkeeper methods, which are in turn called by message handlers\n("),s("code",[e._v("SuperfluidDelegate")]),e._v(" and "),s("code",[e._v("SuperfluidUndelegate")]),e._v(") as well as by hooks on\nEpoch ("),s("code",[e._v("RefreshIntermediaryDelegationAmounts")]),e._v(") and Lockup\n("),s("code",[e._v("IncreaseSuperfluidDelegation")]),e._v(")")]),e._v(" "),s("h3",{attrs:{id:"invariant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invariant"}},[e._v("#")]),e._v(" Invariant")]),e._v(" "),s("p",[e._v("Each of these mechanisms maintains a local invariant between the amount\nof Osmo minted and delegated by the "),s("code",[e._v("IntermediaryAccount")]),e._v(", and the\nquantity of the underlying asset held by locks associated to the\naccount, modified by "),s("code",[e._v("OsmoEquivalentMultiplier")]),e._v(" and "),s("code",[e._v("RiskAdjustment")]),e._v(" for\nthe underlying asset. Namely that total minted/delegated =\n"),s("code",[e._v("GetTotalSyntheticAssetsLocked")]),e._v(" * "),s("code",[e._v("GetOsmoEquivalentMultiplier")]),e._v(" *\n"),s("code",[e._v("GetRiskAdjustment")])]),e._v(" "),s("p",[e._v("This can be equivalently expressed as "),s("code",[e._v("GetExpectedDelegationAmount")]),e._v("\nbeing equal to the actual delegation amount.")]),e._v(" "),s("h2",{attrs:{id:"message-handlers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message-handlers"}},[e._v("#")]),e._v(" Message Handlers")]),e._v(" "),s("h3",{attrs:{id:"superfluiddelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluiddelegate"}},[e._v("#")]),e._v(" SuperfluidDelegate")]),e._v(" "),s("p",[e._v("In a "),s("code",[e._v("SuperfluidDelegate")]),e._v(" transaction, we first verify that this lock is\nnot already associated to an "),s("code",[e._v("IntermediaryAccount")]),e._v(", and then use\n"),s("code",[e._v("mintOsmoTokenAndDelegate")]),e._v(" to properly balance the resulting change in\n"),s("code",[e._v("GetExpectedDelegationAmount")]),e._v(" from the increase in\n"),s("code",[e._v("GetTotalSyntheticAssetsLocked")]),e._v(". i.e. we mint and delegate:\n"),s("code",[e._v("GetOsmoEquivalentMultiplier")]),e._v(" * "),s("code",[e._v("GetRiskAdjustment")]),e._v(" *\n"),s("code",[e._v("lock.Coins.Amount")]),e._v(" new Osmo tokens.")]),e._v(" "),s("h3",{attrs:{id:"superfluidundelegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluidundelegate"}},[e._v("#")]),e._v(" SuperfluidUndelegate")]),e._v(" "),s("p",[e._v("When a user submits a transaction to unlock their asset the invariant is\nmaintained by using "),s("code",[e._v("forceUndelegateAndBurnOsmoTokens")]),e._v(" to remove an\namount of Osmo equal to "),s("code",[e._v("lockedCoin.Amount")]),e._v(" *\n"),s("code",[e._v("GetOsmoEquivalentMultiplier")]),e._v(" * "),s("code",[e._v("GetRiskAdjustment")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"superfluid-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#superfluid-hooks"}},[e._v("#")]),e._v(" Superfluid Hooks")]),e._v(" "),s("h3",{attrs:{id:"refreshintermediarydelegationamounts-afterepochend-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#refreshintermediarydelegationamounts-afterepochend-hook"}},[e._v("#")]),e._v(" RefreshIntermediaryDelegationAmounts (AfterEpochEnd Hook)")]),e._v(" "),s("p",[e._v("In the "),s("code",[e._v("RefreshIntermediaryDelegationAmounts")]),e._v(" method, calls are made to\n"),s("code",[e._v("mintOsmoTokensAndDelegate")]),e._v(" or "),s("code",[e._v("forceUndelegateAndBurnOsmoTokens")]),e._v(" to\nadjust the real delegation up or down to match\n"),s("code",[e._v("GetExpectedDelegationAmount")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"increasesuperfluiddelegation-afteraddtokenstolock-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#increasesuperfluiddelegation-afteraddtokenstolock-hook"}},[e._v("#")]),e._v(" IncreaseSuperfluidDelegation (AfterAddTokensToLock Hook)")]),e._v(" "),s("p",[e._v("This is called as a result of a user adding more assets to a lock that\nhas already been associated to an "),s("code",[e._v("IntermediaryAccount")]),e._v(". The invariant\nis maintained by using "),s("code",[e._v("mintOsmoTokenAndDelegate")]),e._v(" to match the amount of\nnew asset locked * "),s("code",[e._v("GetOsmoEquivalentMultiplier")]),e._v(" * "),s("code",[e._v("GetRiskAdjustment")]),e._v("\nfor the underlying asset.")]),e._v(" "),s("h3",{attrs:{id:"slashlockupsforvalidatorslash-beforevalidatorslashed-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slashlockupsforvalidatorslash-beforevalidatorslashed-hook"}},[e._v("#")]),e._v(" SlashLockupsForValidatorSlash (BeforeValidatorSlashed Hook)")]),e._v(" "),s("p",[e._v("During slashing the invariant is likely to be temporraily broken if the\nreferenced validator has any unbonding delegations. These unbonding\ndelegations are slashed first, which means that the amount delegated by\nthe "),s("code",[e._v("IntermediaryAccount")]),e._v(" will be slashed by less than the\n"),s("code",[e._v("SyntheticLock")]),e._v("s held by the account.")]),e._v(" "),s("h2",{attrs:{id:"see-also"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" See Also")]),e._v(" "),s("h3",{attrs:{id:"gettotalsyntheticassetslocked"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gettotalsyntheticassetslocked"}},[e._v("#")]),e._v(" GetTotalSyntheticAssetsLocked")]),e._v(" "),s("p",[e._v("TODO - expand on this Uses "),s("code",[e._v("lockup")]),e._v(" accumulator to find total amount of\nsynthetic locks for a given "),s("code",[e._v("IntermediaryAccount")]),e._v(" (Superfluid Asset +\nValidator pair)")])])}),[],!1,null,null,null);t.default=n.exports}}]);