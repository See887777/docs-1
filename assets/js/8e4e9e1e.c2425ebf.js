"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[8830],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),g=o,d=m["".concat(c,".").concat(g)]||m[g]||p[g]||a;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},73330:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={title:"gRPCurl",sidebar_position:1},s=void 0,i={unversionedId:"grpc/interact-grpc-curl",id:"grpc/interact-grpc-curl",title:"gRPCurl",description:"Interacting with grpcurl",source:"@site/docs/apis/grpc/interact-grpc-curl.mdx",sourceDirName:"grpc",slug:"/grpc/interact-grpc-curl",permalink:"/apis/grpc/interact-grpc-curl",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/apis/grpc/interact-grpc-curl.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"gRPCurl",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Buf Studio",permalink:"/apis/grpc/interact-grpc-buf-studio"},next:{title:"gRPC Go",permalink:"/apis/grpc/interact-grpc-go"}},c={},l=[{value:"Interacting with grpcurl",id:"interacting-with-grpcurl",level:3},{value:"Query for historical state using grpcurl",id:"query-for-historical-state-using-grpcurl",level:4}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"interacting-with-grpcurl"},"Interacting with grpcurl"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/fullstorydev/grpcurl"},"grpcurl")," is like ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," but for gRPC. It is also available as a Go library, but we will use it only as a CLI command for debugging and testing purposes. Follow the instructions in the previous link to install it."),(0,o.kt)("p",null,"Assuming you already installed osmosisd with the ",(0,o.kt)("a",{parentName:"p",href:"../osmosis-core/osmosisd"},"installer"),", you should be able to run the following command to list the Protobuf services available (you can replace ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc.osmosis.zone:9000")," by the gRPC server endpoint of another node such as the testnet, another provider or your own node."),(0,o.kt)("p",null,"Listing all the methods from the mainnet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext grpc.osmosis.zone:9090 list\n")),(0,o.kt)("p",null,"Output will look like: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cosmos.auth.v1beta1.Query\ncosmos.authz.v1beta1.Query\ncosmos.bank.v1beta1.Query\ncosmos.base.reflection.v1beta1.ReflectionService\ncosmos.base.reflection.v2alpha1.ReflectionService\ncosmos.base.tendermint.v1beta1.Service\ncosmos.distribution.v1beta1.Query\ncosmos.evidence.v1beta1.Query\ncosmos.gov.v1beta1.Query\ncosmos.params.v1beta1.Query\ncosmos.slashing.v1beta1.Query\ncosmos.staking.v1beta1.Query\ncosmos.tx.v1beta1.Service\ncosmos.upgrade.v1beta1.Query\ncosmwasm.wasm.v1.Query\ngrpc.reflection.v1alpha.ServerReflection\nibc.applications.interchain_accounts.host.v1.Query\nibc.applications.transfer.v1.Query\nibc.core.channel.v1.Query\nibc.core.client.v1.Query\nibc.core.connection.v1.Query\nosmosis.epochs.v1beta1.Query\nosmosis.gamm.v1beta1.Query\nosmosis.incentives.Query\nosmosis.lockup.Query\nosmosis.mint.v1beta1.Query\nosmosis.poolincentives.v1beta1.Query\nosmosis.superfluid.Query\nosmosis.tokenfactory.v1beta1.Query\nosmosis.twap.v1beta1.Query\nosmosis.txfees.v1beta1.Query\ntestdata.Query\n")),(0,o.kt)("p",null,"You should see a list of gRPC services, like ",(0,o.kt)("inlineCode",{parentName:"p"},"cosmos.bank.v1beta1.Query"),". This is called reflection, which is a Protobuf endpoint returning a description of all available endpoints. Each of these represents a different Protobuf service, and each service exposes multiple RPC methods you can query against."),(0,o.kt)("p",null,"In order to get a description of the service you can run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl  -plaintext \\\n    grpc.osmosis.zone:9090 \\\n    describe osmosis.gamm.v1beta1.Query               \n")),(0,o.kt)("p",null,"It's also possible to execute an RPC call to query the node for information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext grpc.dev-osmosis.zone:443 osmosis.gamm.v1beta1.Query.Pools\n")),(0,o.kt)("p",null,"The list of all available gRPC query endpoints and API exploration is possible with the help of buf studio. "),(0,o.kt)("h4",{id:"query-for-historical-state-using-grpcurl"},"Query for historical state using grpcurl"),(0,o.kt)("p",null,"You may also query for historical data by passing some ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md"},"gRPC metadata")," to the query: the ",(0,o.kt)("inlineCode",{parentName:"p"},"x-cosmos-block-height")," metadata should contain the block to query. Using grpcurl as above, the command looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'grpcurl \\\n    -plaintext \\\n    -H "x-cosmos-block-height: 6312618" \\\n    -d \'{"address":"osmo19a7pmytd9vk26l57q8chacuprsmx05g23mg6yc"}\' \\\n    grpc.osmosis.zone:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n')),(0,o.kt)("p",null,"Note: This endpoint might change to  grpc.osmosis.zone:443 in the near future. "),(0,o.kt)("p",null,"Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response."))}p.isMDXComponent=!0}}]);