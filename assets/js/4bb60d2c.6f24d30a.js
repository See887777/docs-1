"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[4233],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>p});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=s.createContext({}),u=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return s.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,g=d["".concat(l,".").concat(p)]||d[p]||c[p]||i;return t?s.createElement(g,o(o({ref:n},m),{},{components:t})):s.createElement(g,o({ref:n},m))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var u=2;u<i;u++)o[u]=t[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},37731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var s=t(87462),a=(t(67294),t(3905));const i={},o="Multisig",r={unversionedId:"keys/multisig",id:"keys/multisig",title:"Multisig",description:"A multisig account is an Osmosis account with a special key that can require more than one signature to sign transactions. This can be useful for increasing the security of the account or for requiring the consent of multiple parties to make transactions. Multisig accounts can be created by specifying:",source:"@site/docs/osmosis-core/keys/multisig.md",sourceDirName:"keys",slug:"/keys/multisig",permalink:"/osmosis-core/keys/multisig",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-core/keys/multisig.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic Key Management",permalink:"/osmosis-core/keys/keys-cli"},next:{title:"Using TMKMS",permalink:"/osmosis-core/keys/tmkms"}},l={},u=[{value:"Generate a Multisig key",id:"generate-a-multisig-key",level:2},{value:"Signing a transaction",id:"signing-a-transaction",level:2},{value:"Step 1: Create the multisig key",id:"step-1-create-the-multisig-key",level:3},{value:"Step 2: Create the multisig transaction",id:"step-2-create-the-multisig-transaction",level:3},{value:"Step 3: Sign individually",id:"step-3-sign-individually",level:3},{value:"Step 4: Create multisignature",id:"step-4-create-multisignature",level:3},{value:"Step 5: Broadcast transaction",id:"step-5-broadcast-transaction",level:3}],m={toc:u};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multisig"},"Multisig"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"multisig account")," is an Osmosis account with a special key that can require more than one signature to sign transactions. This can be useful for increasing the security of the account or for requiring the consent of multiple parties to make transactions. Multisig accounts can be created by specifying:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"threshold number of signatures required"),(0,a.kt)("li",{parentName:"ul"},"the public keys involved in signing")),(0,a.kt)("p",null,"To sign with a multisig account, the transaction must be signed individually by the different keys specified for the account. Then, the signatures will be combined into a multisignature which can be used to sign the transaction. If fewer than the threshold number of signatures needed are present, the resultant multisignature is considered invalid."),(0,a.kt)("h2",{id:"generate-a-multisig-key"},"Generate a Multisig key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd keys add --multisig=name1,name2,name3[...] --multisig-threshold=K new_key_name\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"K")," is the minimum number of private keys that must have signed the transactions that carry the public key's address as signer."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--multisig")," flag must contain the name of public keys that will be combined into a public key that will be generated and stored as ",(0,a.kt)("inlineCode",{parentName:"p"},"new_key_name")," in the local database. All names supplied through ",(0,a.kt)("inlineCode",{parentName:"p"},"--multisig")," must already exist in the local database."),(0,a.kt)("p",null,"Unless the flag ",(0,a.kt)("inlineCode",{parentName:"p"},"--nosort")," is set, the order in which the keys are supplied on the command line does not matter, i.e. the following commands generate two identical keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd keys add --multisig=p1,p2,p3 --multisig-threshold=2 multisig_address\nosmosisd keys add --multisig=p2,p3,p1 --multisig-threshold=2 multisig_address\n")),(0,a.kt)("h2",{id:"signing-a-transaction"},"Signing a transaction"),(0,a.kt)("h3",{id:"step-1-create-the-multisig-key"},"Step 1: Create the multisig key"),(0,a.kt)("p",null,"Let's assume that you have ",(0,a.kt)("inlineCode",{parentName:"p"},"test1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"test2")," and want to make a multisig account with ",(0,a.kt)("inlineCode",{parentName:"p"},"test3"),"."),(0,a.kt)("p",null,"First import the public keys of ",(0,a.kt)("inlineCode",{parentName:"p"},"test3")," into your keyring."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd keys add \\\n    test3 \\\n    --pubkey=osmopub1addwnpepqgcxazmq6wgt2j4rdfumsfwla0zfk8e5sws3p3zg5dkm9007hmfysxas0u2\n")),(0,a.kt)("p",null,"Generate the multisig key with 2/3 threshold."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd keys add \\\n    multi \\\n    --multisig=test1,test2,test3 \\\n    --multisig-threshold=2\n")),(0,a.kt)("p",null,"You can see its address and details:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'osmosisd keys show multi\n\n- name: multi\n  type: multi\n  address: osmo1e0fx0q9meawrcq7fmma9x60gk35lpr4xk3884m\n  pubkey: osmopub1ytql0csgqgfzd666axrjzq3mxw59ys6yqcd3ydjvhgs0uzs6kdk5fp4t73gmkl8t6y02yfq7tvfzd666axrjzq3sd69kp5usk492x6nehqjal67ynv0nfqapzrzy3gmdk27la0kjfqfzd666axrjzq6utqt639ka2j3xkncgk65dup06t297ccljmxhvhu3rmk92u3afjuyz9dg9\n  mnemonic: ""\n  threshold: 0\n  pubkeys: []\n')),(0,a.kt)("p",null,"Let's add 10 OSMO to the multisig wallet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx bank send \\\n    test1 \\\n    osmo1e0fx0q9meawrcq7fmma9x60gk35lpr4xk3884m \\\n    10000000uosmo \\\n    --chain-id=osmosis-1 \\\n    --gas=auto \\\n    --fees=1000000uosmo \\\n    --broadcast-mode=block\n")),(0,a.kt)("h3",{id:"step-2-create-the-multisig-transaction"},"Step 2: Create the multisig transaction"),(0,a.kt)("p",null,"We want to send 5 OSMO from our multisig account to ",(0,a.kt)("inlineCode",{parentName:"p"},"osmo1rgjxswhuxhcrhmyxlval0qa70vxwvqn2e0srft"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx bank send \\\n    osmo1rgjxswhuxhcrhmyxlval0qa70vxwvqn2e0srft \\\n    osmo157g6rn6t6k5rl0dl57zha2wx72t633axqyvvwq \\\n    5000000uosmo \\\n    --gas=200000 \\\n    --fees=1000000uosmo \\\n    --chain-id=osmosis-1 \\\n    --generate-only > unsignedTx.json\n")),(0,a.kt)("p",null,"The file ",(0,a.kt)("inlineCode",{parentName:"p"},"unsignedTx.json")," contains the unsigned transaction encoded in JSON."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "body": {\n    "messages": [\n      {\n        "@type": "/cosmos.bank.v1beta1.MsgSend",\n        "from_address": "osmo1rgjxswhuxhcrhmyxlval0qa70vxwvqn2e0srft",\n        "to_address": "osmo157g6rn6t6k5rl0dl57zha2wx72t633axqyvvwq",\n        "amount": [\n          {\n            "denom": "uosmo",\n            "amount": "5000000000000000000"\n          }\n        ]\n      }\n    ],\n    "memo": "",\n    "timeout_height": "0",\n    "extension_options": [],\n    "non_critical_extension_options": []\n  },\n  "auth_info": {\n    "signer_infos": [],\n    "fee": {\n      "amount": [\n        {\n          "denom": "uosmo",\n          "amount": "1000000"\n        }\n      ],\n      "gas_limit": "200000",\n      "payer": "",\n      "granter": ""\n    }\n  },\n  "signatures": []\n}\n')),(0,a.kt)("h3",{id:"step-3-sign-individually"},"Step 3: Sign individually"),(0,a.kt)("p",null,"Sign with ",(0,a.kt)("inlineCode",{parentName:"p"},"test1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"test2")," and create individual signatures."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx sign \\\n    unsignedTx.json \\\n    --multisig=osmo1e0fx0q9meawrcq7fmma9x60gk35lpr4xk3884m \\\n    --from=test1 \\\n    --output-document=test1sig.json \\\n    --chain-id=osmosis-1\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx sign \\\n    unsignedTx.json \\\n    --multisig=osmo1e0fx0q9meawrcq7fmma9x60gk35lpr4xk3884m \\\n    --from=test2 \\\n    --output-document=test2sig.json \\\n    --chain-id=osmosis-1\n")),(0,a.kt)("h3",{id:"step-4-create-multisignature"},"Step 4: Create multisignature"),(0,a.kt)("p",null,"Combine signatures to sign transaction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx multisign \\\n    unsignedTx.json \\\n    multi \\\n    test1sig.json test2sig.json \\\n    --output-document=signedTx.json \\\n    --chain-id=osmosis-1\n")),(0,a.kt)("p",null,"The TX is now signed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "body": {\n    "messages": [\n      {\n        "@type": "/cosmos.bank.v1beta1.MsgSend",\n        "from_address": "osmo1rgjxswhuxhcrhmyxlval0qa70vxwvqn2e0srft",\n        "to_address": "osmo157g6rn6t6k5rl0dl57zha2wx72t633axqyvvwq",\n        "amount": [\n          {\n            "denom": "uosmo",\n            "amount": "5000000000000000000"\n          }\n        ]\n      }\n    ],\n    "memo": "",\n    "timeout_height": "0",\n    "extension_options": [],\n    "non_critical_extension_options": []\n  },\n  "auth_info": {\n    "signer_infos": [\n      {\n        "public_key": {\n          "@type": "/cosmos.crypto.multisig.LegacyAminoPubKey",\n          "threshold": 2,\n          "public_keys": [\n            {\n              "@type": "/cosmos.crypto.secp256k1.PubKey",\n              "key": "ApCzSG8k7Tr4aM6e4OJRExN7cNtvH21L9azbh+uRrvt4"\n            },\n            {\n              "@type": "/cosmos.crypto.secp256k1.PubKey",\n              "key": "Ah91erz8ChNanqLe9ea948rvAiXMCRlR5Ka7EE/c0xUK"\n            },\n            {\n              "@type": "/cosmos.crypto.secp256k1.PubKey",\n              "key": "A0OjtIUCFJM3AobJ9HJTWKP9RZV2+WPcwVjLgsAidrZ/"\n            }\n          ]\n        },\n        "mode_info": {\n          "multi": {\n            "bitarray": {\n              "extra_bits_stored": 3,\n              "elems": "wA=="\n            },\n            "mode_infos": [\n              {\n                "single": {\n                  "mode": "SIGN_MODE_LEGACY_AMINO_JSON"\n                }\n              },\n              {\n                "single": {\n                  "mode": "SIGN_MODE_LEGACY_AMINO_JSON"\n                }\n              }\n            ]\n          }\n        },\n        "sequence": "1"\n      }\n    ],\n    "fee": {\n      "amount": [\n        {\n          "denom": "uosmo",\n          "amount": "1000000"\n        }\n      ],\n      "gas_limit": "200000",\n      "payer": "",\n      "granter": ""\n    }\n  },\n  "signatures": [\n    "CkCEeIbeGc+I1ipZuhp/0KhVNnWAv2tTlvgo5x61lzk1KHmLPV38m/YFurrFt5cm5+fqIXrn+FlOjrJuzBhw8ogYCkCawm9mpXsBHk0CFsE5618fVnvScEkfrzW0c2jCcjqV8EPuj3ut74UWzZyQkwtJGxUWtro9EgnGsB7Di1Gzizst"\n  ]\n}\n')),(0,a.kt)("h3",{id:"step-5-broadcast-transaction"},"Step 5: Broadcast transaction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx broadcast signedTx.json \\\n    --chain-id=osmosis-1 \\\n    --broadcast-mode=block\n")))}c.isMDXComponent=!0}}]);